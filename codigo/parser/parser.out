Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> creadirprocglobal a neur22 c cancion
Rule 2     creadirprocglobal -> <empty>
Rule 3     a -> empty
Rule 4     a -> vars a
Rule 5     neur22 -> <empty>
Rule 6     c -> empty
Rule 7     c -> funcion c
Rule 8     vars -> VAR ID : tipo u ;
Rule 9     funcion -> FUNC z ID meterfuncion ( params ) f neur23 bloque
Rule 10    z -> INT
Rule 11    z -> CHAR
Rule 12    z -> FLOAT
Rule 13    z -> BOOL
Rule 14    z -> VOID
Rule 15    meterfuncion -> <empty>
Rule 16    neur23 -> <empty>
Rule 17    f -> empty
Rule 18    f -> vars f
Rule 19    params -> empty
Rule 20    params -> tipo ID meterparams h
Rule 21    meterparams -> <empty>
Rule 22    h -> empty
Rule 23    h -> , params
Rule 24    i -> empty
Rule 25    i -> estatuto i
Rule 26    bloque -> { i }
Rule 27    cancion -> CANCION ( CTEE ) metercancion f bloque
Rule 28    metercancion -> <empty>
Rule 29    estatuto -> asignacion
Rule 30    estatuto -> if
Rule 31    estatuto -> for
Rule 32    estatuto -> return
Rule 33    estatuto -> while
Rule 34    estatuto -> play
Rule 35    estatuto -> print
Rule 36    estatuto -> callvoidfunc
Rule 37    asignacion -> ID asiglista = neur8 expresion ;
Rule 38    neur8 -> <empty>
Rule 39    asiglista -> empty
Rule 40    asiglista -> accesoVarDim
Rule 41    if -> IF ( expresion ) neur13 bloque l ; neur15
Rule 42    neur13 -> <empty>
Rule 43    l -> empty
Rule 44    l -> ELSE neur14 bloque
Rule 45    neur14 -> <empty>
Rule 46    neur15 -> <empty>
Rule 47    for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20
Rule 48    neur18 -> <empty>
Rule 49    neur19 -> <empty>
Rule 50    neur21 -> <empty>
Rule 51    neur20 -> <empty>
Rule 52    expresion -> m subexpresion
Rule 53    m -> empty
Rule 54    m -> NOT m
Rule 55    subexpresion -> exp neur10 o
Rule 56    neur10 -> <empty>
Rule 57    o -> empty
Rule 58    o -> AND neur9_1 subexpresion
Rule 59    o -> OR neur9_2 subexpresion
Rule 60    neur9_1 -> <empty>
Rule 61    neur9_2 -> <empty>
Rule 62    exp -> nexp p neur12
Rule 63    neur12 -> <empty>
Rule 64    p -> empty
Rule 65    p -> EQ neur11_1 nexp
Rule 66    p -> NOTEQ neur11_2 nexp
Rule 67    p -> > neur11_3 nexp
Rule 68    p -> < neur11_4 nexp
Rule 69    p -> MTHANEQ neur11_5 nexp
Rule 70    p -> LTHANEQ neur11_6 nexp
Rule 71    neur11_1 -> <empty>
Rule 72    neur11_2 -> <empty>
Rule 73    neur11_3 -> <empty>
Rule 74    neur11_4 -> <empty>
Rule 75    neur11_5 -> <empty>
Rule 76    neur11_6 -> <empty>
Rule 77    nexp -> termino neur5 q
Rule 78    neur5 -> <empty>
Rule 79    q -> empty
Rule 80    q -> + neur3_1 nexp
Rule 81    q -> - neur3_2 nexp
Rule 82    neur3_1 -> <empty>
Rule 83    neur3_2 -> <empty>
Rule 84    termino -> meteneg factor neur4 n
Rule 85    neur4 -> <empty>
Rule 86    n -> empty
Rule 87    n -> * neur2_1 termino
Rule 88    n -> / neur2_2 termino
Rule 89    neur2_1 -> <empty>
Rule 90    neur2_2 -> <empty>
Rule 91    factor -> ( neur6 expresion ) neur7
Rule 92    factor -> varcte
Rule 93    meteneg -> empty
Rule 94    meteneg -> -
Rule 95    neur6 -> <empty>
Rule 96    neur7 -> <empty>
Rule 97    varcte -> ID r neurVar
Rule 98    varcte -> CTEE neurCteE
Rule 99    varcte -> CTEF neurCteF
Rule 100   varcte -> CTEBOOL neurCteB
Rule 101   varcte -> callreturnfunc
Rule 102   varcte -> CTECHAR neurCteCh
Rule 103   neurVar -> <empty>
Rule 104   neurCteE -> <empty>
Rule 105   neurCteF -> <empty>
Rule 106   neurCteB -> <empty>
Rule 107   neurCteCh -> <empty>
Rule 108   r -> empty
Rule 109   r -> oplista
Rule 110   oplista -> accesoVarDim
Rule 111   oplista -> length
Rule 112   accesoVarDim -> [ neur27 nexp ]
Rule 113   neur27 -> <empty>
Rule 114   length -> . LENGTH ( )
Rule 115   while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17
Rule 116   neur16 -> <empty>
Rule 117   neur17 -> <empty>
Rule 118   play -> PLAY ( NOTA , CTEE ) ;
Rule 119   print -> PRINT expresion ;
Rule 120   callreturnfunc -> CALL ID neur24 ( s ) neur26 ;
Rule 121   s -> empty
Rule 122   s -> expresion neur25 t
Rule 123   neur25 -> <empty>
Rule 124   t -> empty
Rule 125   t -> , s
Rule 126   callvoidfunc -> CALL ID neur24 ( s ) neur26 ;
Rule 127   neur24 -> <empty>
Rule 128   neur26 -> <empty>
Rule 129   return -> RETURN ( expresion ) ;
Rule 130   tipo -> INT
Rule 131   tipo -> CHAR
Rule 132   tipo -> FLOAT
Rule 133   tipo -> BOOL
Rule 134   u -> empty
Rule 135   u -> LIST ( CTEE )
Rule 136   empty -> <empty>

Terminals, with rules where they appear

(                    : 9 27 41 47 91 114 115 118 120 126 129 135
)                    : 9 27 41 47 91 114 115 118 120 126 129 135
*                    : 87
+                    : 80
,                    : 23 118 125
-                    : 81 94
.                    : 114
/                    : 88
:                    : 8
;                    : 8 37 41 47 47 115 118 119 120 126 129
<                    : 68
=                    : 37
>                    : 67
AND                  : 58
BOOL                 : 13 133
CALL                 : 120 126
CANCION              : 27
CHAR                 : 11 131
CTEBOOL              : 100
CTECHAR              : 102
CTEE                 : 27 98 118 135
CTEF                 : 99
ELSE                 : 44
EQ                   : 65
FLOAT                : 12 132
FOR                  : 47
FUNC                 : 9
ID                   : 8 9 20 37 97 120 126
IF                   : 41
INT                  : 10 130
LENGTH               : 114
LIST                 : 135
LTHANEQ              : 70
MTHANEQ              : 69
NOT                  : 54
NOTA                 : 118
NOTEQ                : 66
OR                   : 59
PLAY                 : 118
PRINT                : 119
RETURN               : 129
VAR                  : 8
VOID                 : 14
WHILE                : 115
[                    : 112
]                    : 112
error                : 
{                    : 26
}                    : 26

Nonterminals, with rules where they appear

a                    : 1 4
accesoVarDim         : 40 110
asiglista            : 37
asignacion           : 29 47 47
bloque               : 9 27 41 44 47 115
c                    : 1 7
callreturnfunc       : 101
callvoidfunc         : 36
cancion              : 1
creadirprocglobal    : 1
empty                : 3 6 17 19 22 24 39 43 53 57 64 79 86 93 108 121 124 134
estatuto             : 25
exp                  : 55
expresion            : 37 41 47 91 115 119 122 129
f                    : 9 18 27
factor               : 84
for                  : 31
funcion              : 7
h                    : 20
i                    : 25 26
if                   : 30
l                    : 41
length               : 111
m                    : 52 54
meteneg              : 84
metercancion         : 27
meterfuncion         : 9
meterparams          : 20
n                    : 84
neur10               : 55
neur11_1             : 65
neur11_2             : 66
neur11_3             : 67
neur11_4             : 68
neur11_5             : 69
neur11_6             : 70
neur12               : 62
neur13               : 41 115
neur14               : 44
neur15               : 41
neur16               : 115
neur17               : 115
neur18               : 47
neur19               : 47
neur20               : 47
neur21               : 47
neur22               : 1
neur23               : 9
neur24               : 120 126
neur25               : 122
neur26               : 120 126
neur27               : 112
neur2_1              : 87
neur2_2              : 88
neur3_1              : 80
neur3_2              : 81
neur4                : 84
neur5                : 77
neur6                : 91
neur7                : 91
neur8                : 37
neur9_1              : 58
neur9_2              : 59
neurCteB             : 100
neurCteCh            : 102
neurCteE             : 98
neurCteF             : 99
neurVar              : 97
nexp                 : 62 65 66 67 68 69 70 80 81 112
o                    : 55
oplista              : 109
p                    : 62
params               : 9 23
play                 : 34
print                : 35
programa             : 0
q                    : 77
r                    : 97
return               : 32
s                    : 120 125 126
subexpresion         : 52 58 59
t                    : 122
termino              : 77 87 88
tipo                 : 8 20
u                    : 8
varcte               : 92
vars                 : 4 18
while                : 33
z                    : 9

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . creadirprocglobal a neur22 c cancion
    (2) creadirprocglobal -> .

    VAR             reduce using rule 2 (creadirprocglobal -> .)
    FUNC            reduce using rule 2 (creadirprocglobal -> .)
    CANCION         reduce using rule 2 (creadirprocglobal -> .)

    creadirprocglobal              shift and go to state 1
    programa                       shift and go to state 2

state 1

    (1) programa -> creadirprocglobal . a neur22 c cancion
    (3) a -> . empty
    (4) a -> . vars a
    (136) empty -> .
    (8) vars -> . VAR ID : tipo u ;

    FUNC            reduce using rule 136 (empty -> .)
    CANCION         reduce using rule 136 (empty -> .)
    VAR             shift and go to state 5

    a                              shift and go to state 3
    vars                           shift and go to state 4
    empty                          shift and go to state 6

state 2

    (0) S' -> programa .



state 3

    (1) programa -> creadirprocglobal a . neur22 c cancion
    (5) neur22 -> .

    FUNC            reduce using rule 5 (neur22 -> .)
    CANCION         reduce using rule 5 (neur22 -> .)

    neur22                         shift and go to state 7

state 4

    (4) a -> vars . a
    (3) a -> . empty
    (4) a -> . vars a
    (136) empty -> .
    (8) vars -> . VAR ID : tipo u ;

    FUNC            reduce using rule 136 (empty -> .)
    CANCION         reduce using rule 136 (empty -> .)
    VAR             shift and go to state 5

    a                              shift and go to state 8
    empty                          shift and go to state 6
    vars                           shift and go to state 4

state 5

    (8) vars -> VAR . ID : tipo u ;

    ID              shift and go to state 9


state 6

    (3) a -> empty .

    FUNC            reduce using rule 3 (a -> empty .)
    CANCION         reduce using rule 3 (a -> empty .)


state 7

    (1) programa -> creadirprocglobal a neur22 . c cancion
    (6) c -> . empty
    (7) c -> . funcion c
    (136) empty -> .
    (9) funcion -> . FUNC z ID meterfuncion ( params ) f neur23 bloque

    CANCION         reduce using rule 136 (empty -> .)
    FUNC            shift and go to state 11

    c                              shift and go to state 10
    empty                          shift and go to state 12
    funcion                        shift and go to state 13

state 8

    (4) a -> vars a .

    FUNC            reduce using rule 4 (a -> vars a .)
    CANCION         reduce using rule 4 (a -> vars a .)


state 9

    (8) vars -> VAR ID . : tipo u ;

    :               shift and go to state 14


state 10

    (1) programa -> creadirprocglobal a neur22 c . cancion
    (27) cancion -> . CANCION ( CTEE ) metercancion f bloque

    CANCION         shift and go to state 16

    cancion                        shift and go to state 15

state 11

    (9) funcion -> FUNC . z ID meterfuncion ( params ) f neur23 bloque
    (10) z -> . INT
    (11) z -> . CHAR
    (12) z -> . FLOAT
    (13) z -> . BOOL
    (14) z -> . VOID

    INT             shift and go to state 20
    CHAR            shift and go to state 19
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 21
    VOID            shift and go to state 17

    z                              shift and go to state 22

state 12

    (6) c -> empty .

    CANCION         reduce using rule 6 (c -> empty .)


state 13

    (7) c -> funcion . c
    (6) c -> . empty
    (7) c -> . funcion c
    (136) empty -> .
    (9) funcion -> . FUNC z ID meterfuncion ( params ) f neur23 bloque

    CANCION         reduce using rule 136 (empty -> .)
    FUNC            shift and go to state 11

    c                              shift and go to state 23
    empty                          shift and go to state 12
    funcion                        shift and go to state 13

state 14

    (8) vars -> VAR ID : . tipo u ;
    (130) tipo -> . INT
    (131) tipo -> . CHAR
    (132) tipo -> . FLOAT
    (133) tipo -> . BOOL

    INT             shift and go to state 25
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 26
    BOOL            shift and go to state 28

    tipo                           shift and go to state 24

state 15

    (1) programa -> creadirprocglobal a neur22 c cancion .

    $end            reduce using rule 1 (programa -> creadirprocglobal a neur22 c cancion .)


state 16

    (27) cancion -> CANCION . ( CTEE ) metercancion f bloque

    (               shift and go to state 29


state 17

    (14) z -> VOID .

    ID              reduce using rule 14 (z -> VOID .)


state 18

    (12) z -> FLOAT .

    ID              reduce using rule 12 (z -> FLOAT .)


state 19

    (11) z -> CHAR .

    ID              reduce using rule 11 (z -> CHAR .)


state 20

    (10) z -> INT .

    ID              reduce using rule 10 (z -> INT .)


state 21

    (13) z -> BOOL .

    ID              reduce using rule 13 (z -> BOOL .)


state 22

    (9) funcion -> FUNC z . ID meterfuncion ( params ) f neur23 bloque

    ID              shift and go to state 30


state 23

    (7) c -> funcion c .

    CANCION         reduce using rule 7 (c -> funcion c .)


state 24

    (8) vars -> VAR ID : tipo . u ;
    (134) u -> . empty
    (135) u -> . LIST ( CTEE )
    (136) empty -> .

    LIST            shift and go to state 31
    ;               reduce using rule 136 (empty -> .)

    u                              shift and go to state 32
    empty                          shift and go to state 33

state 25

    (130) tipo -> INT .

    ID              reduce using rule 130 (tipo -> INT .)
    LIST            reduce using rule 130 (tipo -> INT .)
    ;               reduce using rule 130 (tipo -> INT .)


state 26

    (132) tipo -> FLOAT .

    ID              reduce using rule 132 (tipo -> FLOAT .)
    LIST            reduce using rule 132 (tipo -> FLOAT .)
    ;               reduce using rule 132 (tipo -> FLOAT .)


state 27

    (131) tipo -> CHAR .

    ID              reduce using rule 131 (tipo -> CHAR .)
    LIST            reduce using rule 131 (tipo -> CHAR .)
    ;               reduce using rule 131 (tipo -> CHAR .)


state 28

    (133) tipo -> BOOL .

    ID              reduce using rule 133 (tipo -> BOOL .)
    LIST            reduce using rule 133 (tipo -> BOOL .)
    ;               reduce using rule 133 (tipo -> BOOL .)


state 29

    (27) cancion -> CANCION ( . CTEE ) metercancion f bloque

    CTEE            shift and go to state 34


state 30

    (9) funcion -> FUNC z ID . meterfuncion ( params ) f neur23 bloque
    (15) meterfuncion -> .

    (               reduce using rule 15 (meterfuncion -> .)

    meterfuncion                   shift and go to state 35

state 31

    (135) u -> LIST . ( CTEE )

    (               shift and go to state 36


state 32

    (8) vars -> VAR ID : tipo u . ;

    ;               shift and go to state 37


state 33

    (134) u -> empty .

    ;               reduce using rule 134 (u -> empty .)


state 34

    (27) cancion -> CANCION ( CTEE . ) metercancion f bloque

    )               shift and go to state 38


state 35

    (9) funcion -> FUNC z ID meterfuncion . ( params ) f neur23 bloque

    (               shift and go to state 39


state 36

    (135) u -> LIST ( . CTEE )

    CTEE            shift and go to state 40


state 37

    (8) vars -> VAR ID : tipo u ; .

    VAR             reduce using rule 8 (vars -> VAR ID : tipo u ; .)
    FUNC            reduce using rule 8 (vars -> VAR ID : tipo u ; .)
    CANCION         reduce using rule 8 (vars -> VAR ID : tipo u ; .)
    {               reduce using rule 8 (vars -> VAR ID : tipo u ; .)


state 38

    (27) cancion -> CANCION ( CTEE ) . metercancion f bloque
    (28) metercancion -> .

    VAR             reduce using rule 28 (metercancion -> .)
    {               reduce using rule 28 (metercancion -> .)

    metercancion                   shift and go to state 41

state 39

    (9) funcion -> FUNC z ID meterfuncion ( . params ) f neur23 bloque
    (19) params -> . empty
    (20) params -> . tipo ID meterparams h
    (136) empty -> .
    (130) tipo -> . INT
    (131) tipo -> . CHAR
    (132) tipo -> . FLOAT
    (133) tipo -> . BOOL

    )               reduce using rule 136 (empty -> .)
    INT             shift and go to state 25
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 26
    BOOL            shift and go to state 28

    tipo                           shift and go to state 42
    params                         shift and go to state 43
    empty                          shift and go to state 44

state 40

    (135) u -> LIST ( CTEE . )

    )               shift and go to state 45


state 41

    (27) cancion -> CANCION ( CTEE ) metercancion . f bloque
    (17) f -> . empty
    (18) f -> . vars f
    (136) empty -> .
    (8) vars -> . VAR ID : tipo u ;

    {               reduce using rule 136 (empty -> .)
    VAR             shift and go to state 5

    vars                           shift and go to state 46
    f                              shift and go to state 47
    empty                          shift and go to state 48

state 42

    (20) params -> tipo . ID meterparams h

    ID              shift and go to state 49


state 43

    (9) funcion -> FUNC z ID meterfuncion ( params . ) f neur23 bloque

    )               shift and go to state 50


state 44

    (19) params -> empty .

    )               reduce using rule 19 (params -> empty .)


state 45

    (135) u -> LIST ( CTEE ) .

    ;               reduce using rule 135 (u -> LIST ( CTEE ) .)


state 46

    (18) f -> vars . f
    (17) f -> . empty
    (18) f -> . vars f
    (136) empty -> .
    (8) vars -> . VAR ID : tipo u ;

    {               reduce using rule 136 (empty -> .)
    VAR             shift and go to state 5

    empty                          shift and go to state 48
    vars                           shift and go to state 46
    f                              shift and go to state 51

state 47

    (27) cancion -> CANCION ( CTEE ) metercancion f . bloque
    (26) bloque -> . { i }

    {               shift and go to state 52

    bloque                         shift and go to state 53

state 48

    (17) f -> empty .

    {               reduce using rule 17 (f -> empty .)


state 49

    (20) params -> tipo ID . meterparams h
    (21) meterparams -> .

    ,               reduce using rule 21 (meterparams -> .)
    )               reduce using rule 21 (meterparams -> .)

    meterparams                    shift and go to state 54

state 50

    (9) funcion -> FUNC z ID meterfuncion ( params ) . f neur23 bloque
    (17) f -> . empty
    (18) f -> . vars f
    (136) empty -> .
    (8) vars -> . VAR ID : tipo u ;

    {               reduce using rule 136 (empty -> .)
    VAR             shift and go to state 5

    vars                           shift and go to state 46
    f                              shift and go to state 55
    empty                          shift and go to state 48

state 51

    (18) f -> vars f .

    {               reduce using rule 18 (f -> vars f .)


state 52

    (26) bloque -> { . i }
    (24) i -> . empty
    (25) i -> . estatuto i
    (136) empty -> .
    (29) estatuto -> . asignacion
    (30) estatuto -> . if
    (31) estatuto -> . for
    (32) estatuto -> . return
    (33) estatuto -> . while
    (34) estatuto -> . play
    (35) estatuto -> . print
    (36) estatuto -> . callvoidfunc
    (37) asignacion -> . ID asiglista = neur8 expresion ;
    (41) if -> . IF ( expresion ) neur13 bloque l ; neur15
    (47) for -> . FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20
    (129) return -> . RETURN ( expresion ) ;
    (115) while -> . WHILE ( neur16 expresion ) neur13 bloque ; neur17
    (118) play -> . PLAY ( NOTA , CTEE ) ;
    (119) print -> . PRINT expresion ;
    (126) callvoidfunc -> . CALL ID neur24 ( s ) neur26 ;

    }               reduce using rule 136 (empty -> .)
    ID              shift and go to state 68
    IF              shift and go to state 69
    FOR             shift and go to state 67
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    PLAY            shift and go to state 64
    PRINT           shift and go to state 58
    CALL            shift and go to state 72

    if                             shift and go to state 59
    for                            shift and go to state 60
    callvoidfunc                   shift and go to state 73
    estatuto                       shift and go to state 61
    print                          shift and go to state 62
    empty                          shift and go to state 63
    play                           shift and go to state 65
    return                         shift and go to state 66
    asignacion                     shift and go to state 70
    i                              shift and go to state 71
    while                          shift and go to state 74

state 53

    (27) cancion -> CANCION ( CTEE ) metercancion f bloque .

    $end            reduce using rule 27 (cancion -> CANCION ( CTEE ) metercancion f bloque .)


state 54

    (20) params -> tipo ID meterparams . h
    (22) h -> . empty
    (23) h -> . , params
    (136) empty -> .

    ,               shift and go to state 76
    )               reduce using rule 136 (empty -> .)

    h                              shift and go to state 75
    empty                          shift and go to state 77

state 55

    (9) funcion -> FUNC z ID meterfuncion ( params ) f . neur23 bloque
    (16) neur23 -> .

    {               reduce using rule 16 (neur23 -> .)

    neur23                         shift and go to state 78

state 56

    (129) return -> RETURN . ( expresion ) ;

    (               shift and go to state 79


state 57

    (115) while -> WHILE . ( neur16 expresion ) neur13 bloque ; neur17

    (               shift and go to state 80


state 58

    (119) print -> PRINT . expresion ;
    (52) expresion -> . m subexpresion
    (53) m -> . empty
    (54) m -> . NOT m
    (136) empty -> .

    NOT             shift and go to state 83
    -               reduce using rule 136 (empty -> .)
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    expresion                      shift and go to state 81
    m                              shift and go to state 82
    empty                          shift and go to state 84

state 59

    (30) estatuto -> if .

    ID              reduce using rule 30 (estatuto -> if .)
    IF              reduce using rule 30 (estatuto -> if .)
    FOR             reduce using rule 30 (estatuto -> if .)
    RETURN          reduce using rule 30 (estatuto -> if .)
    WHILE           reduce using rule 30 (estatuto -> if .)
    PLAY            reduce using rule 30 (estatuto -> if .)
    PRINT           reduce using rule 30 (estatuto -> if .)
    CALL            reduce using rule 30 (estatuto -> if .)
    }               reduce using rule 30 (estatuto -> if .)


state 60

    (31) estatuto -> for .

    ID              reduce using rule 31 (estatuto -> for .)
    IF              reduce using rule 31 (estatuto -> for .)
    FOR             reduce using rule 31 (estatuto -> for .)
    RETURN          reduce using rule 31 (estatuto -> for .)
    WHILE           reduce using rule 31 (estatuto -> for .)
    PLAY            reduce using rule 31 (estatuto -> for .)
    PRINT           reduce using rule 31 (estatuto -> for .)
    CALL            reduce using rule 31 (estatuto -> for .)
    }               reduce using rule 31 (estatuto -> for .)


state 61

    (25) i -> estatuto . i
    (24) i -> . empty
    (25) i -> . estatuto i
    (136) empty -> .
    (29) estatuto -> . asignacion
    (30) estatuto -> . if
    (31) estatuto -> . for
    (32) estatuto -> . return
    (33) estatuto -> . while
    (34) estatuto -> . play
    (35) estatuto -> . print
    (36) estatuto -> . callvoidfunc
    (37) asignacion -> . ID asiglista = neur8 expresion ;
    (41) if -> . IF ( expresion ) neur13 bloque l ; neur15
    (47) for -> . FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20
    (129) return -> . RETURN ( expresion ) ;
    (115) while -> . WHILE ( neur16 expresion ) neur13 bloque ; neur17
    (118) play -> . PLAY ( NOTA , CTEE ) ;
    (119) print -> . PRINT expresion ;
    (126) callvoidfunc -> . CALL ID neur24 ( s ) neur26 ;

    }               reduce using rule 136 (empty -> .)
    ID              shift and go to state 68
    IF              shift and go to state 69
    FOR             shift and go to state 67
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    PLAY            shift and go to state 64
    PRINT           shift and go to state 58
    CALL            shift and go to state 72

    if                             shift and go to state 59
    for                            shift and go to state 60
    callvoidfunc                   shift and go to state 73
    estatuto                       shift and go to state 61
    print                          shift and go to state 62
    empty                          shift and go to state 63
    play                           shift and go to state 65
    return                         shift and go to state 66
    asignacion                     shift and go to state 70
    i                              shift and go to state 85
    while                          shift and go to state 74

state 62

    (35) estatuto -> print .

    ID              reduce using rule 35 (estatuto -> print .)
    IF              reduce using rule 35 (estatuto -> print .)
    FOR             reduce using rule 35 (estatuto -> print .)
    RETURN          reduce using rule 35 (estatuto -> print .)
    WHILE           reduce using rule 35 (estatuto -> print .)
    PLAY            reduce using rule 35 (estatuto -> print .)
    PRINT           reduce using rule 35 (estatuto -> print .)
    CALL            reduce using rule 35 (estatuto -> print .)
    }               reduce using rule 35 (estatuto -> print .)


state 63

    (24) i -> empty .

    }               reduce using rule 24 (i -> empty .)


state 64

    (118) play -> PLAY . ( NOTA , CTEE ) ;

    (               shift and go to state 86


state 65

    (34) estatuto -> play .

    ID              reduce using rule 34 (estatuto -> play .)
    IF              reduce using rule 34 (estatuto -> play .)
    FOR             reduce using rule 34 (estatuto -> play .)
    RETURN          reduce using rule 34 (estatuto -> play .)
    WHILE           reduce using rule 34 (estatuto -> play .)
    PLAY            reduce using rule 34 (estatuto -> play .)
    PRINT           reduce using rule 34 (estatuto -> play .)
    CALL            reduce using rule 34 (estatuto -> play .)
    }               reduce using rule 34 (estatuto -> play .)


state 66

    (32) estatuto -> return .

    ID              reduce using rule 32 (estatuto -> return .)
    IF              reduce using rule 32 (estatuto -> return .)
    FOR             reduce using rule 32 (estatuto -> return .)
    RETURN          reduce using rule 32 (estatuto -> return .)
    WHILE           reduce using rule 32 (estatuto -> return .)
    PLAY            reduce using rule 32 (estatuto -> return .)
    PRINT           reduce using rule 32 (estatuto -> return .)
    CALL            reduce using rule 32 (estatuto -> return .)
    }               reduce using rule 32 (estatuto -> return .)


state 67

    (47) for -> FOR . ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20

    (               shift and go to state 87


state 68

    (37) asignacion -> ID . asiglista = neur8 expresion ;
    (39) asiglista -> . empty
    (40) asiglista -> . accesoVarDim
    (136) empty -> .
    (112) accesoVarDim -> . [ neur27 nexp ]

    =               reduce using rule 136 (empty -> .)
    [               shift and go to state 90

    accesoVarDim                   shift and go to state 88
    asiglista                      shift and go to state 89
    empty                          shift and go to state 91

state 69

    (41) if -> IF . ( expresion ) neur13 bloque l ; neur15

    (               shift and go to state 92


state 70

    (29) estatuto -> asignacion .

    ID              reduce using rule 29 (estatuto -> asignacion .)
    IF              reduce using rule 29 (estatuto -> asignacion .)
    FOR             reduce using rule 29 (estatuto -> asignacion .)
    RETURN          reduce using rule 29 (estatuto -> asignacion .)
    WHILE           reduce using rule 29 (estatuto -> asignacion .)
    PLAY            reduce using rule 29 (estatuto -> asignacion .)
    PRINT           reduce using rule 29 (estatuto -> asignacion .)
    CALL            reduce using rule 29 (estatuto -> asignacion .)
    }               reduce using rule 29 (estatuto -> asignacion .)


state 71

    (26) bloque -> { i . }

    }               shift and go to state 93


state 72

    (126) callvoidfunc -> CALL . ID neur24 ( s ) neur26 ;

    ID              shift and go to state 94


state 73

    (36) estatuto -> callvoidfunc .

    ID              reduce using rule 36 (estatuto -> callvoidfunc .)
    IF              reduce using rule 36 (estatuto -> callvoidfunc .)
    FOR             reduce using rule 36 (estatuto -> callvoidfunc .)
    RETURN          reduce using rule 36 (estatuto -> callvoidfunc .)
    WHILE           reduce using rule 36 (estatuto -> callvoidfunc .)
    PLAY            reduce using rule 36 (estatuto -> callvoidfunc .)
    PRINT           reduce using rule 36 (estatuto -> callvoidfunc .)
    CALL            reduce using rule 36 (estatuto -> callvoidfunc .)
    }               reduce using rule 36 (estatuto -> callvoidfunc .)


state 74

    (33) estatuto -> while .

    ID              reduce using rule 33 (estatuto -> while .)
    IF              reduce using rule 33 (estatuto -> while .)
    FOR             reduce using rule 33 (estatuto -> while .)
    RETURN          reduce using rule 33 (estatuto -> while .)
    WHILE           reduce using rule 33 (estatuto -> while .)
    PLAY            reduce using rule 33 (estatuto -> while .)
    PRINT           reduce using rule 33 (estatuto -> while .)
    CALL            reduce using rule 33 (estatuto -> while .)
    }               reduce using rule 33 (estatuto -> while .)


state 75

    (20) params -> tipo ID meterparams h .

    )               reduce using rule 20 (params -> tipo ID meterparams h .)


state 76

    (23) h -> , . params
    (19) params -> . empty
    (20) params -> . tipo ID meterparams h
    (136) empty -> .
    (130) tipo -> . INT
    (131) tipo -> . CHAR
    (132) tipo -> . FLOAT
    (133) tipo -> . BOOL

    )               reduce using rule 136 (empty -> .)
    INT             shift and go to state 25
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 26
    BOOL            shift and go to state 28

    params                         shift and go to state 95
    tipo                           shift and go to state 42
    empty                          shift and go to state 44

state 77

    (22) h -> empty .

    )               reduce using rule 22 (h -> empty .)


state 78

    (9) funcion -> FUNC z ID meterfuncion ( params ) f neur23 . bloque
    (26) bloque -> . { i }

    {               shift and go to state 52

    bloque                         shift and go to state 96

state 79

    (129) return -> RETURN ( . expresion ) ;
    (52) expresion -> . m subexpresion
    (53) m -> . empty
    (54) m -> . NOT m
    (136) empty -> .

    NOT             shift and go to state 83
    -               reduce using rule 136 (empty -> .)
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    expresion                      shift and go to state 97
    m                              shift and go to state 82
    empty                          shift and go to state 84

state 80

    (115) while -> WHILE ( . neur16 expresion ) neur13 bloque ; neur17
    (116) neur16 -> .

    NOT             reduce using rule 116 (neur16 -> .)
    -               reduce using rule 116 (neur16 -> .)
    (               reduce using rule 116 (neur16 -> .)
    ID              reduce using rule 116 (neur16 -> .)
    CTEE            reduce using rule 116 (neur16 -> .)
    CTEF            reduce using rule 116 (neur16 -> .)
    CTEBOOL         reduce using rule 116 (neur16 -> .)
    CTECHAR         reduce using rule 116 (neur16 -> .)
    CALL            reduce using rule 116 (neur16 -> .)

    neur16                         shift and go to state 98

state 81

    (119) print -> PRINT expresion . ;

    ;               shift and go to state 99


state 82

    (52) expresion -> m . subexpresion
    (55) subexpresion -> . exp neur10 o
    (62) exp -> . nexp p neur12
    (77) nexp -> . termino neur5 q
    (84) termino -> . meteneg factor neur4 n
    (93) meteneg -> . empty
    (94) meteneg -> . -
    (136) empty -> .

    -               shift and go to state 101
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    meteneg                        shift and go to state 100
    nexp                           shift and go to state 102
    subexpresion                   shift and go to state 103
    empty                          shift and go to state 104
    termino                        shift and go to state 105
    exp                            shift and go to state 106

state 83

    (54) m -> NOT . m
    (53) m -> . empty
    (54) m -> . NOT m
    (136) empty -> .

    NOT             shift and go to state 83
    -               reduce using rule 136 (empty -> .)
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    m                              shift and go to state 107
    empty                          shift and go to state 84

state 84

    (53) m -> empty .

    -               reduce using rule 53 (m -> empty .)
    (               reduce using rule 53 (m -> empty .)
    ID              reduce using rule 53 (m -> empty .)
    CTEE            reduce using rule 53 (m -> empty .)
    CTEF            reduce using rule 53 (m -> empty .)
    CTEBOOL         reduce using rule 53 (m -> empty .)
    CTECHAR         reduce using rule 53 (m -> empty .)
    CALL            reduce using rule 53 (m -> empty .)


state 85

    (25) i -> estatuto i .

    }               reduce using rule 25 (i -> estatuto i .)


state 86

    (118) play -> PLAY ( . NOTA , CTEE ) ;

    NOTA            shift and go to state 108


state 87

    (47) for -> FOR ( . asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20
    (37) asignacion -> . ID asiglista = neur8 expresion ;

    ID              shift and go to state 68

    asignacion                     shift and go to state 109

state 88

    (40) asiglista -> accesoVarDim .

    =               reduce using rule 40 (asiglista -> accesoVarDim .)


state 89

    (37) asignacion -> ID asiglista . = neur8 expresion ;

    =               shift and go to state 110


state 90

    (112) accesoVarDim -> [ . neur27 nexp ]
    (113) neur27 -> .

    -               reduce using rule 113 (neur27 -> .)
    (               reduce using rule 113 (neur27 -> .)
    ID              reduce using rule 113 (neur27 -> .)
    CTEE            reduce using rule 113 (neur27 -> .)
    CTEF            reduce using rule 113 (neur27 -> .)
    CTEBOOL         reduce using rule 113 (neur27 -> .)
    CTECHAR         reduce using rule 113 (neur27 -> .)
    CALL            reduce using rule 113 (neur27 -> .)

    neur27                         shift and go to state 111

state 91

    (39) asiglista -> empty .

    =               reduce using rule 39 (asiglista -> empty .)


state 92

    (41) if -> IF ( . expresion ) neur13 bloque l ; neur15
    (52) expresion -> . m subexpresion
    (53) m -> . empty
    (54) m -> . NOT m
    (136) empty -> .

    NOT             shift and go to state 83
    -               reduce using rule 136 (empty -> .)
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    expresion                      shift and go to state 112
    m                              shift and go to state 82
    empty                          shift and go to state 84

state 93

    (26) bloque -> { i } .

    ;               reduce using rule 26 (bloque -> { i } .)
    FUNC            reduce using rule 26 (bloque -> { i } .)
    CANCION         reduce using rule 26 (bloque -> { i } .)
    ELSE            reduce using rule 26 (bloque -> { i } .)
    $end            reduce using rule 26 (bloque -> { i } .)


state 94

    (126) callvoidfunc -> CALL ID . neur24 ( s ) neur26 ;
    (127) neur24 -> .

    (               reduce using rule 127 (neur24 -> .)

    neur24                         shift and go to state 113

state 95

    (23) h -> , params .

    )               reduce using rule 23 (h -> , params .)


state 96

    (9) funcion -> FUNC z ID meterfuncion ( params ) f neur23 bloque .

    FUNC            reduce using rule 9 (funcion -> FUNC z ID meterfuncion ( params ) f neur23 bloque .)
    CANCION         reduce using rule 9 (funcion -> FUNC z ID meterfuncion ( params ) f neur23 bloque .)


state 97

    (129) return -> RETURN ( expresion . ) ;

    )               shift and go to state 114


state 98

    (115) while -> WHILE ( neur16 . expresion ) neur13 bloque ; neur17
    (52) expresion -> . m subexpresion
    (53) m -> . empty
    (54) m -> . NOT m
    (136) empty -> .

    NOT             shift and go to state 83
    -               reduce using rule 136 (empty -> .)
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    expresion                      shift and go to state 115
    m                              shift and go to state 82
    empty                          shift and go to state 84

state 99

    (119) print -> PRINT expresion ; .

    ID              reduce using rule 119 (print -> PRINT expresion ; .)
    IF              reduce using rule 119 (print -> PRINT expresion ; .)
    FOR             reduce using rule 119 (print -> PRINT expresion ; .)
    RETURN          reduce using rule 119 (print -> PRINT expresion ; .)
    WHILE           reduce using rule 119 (print -> PRINT expresion ; .)
    PLAY            reduce using rule 119 (print -> PRINT expresion ; .)
    PRINT           reduce using rule 119 (print -> PRINT expresion ; .)
    CALL            reduce using rule 119 (print -> PRINT expresion ; .)
    }               reduce using rule 119 (print -> PRINT expresion ; .)


state 100

    (84) termino -> meteneg . factor neur4 n
    (91) factor -> . ( neur6 expresion ) neur7
    (92) factor -> . varcte
    (97) varcte -> . ID r neurVar
    (98) varcte -> . CTEE neurCteE
    (99) varcte -> . CTEF neurCteF
    (100) varcte -> . CTEBOOL neurCteB
    (101) varcte -> . callreturnfunc
    (102) varcte -> . CTECHAR neurCteCh
    (120) callreturnfunc -> . CALL ID neur24 ( s ) neur26 ;

    (               shift and go to state 117
    ID              shift and go to state 122
    CTEE            shift and go to state 125
    CTEF            shift and go to state 124
    CTEBOOL         shift and go to state 123
    CTECHAR         shift and go to state 121
    CALL            shift and go to state 120

    varcte                         shift and go to state 116
    callreturnfunc                 shift and go to state 118
    factor                         shift and go to state 119

state 101

    (94) meteneg -> - .

    (               reduce using rule 94 (meteneg -> - .)
    ID              reduce using rule 94 (meteneg -> - .)
    CTEE            reduce using rule 94 (meteneg -> - .)
    CTEF            reduce using rule 94 (meteneg -> - .)
    CTEBOOL         reduce using rule 94 (meteneg -> - .)
    CTECHAR         reduce using rule 94 (meteneg -> - .)
    CALL            reduce using rule 94 (meteneg -> - .)


state 102

    (62) exp -> nexp . p neur12
    (64) p -> . empty
    (65) p -> . EQ neur11_1 nexp
    (66) p -> . NOTEQ neur11_2 nexp
    (67) p -> . > neur11_3 nexp
    (68) p -> . < neur11_4 nexp
    (69) p -> . MTHANEQ neur11_5 nexp
    (70) p -> . LTHANEQ neur11_6 nexp
    (136) empty -> .

    EQ              shift and go to state 130
    NOTEQ           shift and go to state 129
    >               shift and go to state 133
    <               shift and go to state 131
    MTHANEQ         shift and go to state 126
    LTHANEQ         shift and go to state 128
    AND             reduce using rule 136 (empty -> .)
    OR              reduce using rule 136 (empty -> .)
    ;               reduce using rule 136 (empty -> .)
    )               reduce using rule 136 (empty -> .)
    ,               reduce using rule 136 (empty -> .)

    p                              shift and go to state 127
    empty                          shift and go to state 132

state 103

    (52) expresion -> m subexpresion .

    )               reduce using rule 52 (expresion -> m subexpresion .)
    ;               reduce using rule 52 (expresion -> m subexpresion .)
    ,               reduce using rule 52 (expresion -> m subexpresion .)


state 104

    (93) meteneg -> empty .

    (               reduce using rule 93 (meteneg -> empty .)
    ID              reduce using rule 93 (meteneg -> empty .)
    CTEE            reduce using rule 93 (meteneg -> empty .)
    CTEF            reduce using rule 93 (meteneg -> empty .)
    CTEBOOL         reduce using rule 93 (meteneg -> empty .)
    CTECHAR         reduce using rule 93 (meteneg -> empty .)
    CALL            reduce using rule 93 (meteneg -> empty .)


state 105

    (77) nexp -> termino . neur5 q
    (78) neur5 -> .

    +               reduce using rule 78 (neur5 -> .)
    -               reduce using rule 78 (neur5 -> .)
    EQ              reduce using rule 78 (neur5 -> .)
    NOTEQ           reduce using rule 78 (neur5 -> .)
    >               reduce using rule 78 (neur5 -> .)
    <               reduce using rule 78 (neur5 -> .)
    MTHANEQ         reduce using rule 78 (neur5 -> .)
    LTHANEQ         reduce using rule 78 (neur5 -> .)
    AND             reduce using rule 78 (neur5 -> .)
    OR              reduce using rule 78 (neur5 -> .)
    ;               reduce using rule 78 (neur5 -> .)
    )               reduce using rule 78 (neur5 -> .)
    ,               reduce using rule 78 (neur5 -> .)
    ]               reduce using rule 78 (neur5 -> .)

    neur5                          shift and go to state 134

state 106

    (55) subexpresion -> exp . neur10 o
    (56) neur10 -> .

    AND             reduce using rule 56 (neur10 -> .)
    OR              reduce using rule 56 (neur10 -> .)
    ;               reduce using rule 56 (neur10 -> .)
    )               reduce using rule 56 (neur10 -> .)
    ,               reduce using rule 56 (neur10 -> .)

    neur10                         shift and go to state 135

state 107

    (54) m -> NOT m .

    -               reduce using rule 54 (m -> NOT m .)
    (               reduce using rule 54 (m -> NOT m .)
    ID              reduce using rule 54 (m -> NOT m .)
    CTEE            reduce using rule 54 (m -> NOT m .)
    CTEF            reduce using rule 54 (m -> NOT m .)
    CTEBOOL         reduce using rule 54 (m -> NOT m .)
    CTECHAR         reduce using rule 54 (m -> NOT m .)
    CALL            reduce using rule 54 (m -> NOT m .)


state 108

    (118) play -> PLAY ( NOTA . , CTEE ) ;

    ,               shift and go to state 136


state 109

    (47) for -> FOR ( asignacion . neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20
    (48) neur18 -> .

    NOT             reduce using rule 48 (neur18 -> .)
    -               reduce using rule 48 (neur18 -> .)
    (               reduce using rule 48 (neur18 -> .)
    ID              reduce using rule 48 (neur18 -> .)
    CTEE            reduce using rule 48 (neur18 -> .)
    CTEF            reduce using rule 48 (neur18 -> .)
    CTEBOOL         reduce using rule 48 (neur18 -> .)
    CTECHAR         reduce using rule 48 (neur18 -> .)
    CALL            reduce using rule 48 (neur18 -> .)

    neur18                         shift and go to state 137

state 110

    (37) asignacion -> ID asiglista = . neur8 expresion ;
    (38) neur8 -> .

    NOT             reduce using rule 38 (neur8 -> .)
    -               reduce using rule 38 (neur8 -> .)
    (               reduce using rule 38 (neur8 -> .)
    ID              reduce using rule 38 (neur8 -> .)
    CTEE            reduce using rule 38 (neur8 -> .)
    CTEF            reduce using rule 38 (neur8 -> .)
    CTEBOOL         reduce using rule 38 (neur8 -> .)
    CTECHAR         reduce using rule 38 (neur8 -> .)
    CALL            reduce using rule 38 (neur8 -> .)

    neur8                          shift and go to state 138

state 111

    (112) accesoVarDim -> [ neur27 . nexp ]
    (77) nexp -> . termino neur5 q
    (84) termino -> . meteneg factor neur4 n
    (93) meteneg -> . empty
    (94) meteneg -> . -
    (136) empty -> .

    -               shift and go to state 101
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    meteneg                        shift and go to state 100
    nexp                           shift and go to state 139
    empty                          shift and go to state 104
    termino                        shift and go to state 105

state 112

    (41) if -> IF ( expresion . ) neur13 bloque l ; neur15

    )               shift and go to state 140


state 113

    (126) callvoidfunc -> CALL ID neur24 . ( s ) neur26 ;

    (               shift and go to state 141


state 114

    (129) return -> RETURN ( expresion ) . ;

    ;               shift and go to state 142


state 115

    (115) while -> WHILE ( neur16 expresion . ) neur13 bloque ; neur17

    )               shift and go to state 143


state 116

    (92) factor -> varcte .

    *               reduce using rule 92 (factor -> varcte .)
    /               reduce using rule 92 (factor -> varcte .)
    +               reduce using rule 92 (factor -> varcte .)
    -               reduce using rule 92 (factor -> varcte .)
    EQ              reduce using rule 92 (factor -> varcte .)
    NOTEQ           reduce using rule 92 (factor -> varcte .)
    >               reduce using rule 92 (factor -> varcte .)
    <               reduce using rule 92 (factor -> varcte .)
    MTHANEQ         reduce using rule 92 (factor -> varcte .)
    LTHANEQ         reduce using rule 92 (factor -> varcte .)
    AND             reduce using rule 92 (factor -> varcte .)
    OR              reduce using rule 92 (factor -> varcte .)
    ;               reduce using rule 92 (factor -> varcte .)
    )               reduce using rule 92 (factor -> varcte .)
    ,               reduce using rule 92 (factor -> varcte .)
    ]               reduce using rule 92 (factor -> varcte .)


state 117

    (91) factor -> ( . neur6 expresion ) neur7
    (95) neur6 -> .

    NOT             reduce using rule 95 (neur6 -> .)
    -               reduce using rule 95 (neur6 -> .)
    (               reduce using rule 95 (neur6 -> .)
    ID              reduce using rule 95 (neur6 -> .)
    CTEE            reduce using rule 95 (neur6 -> .)
    CTEF            reduce using rule 95 (neur6 -> .)
    CTEBOOL         reduce using rule 95 (neur6 -> .)
    CTECHAR         reduce using rule 95 (neur6 -> .)
    CALL            reduce using rule 95 (neur6 -> .)

    neur6                          shift and go to state 144

state 118

    (101) varcte -> callreturnfunc .

    *               reduce using rule 101 (varcte -> callreturnfunc .)
    /               reduce using rule 101 (varcte -> callreturnfunc .)
    +               reduce using rule 101 (varcte -> callreturnfunc .)
    -               reduce using rule 101 (varcte -> callreturnfunc .)
    EQ              reduce using rule 101 (varcte -> callreturnfunc .)
    NOTEQ           reduce using rule 101 (varcte -> callreturnfunc .)
    >               reduce using rule 101 (varcte -> callreturnfunc .)
    <               reduce using rule 101 (varcte -> callreturnfunc .)
    MTHANEQ         reduce using rule 101 (varcte -> callreturnfunc .)
    LTHANEQ         reduce using rule 101 (varcte -> callreturnfunc .)
    AND             reduce using rule 101 (varcte -> callreturnfunc .)
    OR              reduce using rule 101 (varcte -> callreturnfunc .)
    ;               reduce using rule 101 (varcte -> callreturnfunc .)
    )               reduce using rule 101 (varcte -> callreturnfunc .)
    ,               reduce using rule 101 (varcte -> callreturnfunc .)
    ]               reduce using rule 101 (varcte -> callreturnfunc .)


state 119

    (84) termino -> meteneg factor . neur4 n
    (85) neur4 -> .

    *               reduce using rule 85 (neur4 -> .)
    /               reduce using rule 85 (neur4 -> .)
    +               reduce using rule 85 (neur4 -> .)
    -               reduce using rule 85 (neur4 -> .)
    EQ              reduce using rule 85 (neur4 -> .)
    NOTEQ           reduce using rule 85 (neur4 -> .)
    >               reduce using rule 85 (neur4 -> .)
    <               reduce using rule 85 (neur4 -> .)
    MTHANEQ         reduce using rule 85 (neur4 -> .)
    LTHANEQ         reduce using rule 85 (neur4 -> .)
    AND             reduce using rule 85 (neur4 -> .)
    OR              reduce using rule 85 (neur4 -> .)
    ;               reduce using rule 85 (neur4 -> .)
    )               reduce using rule 85 (neur4 -> .)
    ,               reduce using rule 85 (neur4 -> .)
    ]               reduce using rule 85 (neur4 -> .)

    neur4                          shift and go to state 145

state 120

    (120) callreturnfunc -> CALL . ID neur24 ( s ) neur26 ;

    ID              shift and go to state 146


state 121

    (102) varcte -> CTECHAR . neurCteCh
    (107) neurCteCh -> .

    *               reduce using rule 107 (neurCteCh -> .)
    /               reduce using rule 107 (neurCteCh -> .)
    +               reduce using rule 107 (neurCteCh -> .)
    -               reduce using rule 107 (neurCteCh -> .)
    EQ              reduce using rule 107 (neurCteCh -> .)
    NOTEQ           reduce using rule 107 (neurCteCh -> .)
    >               reduce using rule 107 (neurCteCh -> .)
    <               reduce using rule 107 (neurCteCh -> .)
    MTHANEQ         reduce using rule 107 (neurCteCh -> .)
    LTHANEQ         reduce using rule 107 (neurCteCh -> .)
    AND             reduce using rule 107 (neurCteCh -> .)
    OR              reduce using rule 107 (neurCteCh -> .)
    ;               reduce using rule 107 (neurCteCh -> .)
    )               reduce using rule 107 (neurCteCh -> .)
    ,               reduce using rule 107 (neurCteCh -> .)
    ]               reduce using rule 107 (neurCteCh -> .)

    neurCteCh                      shift and go to state 147

state 122

    (97) varcte -> ID . r neurVar
    (108) r -> . empty
    (109) r -> . oplista
    (136) empty -> .
    (110) oplista -> . accesoVarDim
    (111) oplista -> . length
    (112) accesoVarDim -> . [ neur27 nexp ]
    (114) length -> . . LENGTH ( )

    *               reduce using rule 136 (empty -> .)
    /               reduce using rule 136 (empty -> .)
    +               reduce using rule 136 (empty -> .)
    -               reduce using rule 136 (empty -> .)
    EQ              reduce using rule 136 (empty -> .)
    NOTEQ           reduce using rule 136 (empty -> .)
    >               reduce using rule 136 (empty -> .)
    <               reduce using rule 136 (empty -> .)
    MTHANEQ         reduce using rule 136 (empty -> .)
    LTHANEQ         reduce using rule 136 (empty -> .)
    AND             reduce using rule 136 (empty -> .)
    OR              reduce using rule 136 (empty -> .)
    ;               reduce using rule 136 (empty -> .)
    )               reduce using rule 136 (empty -> .)
    ,               reduce using rule 136 (empty -> .)
    ]               reduce using rule 136 (empty -> .)
    [               shift and go to state 90
    .               shift and go to state 150

    oplista                        shift and go to state 148
    accesoVarDim                   shift and go to state 149
    length                         shift and go to state 151
    r                              shift and go to state 152
    empty                          shift and go to state 153

state 123

    (100) varcte -> CTEBOOL . neurCteB
    (106) neurCteB -> .

    *               reduce using rule 106 (neurCteB -> .)
    /               reduce using rule 106 (neurCteB -> .)
    +               reduce using rule 106 (neurCteB -> .)
    -               reduce using rule 106 (neurCteB -> .)
    EQ              reduce using rule 106 (neurCteB -> .)
    NOTEQ           reduce using rule 106 (neurCteB -> .)
    >               reduce using rule 106 (neurCteB -> .)
    <               reduce using rule 106 (neurCteB -> .)
    MTHANEQ         reduce using rule 106 (neurCteB -> .)
    LTHANEQ         reduce using rule 106 (neurCteB -> .)
    AND             reduce using rule 106 (neurCteB -> .)
    OR              reduce using rule 106 (neurCteB -> .)
    ;               reduce using rule 106 (neurCteB -> .)
    )               reduce using rule 106 (neurCteB -> .)
    ,               reduce using rule 106 (neurCteB -> .)
    ]               reduce using rule 106 (neurCteB -> .)

    neurCteB                       shift and go to state 154

state 124

    (99) varcte -> CTEF . neurCteF
    (105) neurCteF -> .

    *               reduce using rule 105 (neurCteF -> .)
    /               reduce using rule 105 (neurCteF -> .)
    +               reduce using rule 105 (neurCteF -> .)
    -               reduce using rule 105 (neurCteF -> .)
    EQ              reduce using rule 105 (neurCteF -> .)
    NOTEQ           reduce using rule 105 (neurCteF -> .)
    >               reduce using rule 105 (neurCteF -> .)
    <               reduce using rule 105 (neurCteF -> .)
    MTHANEQ         reduce using rule 105 (neurCteF -> .)
    LTHANEQ         reduce using rule 105 (neurCteF -> .)
    AND             reduce using rule 105 (neurCteF -> .)
    OR              reduce using rule 105 (neurCteF -> .)
    ;               reduce using rule 105 (neurCteF -> .)
    )               reduce using rule 105 (neurCteF -> .)
    ,               reduce using rule 105 (neurCteF -> .)
    ]               reduce using rule 105 (neurCteF -> .)

    neurCteF                       shift and go to state 155

state 125

    (98) varcte -> CTEE . neurCteE
    (104) neurCteE -> .

    *               reduce using rule 104 (neurCteE -> .)
    /               reduce using rule 104 (neurCteE -> .)
    +               reduce using rule 104 (neurCteE -> .)
    -               reduce using rule 104 (neurCteE -> .)
    EQ              reduce using rule 104 (neurCteE -> .)
    NOTEQ           reduce using rule 104 (neurCteE -> .)
    >               reduce using rule 104 (neurCteE -> .)
    <               reduce using rule 104 (neurCteE -> .)
    MTHANEQ         reduce using rule 104 (neurCteE -> .)
    LTHANEQ         reduce using rule 104 (neurCteE -> .)
    AND             reduce using rule 104 (neurCteE -> .)
    OR              reduce using rule 104 (neurCteE -> .)
    ;               reduce using rule 104 (neurCteE -> .)
    )               reduce using rule 104 (neurCteE -> .)
    ,               reduce using rule 104 (neurCteE -> .)
    ]               reduce using rule 104 (neurCteE -> .)

    neurCteE                       shift and go to state 156

state 126

    (69) p -> MTHANEQ . neur11_5 nexp
    (75) neur11_5 -> .

    -               reduce using rule 75 (neur11_5 -> .)
    (               reduce using rule 75 (neur11_5 -> .)
    ID              reduce using rule 75 (neur11_5 -> .)
    CTEE            reduce using rule 75 (neur11_5 -> .)
    CTEF            reduce using rule 75 (neur11_5 -> .)
    CTEBOOL         reduce using rule 75 (neur11_5 -> .)
    CTECHAR         reduce using rule 75 (neur11_5 -> .)
    CALL            reduce using rule 75 (neur11_5 -> .)

    neur11_5                       shift and go to state 157

state 127

    (62) exp -> nexp p . neur12
    (63) neur12 -> .

    AND             reduce using rule 63 (neur12 -> .)
    OR              reduce using rule 63 (neur12 -> .)
    ;               reduce using rule 63 (neur12 -> .)
    )               reduce using rule 63 (neur12 -> .)
    ,               reduce using rule 63 (neur12 -> .)

    neur12                         shift and go to state 158

state 128

    (70) p -> LTHANEQ . neur11_6 nexp
    (76) neur11_6 -> .

    -               reduce using rule 76 (neur11_6 -> .)
    (               reduce using rule 76 (neur11_6 -> .)
    ID              reduce using rule 76 (neur11_6 -> .)
    CTEE            reduce using rule 76 (neur11_6 -> .)
    CTEF            reduce using rule 76 (neur11_6 -> .)
    CTEBOOL         reduce using rule 76 (neur11_6 -> .)
    CTECHAR         reduce using rule 76 (neur11_6 -> .)
    CALL            reduce using rule 76 (neur11_6 -> .)

    neur11_6                       shift and go to state 159

state 129

    (66) p -> NOTEQ . neur11_2 nexp
    (72) neur11_2 -> .

    -               reduce using rule 72 (neur11_2 -> .)
    (               reduce using rule 72 (neur11_2 -> .)
    ID              reduce using rule 72 (neur11_2 -> .)
    CTEE            reduce using rule 72 (neur11_2 -> .)
    CTEF            reduce using rule 72 (neur11_2 -> .)
    CTEBOOL         reduce using rule 72 (neur11_2 -> .)
    CTECHAR         reduce using rule 72 (neur11_2 -> .)
    CALL            reduce using rule 72 (neur11_2 -> .)

    neur11_2                       shift and go to state 160

state 130

    (65) p -> EQ . neur11_1 nexp
    (71) neur11_1 -> .

    -               reduce using rule 71 (neur11_1 -> .)
    (               reduce using rule 71 (neur11_1 -> .)
    ID              reduce using rule 71 (neur11_1 -> .)
    CTEE            reduce using rule 71 (neur11_1 -> .)
    CTEF            reduce using rule 71 (neur11_1 -> .)
    CTEBOOL         reduce using rule 71 (neur11_1 -> .)
    CTECHAR         reduce using rule 71 (neur11_1 -> .)
    CALL            reduce using rule 71 (neur11_1 -> .)

    neur11_1                       shift and go to state 161

state 131

    (68) p -> < . neur11_4 nexp
    (74) neur11_4 -> .

    -               reduce using rule 74 (neur11_4 -> .)
    (               reduce using rule 74 (neur11_4 -> .)
    ID              reduce using rule 74 (neur11_4 -> .)
    CTEE            reduce using rule 74 (neur11_4 -> .)
    CTEF            reduce using rule 74 (neur11_4 -> .)
    CTEBOOL         reduce using rule 74 (neur11_4 -> .)
    CTECHAR         reduce using rule 74 (neur11_4 -> .)
    CALL            reduce using rule 74 (neur11_4 -> .)

    neur11_4                       shift and go to state 162

state 132

    (64) p -> empty .

    AND             reduce using rule 64 (p -> empty .)
    OR              reduce using rule 64 (p -> empty .)
    ;               reduce using rule 64 (p -> empty .)
    )               reduce using rule 64 (p -> empty .)
    ,               reduce using rule 64 (p -> empty .)


state 133

    (67) p -> > . neur11_3 nexp
    (73) neur11_3 -> .

    -               reduce using rule 73 (neur11_3 -> .)
    (               reduce using rule 73 (neur11_3 -> .)
    ID              reduce using rule 73 (neur11_3 -> .)
    CTEE            reduce using rule 73 (neur11_3 -> .)
    CTEF            reduce using rule 73 (neur11_3 -> .)
    CTEBOOL         reduce using rule 73 (neur11_3 -> .)
    CTECHAR         reduce using rule 73 (neur11_3 -> .)
    CALL            reduce using rule 73 (neur11_3 -> .)

    neur11_3                       shift and go to state 163

state 134

    (77) nexp -> termino neur5 . q
    (79) q -> . empty
    (80) q -> . + neur3_1 nexp
    (81) q -> . - neur3_2 nexp
    (136) empty -> .

    +               shift and go to state 164
    -               shift and go to state 165
    EQ              reduce using rule 136 (empty -> .)
    NOTEQ           reduce using rule 136 (empty -> .)
    >               reduce using rule 136 (empty -> .)
    <               reduce using rule 136 (empty -> .)
    MTHANEQ         reduce using rule 136 (empty -> .)
    LTHANEQ         reduce using rule 136 (empty -> .)
    AND             reduce using rule 136 (empty -> .)
    OR              reduce using rule 136 (empty -> .)
    ;               reduce using rule 136 (empty -> .)
    )               reduce using rule 136 (empty -> .)
    ,               reduce using rule 136 (empty -> .)
    ]               reduce using rule 136 (empty -> .)

    q                              shift and go to state 166
    empty                          shift and go to state 167

state 135

    (55) subexpresion -> exp neur10 . o
    (57) o -> . empty
    (58) o -> . AND neur9_1 subexpresion
    (59) o -> . OR neur9_2 subexpresion
    (136) empty -> .

    AND             shift and go to state 168
    OR              shift and go to state 170
    ;               reduce using rule 136 (empty -> .)
    )               reduce using rule 136 (empty -> .)
    ,               reduce using rule 136 (empty -> .)

    o                              shift and go to state 169
    empty                          shift and go to state 171

state 136

    (118) play -> PLAY ( NOTA , . CTEE ) ;

    CTEE            shift and go to state 172


state 137

    (47) for -> FOR ( asignacion neur18 . expresion ; neur19 asignacion ) neur21 bloque ; neur20
    (52) expresion -> . m subexpresion
    (53) m -> . empty
    (54) m -> . NOT m
    (136) empty -> .

    NOT             shift and go to state 83
    -               reduce using rule 136 (empty -> .)
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    expresion                      shift and go to state 173
    m                              shift and go to state 82
    empty                          shift and go to state 84

state 138

    (37) asignacion -> ID asiglista = neur8 . expresion ;
    (52) expresion -> . m subexpresion
    (53) m -> . empty
    (54) m -> . NOT m
    (136) empty -> .

    NOT             shift and go to state 83
    -               reduce using rule 136 (empty -> .)
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    expresion                      shift and go to state 174
    m                              shift and go to state 82
    empty                          shift and go to state 84

state 139

    (112) accesoVarDim -> [ neur27 nexp . ]

    ]               shift and go to state 175


state 140

    (41) if -> IF ( expresion ) . neur13 bloque l ; neur15
    (42) neur13 -> .

    {               reduce using rule 42 (neur13 -> .)

    neur13                         shift and go to state 176

state 141

    (126) callvoidfunc -> CALL ID neur24 ( . s ) neur26 ;
    (121) s -> . empty
    (122) s -> . expresion neur25 t
    (136) empty -> .
    (52) expresion -> . m subexpresion
    (53) m -> . empty
    (54) m -> . NOT m

    )               reduce using rule 136 (empty -> .)
    -               reduce using rule 136 (empty -> .)
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)
    NOT             shift and go to state 83

    expresion                      shift and go to state 177
    m                              shift and go to state 82
    s                              shift and go to state 178
    empty                          shift and go to state 179

state 142

    (129) return -> RETURN ( expresion ) ; .

    ID              reduce using rule 129 (return -> RETURN ( expresion ) ; .)
    IF              reduce using rule 129 (return -> RETURN ( expresion ) ; .)
    FOR             reduce using rule 129 (return -> RETURN ( expresion ) ; .)
    RETURN          reduce using rule 129 (return -> RETURN ( expresion ) ; .)
    WHILE           reduce using rule 129 (return -> RETURN ( expresion ) ; .)
    PLAY            reduce using rule 129 (return -> RETURN ( expresion ) ; .)
    PRINT           reduce using rule 129 (return -> RETURN ( expresion ) ; .)
    CALL            reduce using rule 129 (return -> RETURN ( expresion ) ; .)
    }               reduce using rule 129 (return -> RETURN ( expresion ) ; .)


state 143

    (115) while -> WHILE ( neur16 expresion ) . neur13 bloque ; neur17
    (42) neur13 -> .

    {               reduce using rule 42 (neur13 -> .)

    neur13                         shift and go to state 180

state 144

    (91) factor -> ( neur6 . expresion ) neur7
    (52) expresion -> . m subexpresion
    (53) m -> . empty
    (54) m -> . NOT m
    (136) empty -> .

    NOT             shift and go to state 83
    -               reduce using rule 136 (empty -> .)
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    expresion                      shift and go to state 181
    m                              shift and go to state 82
    empty                          shift and go to state 84

state 145

    (84) termino -> meteneg factor neur4 . n
    (86) n -> . empty
    (87) n -> . * neur2_1 termino
    (88) n -> . / neur2_2 termino
    (136) empty -> .

    *               shift and go to state 182
    /               shift and go to state 183
    +               reduce using rule 136 (empty -> .)
    -               reduce using rule 136 (empty -> .)
    EQ              reduce using rule 136 (empty -> .)
    NOTEQ           reduce using rule 136 (empty -> .)
    >               reduce using rule 136 (empty -> .)
    <               reduce using rule 136 (empty -> .)
    MTHANEQ         reduce using rule 136 (empty -> .)
    LTHANEQ         reduce using rule 136 (empty -> .)
    AND             reduce using rule 136 (empty -> .)
    OR              reduce using rule 136 (empty -> .)
    ;               reduce using rule 136 (empty -> .)
    )               reduce using rule 136 (empty -> .)
    ,               reduce using rule 136 (empty -> .)
    ]               reduce using rule 136 (empty -> .)

    n                              shift and go to state 184
    empty                          shift and go to state 185

state 146

    (120) callreturnfunc -> CALL ID . neur24 ( s ) neur26 ;
    (127) neur24 -> .

    (               reduce using rule 127 (neur24 -> .)

    neur24                         shift and go to state 186

state 147

    (102) varcte -> CTECHAR neurCteCh .

    *               reduce using rule 102 (varcte -> CTECHAR neurCteCh .)
    /               reduce using rule 102 (varcte -> CTECHAR neurCteCh .)
    +               reduce using rule 102 (varcte -> CTECHAR neurCteCh .)
    -               reduce using rule 102 (varcte -> CTECHAR neurCteCh .)
    EQ              reduce using rule 102 (varcte -> CTECHAR neurCteCh .)
    NOTEQ           reduce using rule 102 (varcte -> CTECHAR neurCteCh .)
    >               reduce using rule 102 (varcte -> CTECHAR neurCteCh .)
    <               reduce using rule 102 (varcte -> CTECHAR neurCteCh .)
    MTHANEQ         reduce using rule 102 (varcte -> CTECHAR neurCteCh .)
    LTHANEQ         reduce using rule 102 (varcte -> CTECHAR neurCteCh .)
    AND             reduce using rule 102 (varcte -> CTECHAR neurCteCh .)
    OR              reduce using rule 102 (varcte -> CTECHAR neurCteCh .)
    ;               reduce using rule 102 (varcte -> CTECHAR neurCteCh .)
    )               reduce using rule 102 (varcte -> CTECHAR neurCteCh .)
    ,               reduce using rule 102 (varcte -> CTECHAR neurCteCh .)
    ]               reduce using rule 102 (varcte -> CTECHAR neurCteCh .)


state 148

    (109) r -> oplista .

    *               reduce using rule 109 (r -> oplista .)
    /               reduce using rule 109 (r -> oplista .)
    +               reduce using rule 109 (r -> oplista .)
    -               reduce using rule 109 (r -> oplista .)
    EQ              reduce using rule 109 (r -> oplista .)
    NOTEQ           reduce using rule 109 (r -> oplista .)
    >               reduce using rule 109 (r -> oplista .)
    <               reduce using rule 109 (r -> oplista .)
    MTHANEQ         reduce using rule 109 (r -> oplista .)
    LTHANEQ         reduce using rule 109 (r -> oplista .)
    AND             reduce using rule 109 (r -> oplista .)
    OR              reduce using rule 109 (r -> oplista .)
    ;               reduce using rule 109 (r -> oplista .)
    )               reduce using rule 109 (r -> oplista .)
    ,               reduce using rule 109 (r -> oplista .)
    ]               reduce using rule 109 (r -> oplista .)


state 149

    (110) oplista -> accesoVarDim .

    *               reduce using rule 110 (oplista -> accesoVarDim .)
    /               reduce using rule 110 (oplista -> accesoVarDim .)
    +               reduce using rule 110 (oplista -> accesoVarDim .)
    -               reduce using rule 110 (oplista -> accesoVarDim .)
    EQ              reduce using rule 110 (oplista -> accesoVarDim .)
    NOTEQ           reduce using rule 110 (oplista -> accesoVarDim .)
    >               reduce using rule 110 (oplista -> accesoVarDim .)
    <               reduce using rule 110 (oplista -> accesoVarDim .)
    MTHANEQ         reduce using rule 110 (oplista -> accesoVarDim .)
    LTHANEQ         reduce using rule 110 (oplista -> accesoVarDim .)
    AND             reduce using rule 110 (oplista -> accesoVarDim .)
    OR              reduce using rule 110 (oplista -> accesoVarDim .)
    ;               reduce using rule 110 (oplista -> accesoVarDim .)
    )               reduce using rule 110 (oplista -> accesoVarDim .)
    ,               reduce using rule 110 (oplista -> accesoVarDim .)
    ]               reduce using rule 110 (oplista -> accesoVarDim .)


state 150

    (114) length -> . . LENGTH ( )

    LENGTH          shift and go to state 187


state 151

    (111) oplista -> length .

    *               reduce using rule 111 (oplista -> length .)
    /               reduce using rule 111 (oplista -> length .)
    +               reduce using rule 111 (oplista -> length .)
    -               reduce using rule 111 (oplista -> length .)
    EQ              reduce using rule 111 (oplista -> length .)
    NOTEQ           reduce using rule 111 (oplista -> length .)
    >               reduce using rule 111 (oplista -> length .)
    <               reduce using rule 111 (oplista -> length .)
    MTHANEQ         reduce using rule 111 (oplista -> length .)
    LTHANEQ         reduce using rule 111 (oplista -> length .)
    AND             reduce using rule 111 (oplista -> length .)
    OR              reduce using rule 111 (oplista -> length .)
    ;               reduce using rule 111 (oplista -> length .)
    )               reduce using rule 111 (oplista -> length .)
    ,               reduce using rule 111 (oplista -> length .)
    ]               reduce using rule 111 (oplista -> length .)


state 152

    (97) varcte -> ID r . neurVar
    (103) neurVar -> .

    *               reduce using rule 103 (neurVar -> .)
    /               reduce using rule 103 (neurVar -> .)
    +               reduce using rule 103 (neurVar -> .)
    -               reduce using rule 103 (neurVar -> .)
    EQ              reduce using rule 103 (neurVar -> .)
    NOTEQ           reduce using rule 103 (neurVar -> .)
    >               reduce using rule 103 (neurVar -> .)
    <               reduce using rule 103 (neurVar -> .)
    MTHANEQ         reduce using rule 103 (neurVar -> .)
    LTHANEQ         reduce using rule 103 (neurVar -> .)
    AND             reduce using rule 103 (neurVar -> .)
    OR              reduce using rule 103 (neurVar -> .)
    ;               reduce using rule 103 (neurVar -> .)
    )               reduce using rule 103 (neurVar -> .)
    ,               reduce using rule 103 (neurVar -> .)
    ]               reduce using rule 103 (neurVar -> .)

    neurVar                        shift and go to state 188

state 153

    (108) r -> empty .

    *               reduce using rule 108 (r -> empty .)
    /               reduce using rule 108 (r -> empty .)
    +               reduce using rule 108 (r -> empty .)
    -               reduce using rule 108 (r -> empty .)
    EQ              reduce using rule 108 (r -> empty .)
    NOTEQ           reduce using rule 108 (r -> empty .)
    >               reduce using rule 108 (r -> empty .)
    <               reduce using rule 108 (r -> empty .)
    MTHANEQ         reduce using rule 108 (r -> empty .)
    LTHANEQ         reduce using rule 108 (r -> empty .)
    AND             reduce using rule 108 (r -> empty .)
    OR              reduce using rule 108 (r -> empty .)
    ;               reduce using rule 108 (r -> empty .)
    )               reduce using rule 108 (r -> empty .)
    ,               reduce using rule 108 (r -> empty .)
    ]               reduce using rule 108 (r -> empty .)


state 154

    (100) varcte -> CTEBOOL neurCteB .

    *               reduce using rule 100 (varcte -> CTEBOOL neurCteB .)
    /               reduce using rule 100 (varcte -> CTEBOOL neurCteB .)
    +               reduce using rule 100 (varcte -> CTEBOOL neurCteB .)
    -               reduce using rule 100 (varcte -> CTEBOOL neurCteB .)
    EQ              reduce using rule 100 (varcte -> CTEBOOL neurCteB .)
    NOTEQ           reduce using rule 100 (varcte -> CTEBOOL neurCteB .)
    >               reduce using rule 100 (varcte -> CTEBOOL neurCteB .)
    <               reduce using rule 100 (varcte -> CTEBOOL neurCteB .)
    MTHANEQ         reduce using rule 100 (varcte -> CTEBOOL neurCteB .)
    LTHANEQ         reduce using rule 100 (varcte -> CTEBOOL neurCteB .)
    AND             reduce using rule 100 (varcte -> CTEBOOL neurCteB .)
    OR              reduce using rule 100 (varcte -> CTEBOOL neurCteB .)
    ;               reduce using rule 100 (varcte -> CTEBOOL neurCteB .)
    )               reduce using rule 100 (varcte -> CTEBOOL neurCteB .)
    ,               reduce using rule 100 (varcte -> CTEBOOL neurCteB .)
    ]               reduce using rule 100 (varcte -> CTEBOOL neurCteB .)


state 155

    (99) varcte -> CTEF neurCteF .

    *               reduce using rule 99 (varcte -> CTEF neurCteF .)
    /               reduce using rule 99 (varcte -> CTEF neurCteF .)
    +               reduce using rule 99 (varcte -> CTEF neurCteF .)
    -               reduce using rule 99 (varcte -> CTEF neurCteF .)
    EQ              reduce using rule 99 (varcte -> CTEF neurCteF .)
    NOTEQ           reduce using rule 99 (varcte -> CTEF neurCteF .)
    >               reduce using rule 99 (varcte -> CTEF neurCteF .)
    <               reduce using rule 99 (varcte -> CTEF neurCteF .)
    MTHANEQ         reduce using rule 99 (varcte -> CTEF neurCteF .)
    LTHANEQ         reduce using rule 99 (varcte -> CTEF neurCteF .)
    AND             reduce using rule 99 (varcte -> CTEF neurCteF .)
    OR              reduce using rule 99 (varcte -> CTEF neurCteF .)
    ;               reduce using rule 99 (varcte -> CTEF neurCteF .)
    )               reduce using rule 99 (varcte -> CTEF neurCteF .)
    ,               reduce using rule 99 (varcte -> CTEF neurCteF .)
    ]               reduce using rule 99 (varcte -> CTEF neurCteF .)


state 156

    (98) varcte -> CTEE neurCteE .

    *               reduce using rule 98 (varcte -> CTEE neurCteE .)
    /               reduce using rule 98 (varcte -> CTEE neurCteE .)
    +               reduce using rule 98 (varcte -> CTEE neurCteE .)
    -               reduce using rule 98 (varcte -> CTEE neurCteE .)
    EQ              reduce using rule 98 (varcte -> CTEE neurCteE .)
    NOTEQ           reduce using rule 98 (varcte -> CTEE neurCteE .)
    >               reduce using rule 98 (varcte -> CTEE neurCteE .)
    <               reduce using rule 98 (varcte -> CTEE neurCteE .)
    MTHANEQ         reduce using rule 98 (varcte -> CTEE neurCteE .)
    LTHANEQ         reduce using rule 98 (varcte -> CTEE neurCteE .)
    AND             reduce using rule 98 (varcte -> CTEE neurCteE .)
    OR              reduce using rule 98 (varcte -> CTEE neurCteE .)
    ;               reduce using rule 98 (varcte -> CTEE neurCteE .)
    )               reduce using rule 98 (varcte -> CTEE neurCteE .)
    ,               reduce using rule 98 (varcte -> CTEE neurCteE .)
    ]               reduce using rule 98 (varcte -> CTEE neurCteE .)


state 157

    (69) p -> MTHANEQ neur11_5 . nexp
    (77) nexp -> . termino neur5 q
    (84) termino -> . meteneg factor neur4 n
    (93) meteneg -> . empty
    (94) meteneg -> . -
    (136) empty -> .

    -               shift and go to state 101
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    meteneg                        shift and go to state 100
    nexp                           shift and go to state 189
    empty                          shift and go to state 104
    termino                        shift and go to state 105

state 158

    (62) exp -> nexp p neur12 .

    AND             reduce using rule 62 (exp -> nexp p neur12 .)
    OR              reduce using rule 62 (exp -> nexp p neur12 .)
    ;               reduce using rule 62 (exp -> nexp p neur12 .)
    )               reduce using rule 62 (exp -> nexp p neur12 .)
    ,               reduce using rule 62 (exp -> nexp p neur12 .)


state 159

    (70) p -> LTHANEQ neur11_6 . nexp
    (77) nexp -> . termino neur5 q
    (84) termino -> . meteneg factor neur4 n
    (93) meteneg -> . empty
    (94) meteneg -> . -
    (136) empty -> .

    -               shift and go to state 101
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    meteneg                        shift and go to state 100
    nexp                           shift and go to state 190
    empty                          shift and go to state 104
    termino                        shift and go to state 105

state 160

    (66) p -> NOTEQ neur11_2 . nexp
    (77) nexp -> . termino neur5 q
    (84) termino -> . meteneg factor neur4 n
    (93) meteneg -> . empty
    (94) meteneg -> . -
    (136) empty -> .

    -               shift and go to state 101
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    meteneg                        shift and go to state 100
    nexp                           shift and go to state 191
    empty                          shift and go to state 104
    termino                        shift and go to state 105

state 161

    (65) p -> EQ neur11_1 . nexp
    (77) nexp -> . termino neur5 q
    (84) termino -> . meteneg factor neur4 n
    (93) meteneg -> . empty
    (94) meteneg -> . -
    (136) empty -> .

    -               shift and go to state 101
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    meteneg                        shift and go to state 100
    nexp                           shift and go to state 192
    empty                          shift and go to state 104
    termino                        shift and go to state 105

state 162

    (68) p -> < neur11_4 . nexp
    (77) nexp -> . termino neur5 q
    (84) termino -> . meteneg factor neur4 n
    (93) meteneg -> . empty
    (94) meteneg -> . -
    (136) empty -> .

    -               shift and go to state 101
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    meteneg                        shift and go to state 100
    nexp                           shift and go to state 193
    empty                          shift and go to state 104
    termino                        shift and go to state 105

state 163

    (67) p -> > neur11_3 . nexp
    (77) nexp -> . termino neur5 q
    (84) termino -> . meteneg factor neur4 n
    (93) meteneg -> . empty
    (94) meteneg -> . -
    (136) empty -> .

    -               shift and go to state 101
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    meteneg                        shift and go to state 100
    nexp                           shift and go to state 194
    empty                          shift and go to state 104
    termino                        shift and go to state 105

state 164

    (80) q -> + . neur3_1 nexp
    (82) neur3_1 -> .

    -               reduce using rule 82 (neur3_1 -> .)
    (               reduce using rule 82 (neur3_1 -> .)
    ID              reduce using rule 82 (neur3_1 -> .)
    CTEE            reduce using rule 82 (neur3_1 -> .)
    CTEF            reduce using rule 82 (neur3_1 -> .)
    CTEBOOL         reduce using rule 82 (neur3_1 -> .)
    CTECHAR         reduce using rule 82 (neur3_1 -> .)
    CALL            reduce using rule 82 (neur3_1 -> .)

    neur3_1                        shift and go to state 195

state 165

    (81) q -> - . neur3_2 nexp
    (83) neur3_2 -> .

    -               reduce using rule 83 (neur3_2 -> .)
    (               reduce using rule 83 (neur3_2 -> .)
    ID              reduce using rule 83 (neur3_2 -> .)
    CTEE            reduce using rule 83 (neur3_2 -> .)
    CTEF            reduce using rule 83 (neur3_2 -> .)
    CTEBOOL         reduce using rule 83 (neur3_2 -> .)
    CTECHAR         reduce using rule 83 (neur3_2 -> .)
    CALL            reduce using rule 83 (neur3_2 -> .)

    neur3_2                        shift and go to state 196

state 166

    (77) nexp -> termino neur5 q .

    EQ              reduce using rule 77 (nexp -> termino neur5 q .)
    NOTEQ           reduce using rule 77 (nexp -> termino neur5 q .)
    >               reduce using rule 77 (nexp -> termino neur5 q .)
    <               reduce using rule 77 (nexp -> termino neur5 q .)
    MTHANEQ         reduce using rule 77 (nexp -> termino neur5 q .)
    LTHANEQ         reduce using rule 77 (nexp -> termino neur5 q .)
    AND             reduce using rule 77 (nexp -> termino neur5 q .)
    OR              reduce using rule 77 (nexp -> termino neur5 q .)
    ;               reduce using rule 77 (nexp -> termino neur5 q .)
    )               reduce using rule 77 (nexp -> termino neur5 q .)
    ,               reduce using rule 77 (nexp -> termino neur5 q .)
    ]               reduce using rule 77 (nexp -> termino neur5 q .)


state 167

    (79) q -> empty .

    EQ              reduce using rule 79 (q -> empty .)
    NOTEQ           reduce using rule 79 (q -> empty .)
    >               reduce using rule 79 (q -> empty .)
    <               reduce using rule 79 (q -> empty .)
    MTHANEQ         reduce using rule 79 (q -> empty .)
    LTHANEQ         reduce using rule 79 (q -> empty .)
    AND             reduce using rule 79 (q -> empty .)
    OR              reduce using rule 79 (q -> empty .)
    ;               reduce using rule 79 (q -> empty .)
    )               reduce using rule 79 (q -> empty .)
    ,               reduce using rule 79 (q -> empty .)
    ]               reduce using rule 79 (q -> empty .)


state 168

    (58) o -> AND . neur9_1 subexpresion
    (60) neur9_1 -> .

    -               reduce using rule 60 (neur9_1 -> .)
    (               reduce using rule 60 (neur9_1 -> .)
    ID              reduce using rule 60 (neur9_1 -> .)
    CTEE            reduce using rule 60 (neur9_1 -> .)
    CTEF            reduce using rule 60 (neur9_1 -> .)
    CTEBOOL         reduce using rule 60 (neur9_1 -> .)
    CTECHAR         reduce using rule 60 (neur9_1 -> .)
    CALL            reduce using rule 60 (neur9_1 -> .)

    neur9_1                        shift and go to state 197

state 169

    (55) subexpresion -> exp neur10 o .

    ;               reduce using rule 55 (subexpresion -> exp neur10 o .)
    )               reduce using rule 55 (subexpresion -> exp neur10 o .)
    ,               reduce using rule 55 (subexpresion -> exp neur10 o .)


state 170

    (59) o -> OR . neur9_2 subexpresion
    (61) neur9_2 -> .

    -               reduce using rule 61 (neur9_2 -> .)
    (               reduce using rule 61 (neur9_2 -> .)
    ID              reduce using rule 61 (neur9_2 -> .)
    CTEE            reduce using rule 61 (neur9_2 -> .)
    CTEF            reduce using rule 61 (neur9_2 -> .)
    CTEBOOL         reduce using rule 61 (neur9_2 -> .)
    CTECHAR         reduce using rule 61 (neur9_2 -> .)
    CALL            reduce using rule 61 (neur9_2 -> .)

    neur9_2                        shift and go to state 198

state 171

    (57) o -> empty .

    ;               reduce using rule 57 (o -> empty .)
    )               reduce using rule 57 (o -> empty .)
    ,               reduce using rule 57 (o -> empty .)


state 172

    (118) play -> PLAY ( NOTA , CTEE . ) ;

    )               shift and go to state 199


state 173

    (47) for -> FOR ( asignacion neur18 expresion . ; neur19 asignacion ) neur21 bloque ; neur20

    ;               shift and go to state 200


state 174

    (37) asignacion -> ID asiglista = neur8 expresion . ;

    ;               shift and go to state 201


state 175

    (112) accesoVarDim -> [ neur27 nexp ] .

    =               reduce using rule 112 (accesoVarDim -> [ neur27 nexp ] .)
    *               reduce using rule 112 (accesoVarDim -> [ neur27 nexp ] .)
    /               reduce using rule 112 (accesoVarDim -> [ neur27 nexp ] .)
    +               reduce using rule 112 (accesoVarDim -> [ neur27 nexp ] .)
    -               reduce using rule 112 (accesoVarDim -> [ neur27 nexp ] .)
    EQ              reduce using rule 112 (accesoVarDim -> [ neur27 nexp ] .)
    NOTEQ           reduce using rule 112 (accesoVarDim -> [ neur27 nexp ] .)
    >               reduce using rule 112 (accesoVarDim -> [ neur27 nexp ] .)
    <               reduce using rule 112 (accesoVarDim -> [ neur27 nexp ] .)
    MTHANEQ         reduce using rule 112 (accesoVarDim -> [ neur27 nexp ] .)
    LTHANEQ         reduce using rule 112 (accesoVarDim -> [ neur27 nexp ] .)
    AND             reduce using rule 112 (accesoVarDim -> [ neur27 nexp ] .)
    OR              reduce using rule 112 (accesoVarDim -> [ neur27 nexp ] .)
    ;               reduce using rule 112 (accesoVarDim -> [ neur27 nexp ] .)
    )               reduce using rule 112 (accesoVarDim -> [ neur27 nexp ] .)
    ,               reduce using rule 112 (accesoVarDim -> [ neur27 nexp ] .)
    ]               reduce using rule 112 (accesoVarDim -> [ neur27 nexp ] .)


state 176

    (41) if -> IF ( expresion ) neur13 . bloque l ; neur15
    (26) bloque -> . { i }

    {               shift and go to state 52

    bloque                         shift and go to state 202

state 177

    (122) s -> expresion . neur25 t
    (123) neur25 -> .

    ,               reduce using rule 123 (neur25 -> .)
    )               reduce using rule 123 (neur25 -> .)

    neur25                         shift and go to state 203

state 178

    (126) callvoidfunc -> CALL ID neur24 ( s . ) neur26 ;

    )               shift and go to state 204


state 179

    (121) s -> empty .
    (53) m -> empty .

    )               reduce using rule 121 (s -> empty .)
    -               reduce using rule 53 (m -> empty .)
    (               reduce using rule 53 (m -> empty .)
    ID              reduce using rule 53 (m -> empty .)
    CTEE            reduce using rule 53 (m -> empty .)
    CTEF            reduce using rule 53 (m -> empty .)
    CTEBOOL         reduce using rule 53 (m -> empty .)
    CTECHAR         reduce using rule 53 (m -> empty .)
    CALL            reduce using rule 53 (m -> empty .)


state 180

    (115) while -> WHILE ( neur16 expresion ) neur13 . bloque ; neur17
    (26) bloque -> . { i }

    {               shift and go to state 52

    bloque                         shift and go to state 205

state 181

    (91) factor -> ( neur6 expresion . ) neur7

    )               shift and go to state 206


state 182

    (87) n -> * . neur2_1 termino
    (89) neur2_1 -> .

    -               reduce using rule 89 (neur2_1 -> .)
    (               reduce using rule 89 (neur2_1 -> .)
    ID              reduce using rule 89 (neur2_1 -> .)
    CTEE            reduce using rule 89 (neur2_1 -> .)
    CTEF            reduce using rule 89 (neur2_1 -> .)
    CTEBOOL         reduce using rule 89 (neur2_1 -> .)
    CTECHAR         reduce using rule 89 (neur2_1 -> .)
    CALL            reduce using rule 89 (neur2_1 -> .)

    neur2_1                        shift and go to state 207

state 183

    (88) n -> / . neur2_2 termino
    (90) neur2_2 -> .

    -               reduce using rule 90 (neur2_2 -> .)
    (               reduce using rule 90 (neur2_2 -> .)
    ID              reduce using rule 90 (neur2_2 -> .)
    CTEE            reduce using rule 90 (neur2_2 -> .)
    CTEF            reduce using rule 90 (neur2_2 -> .)
    CTEBOOL         reduce using rule 90 (neur2_2 -> .)
    CTECHAR         reduce using rule 90 (neur2_2 -> .)
    CALL            reduce using rule 90 (neur2_2 -> .)

    neur2_2                        shift and go to state 208

state 184

    (84) termino -> meteneg factor neur4 n .

    +               reduce using rule 84 (termino -> meteneg factor neur4 n .)
    -               reduce using rule 84 (termino -> meteneg factor neur4 n .)
    EQ              reduce using rule 84 (termino -> meteneg factor neur4 n .)
    NOTEQ           reduce using rule 84 (termino -> meteneg factor neur4 n .)
    >               reduce using rule 84 (termino -> meteneg factor neur4 n .)
    <               reduce using rule 84 (termino -> meteneg factor neur4 n .)
    MTHANEQ         reduce using rule 84 (termino -> meteneg factor neur4 n .)
    LTHANEQ         reduce using rule 84 (termino -> meteneg factor neur4 n .)
    AND             reduce using rule 84 (termino -> meteneg factor neur4 n .)
    OR              reduce using rule 84 (termino -> meteneg factor neur4 n .)
    ;               reduce using rule 84 (termino -> meteneg factor neur4 n .)
    )               reduce using rule 84 (termino -> meteneg factor neur4 n .)
    ,               reduce using rule 84 (termino -> meteneg factor neur4 n .)
    ]               reduce using rule 84 (termino -> meteneg factor neur4 n .)


state 185

    (86) n -> empty .

    +               reduce using rule 86 (n -> empty .)
    -               reduce using rule 86 (n -> empty .)
    EQ              reduce using rule 86 (n -> empty .)
    NOTEQ           reduce using rule 86 (n -> empty .)
    >               reduce using rule 86 (n -> empty .)
    <               reduce using rule 86 (n -> empty .)
    MTHANEQ         reduce using rule 86 (n -> empty .)
    LTHANEQ         reduce using rule 86 (n -> empty .)
    AND             reduce using rule 86 (n -> empty .)
    OR              reduce using rule 86 (n -> empty .)
    ;               reduce using rule 86 (n -> empty .)
    )               reduce using rule 86 (n -> empty .)
    ,               reduce using rule 86 (n -> empty .)
    ]               reduce using rule 86 (n -> empty .)


state 186

    (120) callreturnfunc -> CALL ID neur24 . ( s ) neur26 ;

    (               shift and go to state 209


state 187

    (114) length -> . LENGTH . ( )

    (               shift and go to state 210


state 188

    (97) varcte -> ID r neurVar .

    *               reduce using rule 97 (varcte -> ID r neurVar .)
    /               reduce using rule 97 (varcte -> ID r neurVar .)
    +               reduce using rule 97 (varcte -> ID r neurVar .)
    -               reduce using rule 97 (varcte -> ID r neurVar .)
    EQ              reduce using rule 97 (varcte -> ID r neurVar .)
    NOTEQ           reduce using rule 97 (varcte -> ID r neurVar .)
    >               reduce using rule 97 (varcte -> ID r neurVar .)
    <               reduce using rule 97 (varcte -> ID r neurVar .)
    MTHANEQ         reduce using rule 97 (varcte -> ID r neurVar .)
    LTHANEQ         reduce using rule 97 (varcte -> ID r neurVar .)
    AND             reduce using rule 97 (varcte -> ID r neurVar .)
    OR              reduce using rule 97 (varcte -> ID r neurVar .)
    ;               reduce using rule 97 (varcte -> ID r neurVar .)
    )               reduce using rule 97 (varcte -> ID r neurVar .)
    ,               reduce using rule 97 (varcte -> ID r neurVar .)
    ]               reduce using rule 97 (varcte -> ID r neurVar .)


state 189

    (69) p -> MTHANEQ neur11_5 nexp .

    AND             reduce using rule 69 (p -> MTHANEQ neur11_5 nexp .)
    OR              reduce using rule 69 (p -> MTHANEQ neur11_5 nexp .)
    ;               reduce using rule 69 (p -> MTHANEQ neur11_5 nexp .)
    )               reduce using rule 69 (p -> MTHANEQ neur11_5 nexp .)
    ,               reduce using rule 69 (p -> MTHANEQ neur11_5 nexp .)


state 190

    (70) p -> LTHANEQ neur11_6 nexp .

    AND             reduce using rule 70 (p -> LTHANEQ neur11_6 nexp .)
    OR              reduce using rule 70 (p -> LTHANEQ neur11_6 nexp .)
    ;               reduce using rule 70 (p -> LTHANEQ neur11_6 nexp .)
    )               reduce using rule 70 (p -> LTHANEQ neur11_6 nexp .)
    ,               reduce using rule 70 (p -> LTHANEQ neur11_6 nexp .)


state 191

    (66) p -> NOTEQ neur11_2 nexp .

    AND             reduce using rule 66 (p -> NOTEQ neur11_2 nexp .)
    OR              reduce using rule 66 (p -> NOTEQ neur11_2 nexp .)
    ;               reduce using rule 66 (p -> NOTEQ neur11_2 nexp .)
    )               reduce using rule 66 (p -> NOTEQ neur11_2 nexp .)
    ,               reduce using rule 66 (p -> NOTEQ neur11_2 nexp .)


state 192

    (65) p -> EQ neur11_1 nexp .

    AND             reduce using rule 65 (p -> EQ neur11_1 nexp .)
    OR              reduce using rule 65 (p -> EQ neur11_1 nexp .)
    ;               reduce using rule 65 (p -> EQ neur11_1 nexp .)
    )               reduce using rule 65 (p -> EQ neur11_1 nexp .)
    ,               reduce using rule 65 (p -> EQ neur11_1 nexp .)


state 193

    (68) p -> < neur11_4 nexp .

    AND             reduce using rule 68 (p -> < neur11_4 nexp .)
    OR              reduce using rule 68 (p -> < neur11_4 nexp .)
    ;               reduce using rule 68 (p -> < neur11_4 nexp .)
    )               reduce using rule 68 (p -> < neur11_4 nexp .)
    ,               reduce using rule 68 (p -> < neur11_4 nexp .)


state 194

    (67) p -> > neur11_3 nexp .

    AND             reduce using rule 67 (p -> > neur11_3 nexp .)
    OR              reduce using rule 67 (p -> > neur11_3 nexp .)
    ;               reduce using rule 67 (p -> > neur11_3 nexp .)
    )               reduce using rule 67 (p -> > neur11_3 nexp .)
    ,               reduce using rule 67 (p -> > neur11_3 nexp .)


state 195

    (80) q -> + neur3_1 . nexp
    (77) nexp -> . termino neur5 q
    (84) termino -> . meteneg factor neur4 n
    (93) meteneg -> . empty
    (94) meteneg -> . -
    (136) empty -> .

    -               shift and go to state 101
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    meteneg                        shift and go to state 100
    nexp                           shift and go to state 211
    empty                          shift and go to state 104
    termino                        shift and go to state 105

state 196

    (81) q -> - neur3_2 . nexp
    (77) nexp -> . termino neur5 q
    (84) termino -> . meteneg factor neur4 n
    (93) meteneg -> . empty
    (94) meteneg -> . -
    (136) empty -> .

    -               shift and go to state 101
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    meteneg                        shift and go to state 100
    nexp                           shift and go to state 212
    empty                          shift and go to state 104
    termino                        shift and go to state 105

state 197

    (58) o -> AND neur9_1 . subexpresion
    (55) subexpresion -> . exp neur10 o
    (62) exp -> . nexp p neur12
    (77) nexp -> . termino neur5 q
    (84) termino -> . meteneg factor neur4 n
    (93) meteneg -> . empty
    (94) meteneg -> . -
    (136) empty -> .

    -               shift and go to state 101
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    meteneg                        shift and go to state 100
    nexp                           shift and go to state 102
    subexpresion                   shift and go to state 213
    empty                          shift and go to state 104
    termino                        shift and go to state 105
    exp                            shift and go to state 106

state 198

    (59) o -> OR neur9_2 . subexpresion
    (55) subexpresion -> . exp neur10 o
    (62) exp -> . nexp p neur12
    (77) nexp -> . termino neur5 q
    (84) termino -> . meteneg factor neur4 n
    (93) meteneg -> . empty
    (94) meteneg -> . -
    (136) empty -> .

    -               shift and go to state 101
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    meteneg                        shift and go to state 100
    nexp                           shift and go to state 102
    empty                          shift and go to state 104
    subexpresion                   shift and go to state 214
    termino                        shift and go to state 105
    exp                            shift and go to state 106

state 199

    (118) play -> PLAY ( NOTA , CTEE ) . ;

    ;               shift and go to state 215


state 200

    (47) for -> FOR ( asignacion neur18 expresion ; . neur19 asignacion ) neur21 bloque ; neur20
    (49) neur19 -> .

    ID              reduce using rule 49 (neur19 -> .)

    neur19                         shift and go to state 216

state 201

    (37) asignacion -> ID asiglista = neur8 expresion ; .

    ID              reduce using rule 37 (asignacion -> ID asiglista = neur8 expresion ; .)
    IF              reduce using rule 37 (asignacion -> ID asiglista = neur8 expresion ; .)
    FOR             reduce using rule 37 (asignacion -> ID asiglista = neur8 expresion ; .)
    RETURN          reduce using rule 37 (asignacion -> ID asiglista = neur8 expresion ; .)
    WHILE           reduce using rule 37 (asignacion -> ID asiglista = neur8 expresion ; .)
    PLAY            reduce using rule 37 (asignacion -> ID asiglista = neur8 expresion ; .)
    PRINT           reduce using rule 37 (asignacion -> ID asiglista = neur8 expresion ; .)
    CALL            reduce using rule 37 (asignacion -> ID asiglista = neur8 expresion ; .)
    }               reduce using rule 37 (asignacion -> ID asiglista = neur8 expresion ; .)
    NOT             reduce using rule 37 (asignacion -> ID asiglista = neur8 expresion ; .)
    -               reduce using rule 37 (asignacion -> ID asiglista = neur8 expresion ; .)
    (               reduce using rule 37 (asignacion -> ID asiglista = neur8 expresion ; .)
    CTEE            reduce using rule 37 (asignacion -> ID asiglista = neur8 expresion ; .)
    CTEF            reduce using rule 37 (asignacion -> ID asiglista = neur8 expresion ; .)
    CTEBOOL         reduce using rule 37 (asignacion -> ID asiglista = neur8 expresion ; .)
    CTECHAR         reduce using rule 37 (asignacion -> ID asiglista = neur8 expresion ; .)
    )               reduce using rule 37 (asignacion -> ID asiglista = neur8 expresion ; .)


state 202

    (41) if -> IF ( expresion ) neur13 bloque . l ; neur15
    (43) l -> . empty
    (44) l -> . ELSE neur14 bloque
    (136) empty -> .

    ELSE            shift and go to state 218
    ;               reduce using rule 136 (empty -> .)

    l                              shift and go to state 217
    empty                          shift and go to state 219

state 203

    (122) s -> expresion neur25 . t
    (124) t -> . empty
    (125) t -> . , s
    (136) empty -> .

    ,               shift and go to state 220
    )               reduce using rule 136 (empty -> .)

    t                              shift and go to state 221
    empty                          shift and go to state 222

state 204

    (126) callvoidfunc -> CALL ID neur24 ( s ) . neur26 ;
    (128) neur26 -> .

    ;               reduce using rule 128 (neur26 -> .)

    neur26                         shift and go to state 223

state 205

    (115) while -> WHILE ( neur16 expresion ) neur13 bloque . ; neur17

    ;               shift and go to state 224


state 206

    (91) factor -> ( neur6 expresion ) . neur7
    (96) neur7 -> .

    *               reduce using rule 96 (neur7 -> .)
    /               reduce using rule 96 (neur7 -> .)
    +               reduce using rule 96 (neur7 -> .)
    -               reduce using rule 96 (neur7 -> .)
    EQ              reduce using rule 96 (neur7 -> .)
    NOTEQ           reduce using rule 96 (neur7 -> .)
    >               reduce using rule 96 (neur7 -> .)
    <               reduce using rule 96 (neur7 -> .)
    MTHANEQ         reduce using rule 96 (neur7 -> .)
    LTHANEQ         reduce using rule 96 (neur7 -> .)
    AND             reduce using rule 96 (neur7 -> .)
    OR              reduce using rule 96 (neur7 -> .)
    ;               reduce using rule 96 (neur7 -> .)
    )               reduce using rule 96 (neur7 -> .)
    ,               reduce using rule 96 (neur7 -> .)
    ]               reduce using rule 96 (neur7 -> .)

    neur7                          shift and go to state 225

state 207

    (87) n -> * neur2_1 . termino
    (84) termino -> . meteneg factor neur4 n
    (93) meteneg -> . empty
    (94) meteneg -> . -
    (136) empty -> .

    -               shift and go to state 101
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    meteneg                        shift and go to state 100
    termino                        shift and go to state 226
    empty                          shift and go to state 104

state 208

    (88) n -> / neur2_2 . termino
    (84) termino -> . meteneg factor neur4 n
    (93) meteneg -> . empty
    (94) meteneg -> . -
    (136) empty -> .

    -               shift and go to state 101
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)

    meteneg                        shift and go to state 100
    termino                        shift and go to state 227
    empty                          shift and go to state 104

state 209

    (120) callreturnfunc -> CALL ID neur24 ( . s ) neur26 ;
    (121) s -> . empty
    (122) s -> . expresion neur25 t
    (136) empty -> .
    (52) expresion -> . m subexpresion
    (53) m -> . empty
    (54) m -> . NOT m

    )               reduce using rule 136 (empty -> .)
    -               reduce using rule 136 (empty -> .)
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)
    NOT             shift and go to state 83

    expresion                      shift and go to state 177
    m                              shift and go to state 82
    s                              shift and go to state 228
    empty                          shift and go to state 179

state 210

    (114) length -> . LENGTH ( . )

    )               shift and go to state 229


state 211

    (80) q -> + neur3_1 nexp .

    EQ              reduce using rule 80 (q -> + neur3_1 nexp .)
    NOTEQ           reduce using rule 80 (q -> + neur3_1 nexp .)
    >               reduce using rule 80 (q -> + neur3_1 nexp .)
    <               reduce using rule 80 (q -> + neur3_1 nexp .)
    MTHANEQ         reduce using rule 80 (q -> + neur3_1 nexp .)
    LTHANEQ         reduce using rule 80 (q -> + neur3_1 nexp .)
    AND             reduce using rule 80 (q -> + neur3_1 nexp .)
    OR              reduce using rule 80 (q -> + neur3_1 nexp .)
    ;               reduce using rule 80 (q -> + neur3_1 nexp .)
    )               reduce using rule 80 (q -> + neur3_1 nexp .)
    ,               reduce using rule 80 (q -> + neur3_1 nexp .)
    ]               reduce using rule 80 (q -> + neur3_1 nexp .)


state 212

    (81) q -> - neur3_2 nexp .

    EQ              reduce using rule 81 (q -> - neur3_2 nexp .)
    NOTEQ           reduce using rule 81 (q -> - neur3_2 nexp .)
    >               reduce using rule 81 (q -> - neur3_2 nexp .)
    <               reduce using rule 81 (q -> - neur3_2 nexp .)
    MTHANEQ         reduce using rule 81 (q -> - neur3_2 nexp .)
    LTHANEQ         reduce using rule 81 (q -> - neur3_2 nexp .)
    AND             reduce using rule 81 (q -> - neur3_2 nexp .)
    OR              reduce using rule 81 (q -> - neur3_2 nexp .)
    ;               reduce using rule 81 (q -> - neur3_2 nexp .)
    )               reduce using rule 81 (q -> - neur3_2 nexp .)
    ,               reduce using rule 81 (q -> - neur3_2 nexp .)
    ]               reduce using rule 81 (q -> - neur3_2 nexp .)


state 213

    (58) o -> AND neur9_1 subexpresion .

    ;               reduce using rule 58 (o -> AND neur9_1 subexpresion .)
    )               reduce using rule 58 (o -> AND neur9_1 subexpresion .)
    ,               reduce using rule 58 (o -> AND neur9_1 subexpresion .)


state 214

    (59) o -> OR neur9_2 subexpresion .

    ;               reduce using rule 59 (o -> OR neur9_2 subexpresion .)
    )               reduce using rule 59 (o -> OR neur9_2 subexpresion .)
    ,               reduce using rule 59 (o -> OR neur9_2 subexpresion .)


state 215

    (118) play -> PLAY ( NOTA , CTEE ) ; .

    ID              reduce using rule 118 (play -> PLAY ( NOTA , CTEE ) ; .)
    IF              reduce using rule 118 (play -> PLAY ( NOTA , CTEE ) ; .)
    FOR             reduce using rule 118 (play -> PLAY ( NOTA , CTEE ) ; .)
    RETURN          reduce using rule 118 (play -> PLAY ( NOTA , CTEE ) ; .)
    WHILE           reduce using rule 118 (play -> PLAY ( NOTA , CTEE ) ; .)
    PLAY            reduce using rule 118 (play -> PLAY ( NOTA , CTEE ) ; .)
    PRINT           reduce using rule 118 (play -> PLAY ( NOTA , CTEE ) ; .)
    CALL            reduce using rule 118 (play -> PLAY ( NOTA , CTEE ) ; .)
    }               reduce using rule 118 (play -> PLAY ( NOTA , CTEE ) ; .)


state 216

    (47) for -> FOR ( asignacion neur18 expresion ; neur19 . asignacion ) neur21 bloque ; neur20
    (37) asignacion -> . ID asiglista = neur8 expresion ;

    ID              shift and go to state 68

    asignacion                     shift and go to state 230

state 217

    (41) if -> IF ( expresion ) neur13 bloque l . ; neur15

    ;               shift and go to state 231


state 218

    (44) l -> ELSE . neur14 bloque
    (45) neur14 -> .

    {               reduce using rule 45 (neur14 -> .)

    neur14                         shift and go to state 232

state 219

    (43) l -> empty .

    ;               reduce using rule 43 (l -> empty .)


state 220

    (125) t -> , . s
    (121) s -> . empty
    (122) s -> . expresion neur25 t
    (136) empty -> .
    (52) expresion -> . m subexpresion
    (53) m -> . empty
    (54) m -> . NOT m

    )               reduce using rule 136 (empty -> .)
    -               reduce using rule 136 (empty -> .)
    (               reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    CTEE            reduce using rule 136 (empty -> .)
    CTEF            reduce using rule 136 (empty -> .)
    CTEBOOL         reduce using rule 136 (empty -> .)
    CTECHAR         reduce using rule 136 (empty -> .)
    CALL            reduce using rule 136 (empty -> .)
    NOT             shift and go to state 83

    expresion                      shift and go to state 177
    m                              shift and go to state 82
    s                              shift and go to state 233
    empty                          shift and go to state 179

state 221

    (122) s -> expresion neur25 t .

    )               reduce using rule 122 (s -> expresion neur25 t .)


state 222

    (124) t -> empty .

    )               reduce using rule 124 (t -> empty .)


state 223

    (126) callvoidfunc -> CALL ID neur24 ( s ) neur26 . ;

    ;               shift and go to state 234


state 224

    (115) while -> WHILE ( neur16 expresion ) neur13 bloque ; . neur17
    (117) neur17 -> .

    ID              reduce using rule 117 (neur17 -> .)
    IF              reduce using rule 117 (neur17 -> .)
    FOR             reduce using rule 117 (neur17 -> .)
    RETURN          reduce using rule 117 (neur17 -> .)
    WHILE           reduce using rule 117 (neur17 -> .)
    PLAY            reduce using rule 117 (neur17 -> .)
    PRINT           reduce using rule 117 (neur17 -> .)
    CALL            reduce using rule 117 (neur17 -> .)
    }               reduce using rule 117 (neur17 -> .)

    neur17                         shift and go to state 235

state 225

    (91) factor -> ( neur6 expresion ) neur7 .

    *               reduce using rule 91 (factor -> ( neur6 expresion ) neur7 .)
    /               reduce using rule 91 (factor -> ( neur6 expresion ) neur7 .)
    +               reduce using rule 91 (factor -> ( neur6 expresion ) neur7 .)
    -               reduce using rule 91 (factor -> ( neur6 expresion ) neur7 .)
    EQ              reduce using rule 91 (factor -> ( neur6 expresion ) neur7 .)
    NOTEQ           reduce using rule 91 (factor -> ( neur6 expresion ) neur7 .)
    >               reduce using rule 91 (factor -> ( neur6 expresion ) neur7 .)
    <               reduce using rule 91 (factor -> ( neur6 expresion ) neur7 .)
    MTHANEQ         reduce using rule 91 (factor -> ( neur6 expresion ) neur7 .)
    LTHANEQ         reduce using rule 91 (factor -> ( neur6 expresion ) neur7 .)
    AND             reduce using rule 91 (factor -> ( neur6 expresion ) neur7 .)
    OR              reduce using rule 91 (factor -> ( neur6 expresion ) neur7 .)
    ;               reduce using rule 91 (factor -> ( neur6 expresion ) neur7 .)
    )               reduce using rule 91 (factor -> ( neur6 expresion ) neur7 .)
    ,               reduce using rule 91 (factor -> ( neur6 expresion ) neur7 .)
    ]               reduce using rule 91 (factor -> ( neur6 expresion ) neur7 .)


state 226

    (87) n -> * neur2_1 termino .

    +               reduce using rule 87 (n -> * neur2_1 termino .)
    -               reduce using rule 87 (n -> * neur2_1 termino .)
    EQ              reduce using rule 87 (n -> * neur2_1 termino .)
    NOTEQ           reduce using rule 87 (n -> * neur2_1 termino .)
    >               reduce using rule 87 (n -> * neur2_1 termino .)
    <               reduce using rule 87 (n -> * neur2_1 termino .)
    MTHANEQ         reduce using rule 87 (n -> * neur2_1 termino .)
    LTHANEQ         reduce using rule 87 (n -> * neur2_1 termino .)
    AND             reduce using rule 87 (n -> * neur2_1 termino .)
    OR              reduce using rule 87 (n -> * neur2_1 termino .)
    ;               reduce using rule 87 (n -> * neur2_1 termino .)
    )               reduce using rule 87 (n -> * neur2_1 termino .)
    ,               reduce using rule 87 (n -> * neur2_1 termino .)
    ]               reduce using rule 87 (n -> * neur2_1 termino .)


state 227

    (88) n -> / neur2_2 termino .

    +               reduce using rule 88 (n -> / neur2_2 termino .)
    -               reduce using rule 88 (n -> / neur2_2 termino .)
    EQ              reduce using rule 88 (n -> / neur2_2 termino .)
    NOTEQ           reduce using rule 88 (n -> / neur2_2 termino .)
    >               reduce using rule 88 (n -> / neur2_2 termino .)
    <               reduce using rule 88 (n -> / neur2_2 termino .)
    MTHANEQ         reduce using rule 88 (n -> / neur2_2 termino .)
    LTHANEQ         reduce using rule 88 (n -> / neur2_2 termino .)
    AND             reduce using rule 88 (n -> / neur2_2 termino .)
    OR              reduce using rule 88 (n -> / neur2_2 termino .)
    ;               reduce using rule 88 (n -> / neur2_2 termino .)
    )               reduce using rule 88 (n -> / neur2_2 termino .)
    ,               reduce using rule 88 (n -> / neur2_2 termino .)
    ]               reduce using rule 88 (n -> / neur2_2 termino .)


state 228

    (120) callreturnfunc -> CALL ID neur24 ( s . ) neur26 ;

    )               shift and go to state 236


state 229

    (114) length -> . LENGTH ( ) .

    *               reduce using rule 114 (length -> . LENGTH ( ) .)
    /               reduce using rule 114 (length -> . LENGTH ( ) .)
    +               reduce using rule 114 (length -> . LENGTH ( ) .)
    -               reduce using rule 114 (length -> . LENGTH ( ) .)
    EQ              reduce using rule 114 (length -> . LENGTH ( ) .)
    NOTEQ           reduce using rule 114 (length -> . LENGTH ( ) .)
    >               reduce using rule 114 (length -> . LENGTH ( ) .)
    <               reduce using rule 114 (length -> . LENGTH ( ) .)
    MTHANEQ         reduce using rule 114 (length -> . LENGTH ( ) .)
    LTHANEQ         reduce using rule 114 (length -> . LENGTH ( ) .)
    AND             reduce using rule 114 (length -> . LENGTH ( ) .)
    OR              reduce using rule 114 (length -> . LENGTH ( ) .)
    ;               reduce using rule 114 (length -> . LENGTH ( ) .)
    )               reduce using rule 114 (length -> . LENGTH ( ) .)
    ,               reduce using rule 114 (length -> . LENGTH ( ) .)
    ]               reduce using rule 114 (length -> . LENGTH ( ) .)


state 230

    (47) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion . ) neur21 bloque ; neur20

    )               shift and go to state 237


state 231

    (41) if -> IF ( expresion ) neur13 bloque l ; . neur15
    (46) neur15 -> .

    ID              reduce using rule 46 (neur15 -> .)
    IF              reduce using rule 46 (neur15 -> .)
    FOR             reduce using rule 46 (neur15 -> .)
    RETURN          reduce using rule 46 (neur15 -> .)
    WHILE           reduce using rule 46 (neur15 -> .)
    PLAY            reduce using rule 46 (neur15 -> .)
    PRINT           reduce using rule 46 (neur15 -> .)
    CALL            reduce using rule 46 (neur15 -> .)
    }               reduce using rule 46 (neur15 -> .)

    neur15                         shift and go to state 238

state 232

    (44) l -> ELSE neur14 . bloque
    (26) bloque -> . { i }

    {               shift and go to state 52

    bloque                         shift and go to state 239

state 233

    (125) t -> , s .

    )               reduce using rule 125 (t -> , s .)


state 234

    (126) callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .

    ID              reduce using rule 126 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    IF              reduce using rule 126 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    FOR             reduce using rule 126 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    RETURN          reduce using rule 126 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    WHILE           reduce using rule 126 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    PLAY            reduce using rule 126 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    PRINT           reduce using rule 126 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    CALL            reduce using rule 126 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    }               reduce using rule 126 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)


state 235

    (115) while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .

    ID              reduce using rule 115 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    IF              reduce using rule 115 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    FOR             reduce using rule 115 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    RETURN          reduce using rule 115 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    WHILE           reduce using rule 115 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    PLAY            reduce using rule 115 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    PRINT           reduce using rule 115 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    CALL            reduce using rule 115 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    }               reduce using rule 115 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)


state 236

    (120) callreturnfunc -> CALL ID neur24 ( s ) . neur26 ;
    (128) neur26 -> .

    ;               reduce using rule 128 (neur26 -> .)

    neur26                         shift and go to state 240

state 237

    (47) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) . neur21 bloque ; neur20
    (50) neur21 -> .

    {               reduce using rule 50 (neur21 -> .)

    neur21                         shift and go to state 241

state 238

    (41) if -> IF ( expresion ) neur13 bloque l ; neur15 .

    ID              reduce using rule 41 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    IF              reduce using rule 41 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    FOR             reduce using rule 41 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    RETURN          reduce using rule 41 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    WHILE           reduce using rule 41 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    PLAY            reduce using rule 41 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    PRINT           reduce using rule 41 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    CALL            reduce using rule 41 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    }               reduce using rule 41 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)


state 239

    (44) l -> ELSE neur14 bloque .

    ;               reduce using rule 44 (l -> ELSE neur14 bloque .)


state 240

    (120) callreturnfunc -> CALL ID neur24 ( s ) neur26 . ;

    ;               shift and go to state 242


state 241

    (47) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 . bloque ; neur20
    (26) bloque -> . { i }

    {               shift and go to state 52

    bloque                         shift and go to state 243

state 242

    (120) callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .

    *               reduce using rule 120 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    /               reduce using rule 120 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    +               reduce using rule 120 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    -               reduce using rule 120 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    EQ              reduce using rule 120 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    NOTEQ           reduce using rule 120 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    >               reduce using rule 120 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    <               reduce using rule 120 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    MTHANEQ         reduce using rule 120 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    LTHANEQ         reduce using rule 120 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    AND             reduce using rule 120 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    OR              reduce using rule 120 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    ;               reduce using rule 120 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    )               reduce using rule 120 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    ,               reduce using rule 120 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    ]               reduce using rule 120 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)


state 243

    (47) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque . ; neur20

    ;               shift and go to state 244


state 244

    (47) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; . neur20
    (51) neur20 -> .

    ID              reduce using rule 51 (neur20 -> .)
    IF              reduce using rule 51 (neur20 -> .)
    FOR             reduce using rule 51 (neur20 -> .)
    RETURN          reduce using rule 51 (neur20 -> .)
    WHILE           reduce using rule 51 (neur20 -> .)
    PLAY            reduce using rule 51 (neur20 -> .)
    PRINT           reduce using rule 51 (neur20 -> .)
    CALL            reduce using rule 51 (neur20 -> .)
    }               reduce using rule 51 (neur20 -> .)

    neur20                         shift and go to state 245

state 245

    (47) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .

    ID              reduce using rule 47 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    IF              reduce using rule 47 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    FOR             reduce using rule 47 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    RETURN          reduce using rule 47 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    WHILE           reduce using rule 47 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    PLAY            reduce using rule 47 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    PRINT           reduce using rule 47 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    CALL            reduce using rule 47 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    }               reduce using rule 47 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)

