Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    NEW
    APPEND
    SET
    GET
    REMOVE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> creadirprocglobal a neur22 c cancion
Rule 2     creadirprocglobal -> <empty>
Rule 3     a -> empty
Rule 4     a -> vars b
Rule 5     b -> empty
Rule 6     b -> a
Rule 7     neur22 -> <empty>
Rule 8     c -> empty
Rule 9     c -> funcion d
Rule 10    d -> empty
Rule 11    d -> c
Rule 12    vars -> VAR v : tipo u ;
Rule 13    v -> ID
Rule 14    funcion -> FUNC z ID meterfuncion ( params ) f neur23 bloque
Rule 15    z -> INT
Rule 16    z -> CHAR
Rule 17    z -> FLOAT
Rule 18    z -> BOOL
Rule 19    z -> VOID
Rule 20    meterfuncion -> <empty>
Rule 21    neur23 -> <empty>
Rule 22    f -> empty
Rule 23    f -> vars g
Rule 24    g -> empty
Rule 25    g -> f
Rule 26    params -> empty
Rule 27    params -> tipo ID meterparams h
Rule 28    meterparams -> <empty>
Rule 29    h -> empty
Rule 30    h -> , params
Rule 31    i -> empty
Rule 32    i -> estatuto j
Rule 33    j -> empty
Rule 34    j -> i
Rule 35    bloque -> { i }
Rule 36    cancion -> CANCION ( CTEE ) metercancion f bloque
Rule 37    metercancion -> <empty>
Rule 38    estatuto -> asignacion
Rule 39    estatuto -> if
Rule 40    estatuto -> for
Rule 41    estatuto -> return
Rule 42    estatuto -> while
Rule 43    estatuto -> play
Rule 44    estatuto -> print
Rule 45    estatuto -> callvoidfunc
Rule 46    asignacion -> ID asiglista = neur8 expresion ;
Rule 47    neur8 -> <empty>
Rule 48    asiglista -> empty
Rule 49    asiglista -> accesoVarDim
Rule 50    if -> IF ( expresion ) neur13 bloque l ; neur15
Rule 51    neur13 -> <empty>
Rule 52    l -> empty
Rule 53    l -> ELSE neur14 bloque
Rule 54    neur14 -> <empty>
Rule 55    neur15 -> <empty>
Rule 56    for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20
Rule 57    neur18 -> <empty>
Rule 58    neur19 -> <empty>
Rule 59    neur21 -> <empty>
Rule 60    neur20 -> <empty>
Rule 61    expresion -> m subexpresion
Rule 62    m -> empty
Rule 63    m -> NOT
Rule 64    subexpresion -> exp neur10 o
Rule 65    neur10 -> <empty>
Rule 66    o -> empty
Rule 67    o -> AND neur9_1 subexpresion
Rule 68    o -> OR neur9_2 subexpresion
Rule 69    neur9_1 -> <empty>
Rule 70    neur9_2 -> <empty>
Rule 71    exp -> nexp p neur12
Rule 72    neur12 -> <empty>
Rule 73    p -> empty
Rule 74    p -> EQ neur11_1 nexp
Rule 75    p -> NOTEQ neur11_2 nexp
Rule 76    p -> > neur11_3 nexp
Rule 77    p -> < neur11_4 nexp
Rule 78    p -> MTHANEQ neur11_5 nexp
Rule 79    p -> LTHANEQ neur11_6 nexp
Rule 80    neur11_1 -> <empty>
Rule 81    neur11_2 -> <empty>
Rule 82    neur11_3 -> <empty>
Rule 83    neur11_4 -> <empty>
Rule 84    neur11_5 -> <empty>
Rule 85    neur11_6 -> <empty>
Rule 86    nexp -> termino neur5 q
Rule 87    neur5 -> <empty>
Rule 88    q -> empty
Rule 89    q -> + neur3_1 nexp
Rule 90    q -> - neur3_2 nexp
Rule 91    neur3_1 -> <empty>
Rule 92    neur3_2 -> <empty>
Rule 93    termino -> meteneg factor neur4 n
Rule 94    neur4 -> <empty>
Rule 95    n -> empty
Rule 96    n -> * neur2_1 termino
Rule 97    n -> / neur2_2 termino
Rule 98    neur2_1 -> <empty>
Rule 99    neur2_2 -> <empty>
Rule 100   factor -> ( neur6 expresion ) neur7
Rule 101   factor -> varcte
Rule 102   meteneg -> empty
Rule 103   meteneg -> -
Rule 104   neur6 -> <empty>
Rule 105   neur7 -> <empty>
Rule 106   varcte -> ID r neurVar
Rule 107   varcte -> CTEE neurCteE
Rule 108   varcte -> CTEF neurCteF
Rule 109   varcte -> CTEBOOL neurCteB
Rule 110   varcte -> callreturnfunc
Rule 111   varcte -> CTECHAR neurCteCh
Rule 112   neurVar -> <empty>
Rule 113   neurCteE -> <empty>
Rule 114   neurCteF -> <empty>
Rule 115   neurCteB -> <empty>
Rule 116   neurCteCh -> <empty>
Rule 117   r -> empty
Rule 118   r -> oplista
Rule 119   oplista -> accesoVarDim
Rule 120   oplista -> length
Rule 121   accesoVarDim -> [ neur27 nexp ]
Rule 122   neur27 -> <empty>
Rule 123   length -> . LENGTH ( )
Rule 124   while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17
Rule 125   neur16 -> <empty>
Rule 126   neur17 -> <empty>
Rule 127   play -> PLAY ( NOTA , CTEE ) ;
Rule 128   print -> PRINT expresion ;
Rule 129   callreturnfunc -> CALL ID neur24 ( s ) neur26 ;
Rule 130   s -> empty
Rule 131   s -> expresion neur25 t
Rule 132   neur25 -> <empty>
Rule 133   t -> empty
Rule 134   t -> , s
Rule 135   callvoidfunc -> CALL ID neur24 ( s ) neur26 ;
Rule 136   neur24 -> <empty>
Rule 137   neur26 -> <empty>
Rule 138   return -> RETURN ( expresion ) ;
Rule 139   tipo -> y
Rule 140   u -> empty
Rule 141   u -> LIST ( CTEE )
Rule 142   y -> INT
Rule 143   y -> CHAR
Rule 144   y -> FLOAT
Rule 145   y -> BOOL
Rule 146   empty -> <empty>

Terminals, with rules where they appear

(                    : 14 36 50 56 100 123 124 127 129 135 138 141
)                    : 14 36 50 56 100 123 124 127 129 135 138 141
*                    : 96
+                    : 89
,                    : 30 127 134
-                    : 90 103
.                    : 123
/                    : 97
:                    : 12
;                    : 12 46 50 56 56 124 127 128 129 135 138
<                    : 77
=                    : 46
>                    : 76
AND                  : 67
APPEND               : 
BOOL                 : 18 145
CALL                 : 129 135
CANCION              : 36
CHAR                 : 16 143
CTEBOOL              : 109
CTECHAR              : 111
CTEE                 : 36 107 127 141
CTEF                 : 108
ELSE                 : 53
EQ                   : 74
FLOAT                : 17 144
FOR                  : 56
FUNC                 : 14
GET                  : 
ID                   : 13 14 27 46 106 129 135
IF                   : 50
INT                  : 15 142
LENGTH               : 123
LIST                 : 141
LTHANEQ              : 79
MTHANEQ              : 78
NEW                  : 
NOT                  : 63
NOTA                 : 127
NOTEQ                : 75
OR                   : 68
PLAY                 : 127
PRINT                : 128
REMOVE               : 
RETURN               : 138
SET                  : 
VAR                  : 12
VOID                 : 19
WHILE                : 124
[                    : 121
]                    : 121
error                : 
{                    : 35
}                    : 35

Nonterminals, with rules where they appear

a                    : 1 6
accesoVarDim         : 49 119
asiglista            : 46
asignacion           : 38 56 56
b                    : 4
bloque               : 14 36 50 53 56 124
c                    : 1 11
callreturnfunc       : 110
callvoidfunc         : 45
cancion              : 1
creadirprocglobal    : 1
d                    : 9
empty                : 3 5 8 10 22 24 26 29 31 33 48 52 62 66 73 88 95 102 117 130 133 140
estatuto             : 32
exp                  : 64
expresion            : 46 50 56 100 124 128 131 138
f                    : 14 25 36
factor               : 93
for                  : 40
funcion              : 9
g                    : 23
h                    : 27
i                    : 34 35
if                   : 39
j                    : 32
l                    : 50
length               : 120
m                    : 61
meteneg              : 93
metercancion         : 36
meterfuncion         : 14
meterparams          : 27
n                    : 93
neur10               : 64
neur11_1             : 74
neur11_2             : 75
neur11_3             : 76
neur11_4             : 77
neur11_5             : 78
neur11_6             : 79
neur12               : 71
neur13               : 50 124
neur14               : 53
neur15               : 50
neur16               : 124
neur17               : 124
neur18               : 56
neur19               : 56
neur20               : 56
neur21               : 56
neur22               : 1
neur23               : 14
neur24               : 129 135
neur25               : 131
neur26               : 129 135
neur27               : 121
neur2_1              : 96
neur2_2              : 97
neur3_1              : 89
neur3_2              : 90
neur4                : 93
neur5                : 86
neur6                : 100
neur7                : 100
neur8                : 46
neur9_1              : 67
neur9_2              : 68
neurCteB             : 109
neurCteCh            : 111
neurCteE             : 107
neurCteF             : 108
neurVar              : 106
nexp                 : 71 74 75 76 77 78 79 89 90 121
o                    : 64
oplista              : 118
p                    : 71
params               : 14 30
play                 : 43
print                : 44
programa             : 0
q                    : 86
r                    : 106
return               : 41
s                    : 129 134 135
subexpresion         : 61 67 68
t                    : 131
termino              : 86 96 97
tipo                 : 12 27
u                    : 12
v                    : 12
varcte               : 101
vars                 : 4 23
while                : 42
y                    : 139
z                    : 14

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . creadirprocglobal a neur22 c cancion
    (2) creadirprocglobal -> .

    VAR             reduce using rule 2 (creadirprocglobal -> .)
    FUNC            reduce using rule 2 (creadirprocglobal -> .)
    CANCION         reduce using rule 2 (creadirprocglobal -> .)

    creadirprocglobal              shift and go to state 1
    programa                       shift and go to state 2

state 1

    (1) programa -> creadirprocglobal . a neur22 c cancion
    (3) a -> . empty
    (4) a -> . vars b
    (146) empty -> .
    (12) vars -> . VAR v : tipo u ;

    FUNC            reduce using rule 146 (empty -> .)
    CANCION         reduce using rule 146 (empty -> .)
    VAR             shift and go to state 5

    a                              shift and go to state 3
    vars                           shift and go to state 4
    empty                          shift and go to state 6

state 2

    (0) S' -> programa .



state 3

    (1) programa -> creadirprocglobal a . neur22 c cancion
    (7) neur22 -> .

    FUNC            reduce using rule 7 (neur22 -> .)
    CANCION         reduce using rule 7 (neur22 -> .)

    neur22                         shift and go to state 7

state 4

    (4) a -> vars . b
    (5) b -> . empty
    (6) b -> . a
    (146) empty -> .
    (3) a -> . empty
    (4) a -> . vars b
    (12) vars -> . VAR v : tipo u ;

    FUNC            reduce using rule 146 (empty -> .)
    CANCION         reduce using rule 146 (empty -> .)
    VAR             shift and go to state 5

    a                              shift and go to state 8
    b                              shift and go to state 9
    vars                           shift and go to state 4
    empty                          shift and go to state 10

state 5

    (12) vars -> VAR . v : tipo u ;
    (13) v -> . ID

    ID              shift and go to state 12

    v                              shift and go to state 11

state 6

    (3) a -> empty .

    FUNC            reduce using rule 3 (a -> empty .)
    CANCION         reduce using rule 3 (a -> empty .)


state 7

    (1) programa -> creadirprocglobal a neur22 . c cancion
    (8) c -> . empty
    (9) c -> . funcion d
    (146) empty -> .
    (14) funcion -> . FUNC z ID meterfuncion ( params ) f neur23 bloque

    CANCION         reduce using rule 146 (empty -> .)
    FUNC            shift and go to state 14

    c                              shift and go to state 13
    empty                          shift and go to state 15
    funcion                        shift and go to state 16

state 8

    (6) b -> a .

    FUNC            reduce using rule 6 (b -> a .)
    CANCION         reduce using rule 6 (b -> a .)


state 9

    (4) a -> vars b .

    FUNC            reduce using rule 4 (a -> vars b .)
    CANCION         reduce using rule 4 (a -> vars b .)


state 10

    (5) b -> empty .
    (3) a -> empty .

  ! reduce/reduce conflict for FUNC resolved using rule 3 (a -> empty .)
  ! reduce/reduce conflict for CANCION resolved using rule 3 (a -> empty .)
    FUNC            reduce using rule 3 (a -> empty .)
    CANCION         reduce using rule 3 (a -> empty .)

  ! FUNC            [ reduce using rule 5 (b -> empty .) ]
  ! CANCION         [ reduce using rule 5 (b -> empty .) ]


state 11

    (12) vars -> VAR v . : tipo u ;

    :               shift and go to state 17


state 12

    (13) v -> ID .

    :               reduce using rule 13 (v -> ID .)


state 13

    (1) programa -> creadirprocglobal a neur22 c . cancion
    (36) cancion -> . CANCION ( CTEE ) metercancion f bloque

    CANCION         shift and go to state 19

    cancion                        shift and go to state 18

state 14

    (14) funcion -> FUNC . z ID meterfuncion ( params ) f neur23 bloque
    (15) z -> . INT
    (16) z -> . CHAR
    (17) z -> . FLOAT
    (18) z -> . BOOL
    (19) z -> . VOID

    INT             shift and go to state 23
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 24
    VOID            shift and go to state 20

    z                              shift and go to state 25

state 15

    (8) c -> empty .

    CANCION         reduce using rule 8 (c -> empty .)


state 16

    (9) c -> funcion . d
    (10) d -> . empty
    (11) d -> . c
    (146) empty -> .
    (8) c -> . empty
    (9) c -> . funcion d
    (14) funcion -> . FUNC z ID meterfuncion ( params ) f neur23 bloque

    CANCION         reduce using rule 146 (empty -> .)
    FUNC            shift and go to state 14

    c                              shift and go to state 26
    d                              shift and go to state 27
    empty                          shift and go to state 28
    funcion                        shift and go to state 16

state 17

    (12) vars -> VAR v : . tipo u ;
    (139) tipo -> . y
    (142) y -> . INT
    (143) y -> . CHAR
    (144) y -> . FLOAT
    (145) y -> . BOOL

    INT             shift and go to state 30
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 31
    BOOL            shift and go to state 34

    y                              shift and go to state 33
    tipo                           shift and go to state 29

state 18

    (1) programa -> creadirprocglobal a neur22 c cancion .

    $end            reduce using rule 1 (programa -> creadirprocglobal a neur22 c cancion .)


state 19

    (36) cancion -> CANCION . ( CTEE ) metercancion f bloque

    (               shift and go to state 35


state 20

    (19) z -> VOID .

    ID              reduce using rule 19 (z -> VOID .)


state 21

    (17) z -> FLOAT .

    ID              reduce using rule 17 (z -> FLOAT .)


state 22

    (16) z -> CHAR .

    ID              reduce using rule 16 (z -> CHAR .)


state 23

    (15) z -> INT .

    ID              reduce using rule 15 (z -> INT .)


state 24

    (18) z -> BOOL .

    ID              reduce using rule 18 (z -> BOOL .)


state 25

    (14) funcion -> FUNC z . ID meterfuncion ( params ) f neur23 bloque

    ID              shift and go to state 36


state 26

    (11) d -> c .

    CANCION         reduce using rule 11 (d -> c .)


state 27

    (9) c -> funcion d .

    CANCION         reduce using rule 9 (c -> funcion d .)


state 28

    (10) d -> empty .
    (8) c -> empty .

  ! reduce/reduce conflict for CANCION resolved using rule 8 (c -> empty .)
    CANCION         reduce using rule 8 (c -> empty .)

  ! CANCION         [ reduce using rule 10 (d -> empty .) ]


state 29

    (12) vars -> VAR v : tipo . u ;
    (140) u -> . empty
    (141) u -> . LIST ( CTEE )
    (146) empty -> .

    LIST            shift and go to state 37
    ;               reduce using rule 146 (empty -> .)

    u                              shift and go to state 38
    empty                          shift and go to state 39

state 30

    (142) y -> INT .

    ID              reduce using rule 142 (y -> INT .)
    LIST            reduce using rule 142 (y -> INT .)
    ;               reduce using rule 142 (y -> INT .)


state 31

    (144) y -> FLOAT .

    ID              reduce using rule 144 (y -> FLOAT .)
    LIST            reduce using rule 144 (y -> FLOAT .)
    ;               reduce using rule 144 (y -> FLOAT .)


state 32

    (143) y -> CHAR .

    ID              reduce using rule 143 (y -> CHAR .)
    LIST            reduce using rule 143 (y -> CHAR .)
    ;               reduce using rule 143 (y -> CHAR .)


state 33

    (139) tipo -> y .

    ID              reduce using rule 139 (tipo -> y .)
    LIST            reduce using rule 139 (tipo -> y .)
    ;               reduce using rule 139 (tipo -> y .)


state 34

    (145) y -> BOOL .

    ID              reduce using rule 145 (y -> BOOL .)
    LIST            reduce using rule 145 (y -> BOOL .)
    ;               reduce using rule 145 (y -> BOOL .)


state 35

    (36) cancion -> CANCION ( . CTEE ) metercancion f bloque

    CTEE            shift and go to state 40


state 36

    (14) funcion -> FUNC z ID . meterfuncion ( params ) f neur23 bloque
    (20) meterfuncion -> .

    (               reduce using rule 20 (meterfuncion -> .)

    meterfuncion                   shift and go to state 41

state 37

    (141) u -> LIST . ( CTEE )

    (               shift and go to state 42


state 38

    (12) vars -> VAR v : tipo u . ;

    ;               shift and go to state 43


state 39

    (140) u -> empty .

    ;               reduce using rule 140 (u -> empty .)


state 40

    (36) cancion -> CANCION ( CTEE . ) metercancion f bloque

    )               shift and go to state 44


state 41

    (14) funcion -> FUNC z ID meterfuncion . ( params ) f neur23 bloque

    (               shift and go to state 45


state 42

    (141) u -> LIST ( . CTEE )

    CTEE            shift and go to state 46


state 43

    (12) vars -> VAR v : tipo u ; .

    VAR             reduce using rule 12 (vars -> VAR v : tipo u ; .)
    FUNC            reduce using rule 12 (vars -> VAR v : tipo u ; .)
    CANCION         reduce using rule 12 (vars -> VAR v : tipo u ; .)
    {               reduce using rule 12 (vars -> VAR v : tipo u ; .)


state 44

    (36) cancion -> CANCION ( CTEE ) . metercancion f bloque
    (37) metercancion -> .

    VAR             reduce using rule 37 (metercancion -> .)
    {               reduce using rule 37 (metercancion -> .)

    metercancion                   shift and go to state 47

state 45

    (14) funcion -> FUNC z ID meterfuncion ( . params ) f neur23 bloque
    (26) params -> . empty
    (27) params -> . tipo ID meterparams h
    (146) empty -> .
    (139) tipo -> . y
    (142) y -> . INT
    (143) y -> . CHAR
    (144) y -> . FLOAT
    (145) y -> . BOOL

    )               reduce using rule 146 (empty -> .)
    INT             shift and go to state 30
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 31
    BOOL            shift and go to state 34

    tipo                           shift and go to state 48
    params                         shift and go to state 49
    y                              shift and go to state 33
    empty                          shift and go to state 50

state 46

    (141) u -> LIST ( CTEE . )

    )               shift and go to state 51


state 47

    (36) cancion -> CANCION ( CTEE ) metercancion . f bloque
    (22) f -> . empty
    (23) f -> . vars g
    (146) empty -> .
    (12) vars -> . VAR v : tipo u ;

    {               reduce using rule 146 (empty -> .)
    VAR             shift and go to state 5

    vars                           shift and go to state 52
    f                              shift and go to state 53
    empty                          shift and go to state 54

state 48

    (27) params -> tipo . ID meterparams h

    ID              shift and go to state 55


state 49

    (14) funcion -> FUNC z ID meterfuncion ( params . ) f neur23 bloque

    )               shift and go to state 56


state 50

    (26) params -> empty .

    )               reduce using rule 26 (params -> empty .)


state 51

    (141) u -> LIST ( CTEE ) .

    ;               reduce using rule 141 (u -> LIST ( CTEE ) .)


state 52

    (23) f -> vars . g
    (24) g -> . empty
    (25) g -> . f
    (146) empty -> .
    (22) f -> . empty
    (23) f -> . vars g
    (12) vars -> . VAR v : tipo u ;

    {               reduce using rule 146 (empty -> .)
    VAR             shift and go to state 5

    g                              shift and go to state 57
    f                              shift and go to state 58
    vars                           shift and go to state 52
    empty                          shift and go to state 59

state 53

    (36) cancion -> CANCION ( CTEE ) metercancion f . bloque
    (35) bloque -> . { i }

    {               shift and go to state 60

    bloque                         shift and go to state 61

state 54

    (22) f -> empty .

    {               reduce using rule 22 (f -> empty .)


state 55

    (27) params -> tipo ID . meterparams h
    (28) meterparams -> .

    ,               reduce using rule 28 (meterparams -> .)
    )               reduce using rule 28 (meterparams -> .)

    meterparams                    shift and go to state 62

state 56

    (14) funcion -> FUNC z ID meterfuncion ( params ) . f neur23 bloque
    (22) f -> . empty
    (23) f -> . vars g
    (146) empty -> .
    (12) vars -> . VAR v : tipo u ;

    {               reduce using rule 146 (empty -> .)
    VAR             shift and go to state 5

    vars                           shift and go to state 52
    f                              shift and go to state 63
    empty                          shift and go to state 54

state 57

    (23) f -> vars g .

    {               reduce using rule 23 (f -> vars g .)


state 58

    (25) g -> f .

    {               reduce using rule 25 (g -> f .)


state 59

    (24) g -> empty .
    (22) f -> empty .

  ! reduce/reduce conflict for { resolved using rule 22 (f -> empty .)
    {               reduce using rule 22 (f -> empty .)

  ! {               [ reduce using rule 24 (g -> empty .) ]


state 60

    (35) bloque -> { . i }
    (31) i -> . empty
    (32) i -> . estatuto j
    (146) empty -> .
    (38) estatuto -> . asignacion
    (39) estatuto -> . if
    (40) estatuto -> . for
    (41) estatuto -> . return
    (42) estatuto -> . while
    (43) estatuto -> . play
    (44) estatuto -> . print
    (45) estatuto -> . callvoidfunc
    (46) asignacion -> . ID asiglista = neur8 expresion ;
    (50) if -> . IF ( expresion ) neur13 bloque l ; neur15
    (56) for -> . FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20
    (138) return -> . RETURN ( expresion ) ;
    (124) while -> . WHILE ( neur16 expresion ) neur13 bloque ; neur17
    (127) play -> . PLAY ( NOTA , CTEE ) ;
    (128) print -> . PRINT expresion ;
    (135) callvoidfunc -> . CALL ID neur24 ( s ) neur26 ;

    }               reduce using rule 146 (empty -> .)
    ID              shift and go to state 77
    IF              shift and go to state 78
    FOR             shift and go to state 76
    RETURN          shift and go to state 64
    WHILE           shift and go to state 65
    PLAY            shift and go to state 73
    PRINT           shift and go to state 66
    CALL            shift and go to state 81

    if                             shift and go to state 67
    for                            shift and go to state 68
    callvoidfunc                   shift and go to state 69
    estatuto                       shift and go to state 70
    print                          shift and go to state 71
    empty                          shift and go to state 72
    play                           shift and go to state 74
    return                         shift and go to state 75
    asignacion                     shift and go to state 79
    i                              shift and go to state 80
    while                          shift and go to state 82

state 61

    (36) cancion -> CANCION ( CTEE ) metercancion f bloque .

    $end            reduce using rule 36 (cancion -> CANCION ( CTEE ) metercancion f bloque .)


state 62

    (27) params -> tipo ID meterparams . h
    (29) h -> . empty
    (30) h -> . , params
    (146) empty -> .

    ,               shift and go to state 84
    )               reduce using rule 146 (empty -> .)

    h                              shift and go to state 83
    empty                          shift and go to state 85

state 63

    (14) funcion -> FUNC z ID meterfuncion ( params ) f . neur23 bloque
    (21) neur23 -> .

    {               reduce using rule 21 (neur23 -> .)

    neur23                         shift and go to state 86

state 64

    (138) return -> RETURN . ( expresion ) ;

    (               shift and go to state 87


state 65

    (124) while -> WHILE . ( neur16 expresion ) neur13 bloque ; neur17

    (               shift and go to state 88


state 66

    (128) print -> PRINT . expresion ;
    (61) expresion -> . m subexpresion
    (62) m -> . empty
    (63) m -> . NOT
    (146) empty -> .

    NOT             shift and go to state 91
    -               reduce using rule 146 (empty -> .)
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    expresion                      shift and go to state 89
    m                              shift and go to state 90
    empty                          shift and go to state 92

state 67

    (39) estatuto -> if .

    ID              reduce using rule 39 (estatuto -> if .)
    IF              reduce using rule 39 (estatuto -> if .)
    FOR             reduce using rule 39 (estatuto -> if .)
    RETURN          reduce using rule 39 (estatuto -> if .)
    WHILE           reduce using rule 39 (estatuto -> if .)
    PLAY            reduce using rule 39 (estatuto -> if .)
    PRINT           reduce using rule 39 (estatuto -> if .)
    CALL            reduce using rule 39 (estatuto -> if .)
    }               reduce using rule 39 (estatuto -> if .)


state 68

    (40) estatuto -> for .

    ID              reduce using rule 40 (estatuto -> for .)
    IF              reduce using rule 40 (estatuto -> for .)
    FOR             reduce using rule 40 (estatuto -> for .)
    RETURN          reduce using rule 40 (estatuto -> for .)
    WHILE           reduce using rule 40 (estatuto -> for .)
    PLAY            reduce using rule 40 (estatuto -> for .)
    PRINT           reduce using rule 40 (estatuto -> for .)
    CALL            reduce using rule 40 (estatuto -> for .)
    }               reduce using rule 40 (estatuto -> for .)


state 69

    (45) estatuto -> callvoidfunc .

    ID              reduce using rule 45 (estatuto -> callvoidfunc .)
    IF              reduce using rule 45 (estatuto -> callvoidfunc .)
    FOR             reduce using rule 45 (estatuto -> callvoidfunc .)
    RETURN          reduce using rule 45 (estatuto -> callvoidfunc .)
    WHILE           reduce using rule 45 (estatuto -> callvoidfunc .)
    PLAY            reduce using rule 45 (estatuto -> callvoidfunc .)
    PRINT           reduce using rule 45 (estatuto -> callvoidfunc .)
    CALL            reduce using rule 45 (estatuto -> callvoidfunc .)
    }               reduce using rule 45 (estatuto -> callvoidfunc .)


state 70

    (32) i -> estatuto . j
    (33) j -> . empty
    (34) j -> . i
    (146) empty -> .
    (31) i -> . empty
    (32) i -> . estatuto j
    (38) estatuto -> . asignacion
    (39) estatuto -> . if
    (40) estatuto -> . for
    (41) estatuto -> . return
    (42) estatuto -> . while
    (43) estatuto -> . play
    (44) estatuto -> . print
    (45) estatuto -> . callvoidfunc
    (46) asignacion -> . ID asiglista = neur8 expresion ;
    (50) if -> . IF ( expresion ) neur13 bloque l ; neur15
    (56) for -> . FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20
    (138) return -> . RETURN ( expresion ) ;
    (124) while -> . WHILE ( neur16 expresion ) neur13 bloque ; neur17
    (127) play -> . PLAY ( NOTA , CTEE ) ;
    (128) print -> . PRINT expresion ;
    (135) callvoidfunc -> . CALL ID neur24 ( s ) neur26 ;

    }               reduce using rule 146 (empty -> .)
    ID              shift and go to state 77
    IF              shift and go to state 78
    FOR             shift and go to state 76
    RETURN          shift and go to state 64
    WHILE           shift and go to state 65
    PLAY            shift and go to state 73
    PRINT           shift and go to state 66
    CALL            shift and go to state 81

    if                             shift and go to state 67
    for                            shift and go to state 68
    callvoidfunc                   shift and go to state 69
    estatuto                       shift and go to state 70
    print                          shift and go to state 71
    empty                          shift and go to state 93
    play                           shift and go to state 74
    return                         shift and go to state 75
    asignacion                     shift and go to state 79
    i                              shift and go to state 94
    j                              shift and go to state 95
    while                          shift and go to state 82

state 71

    (44) estatuto -> print .

    ID              reduce using rule 44 (estatuto -> print .)
    IF              reduce using rule 44 (estatuto -> print .)
    FOR             reduce using rule 44 (estatuto -> print .)
    RETURN          reduce using rule 44 (estatuto -> print .)
    WHILE           reduce using rule 44 (estatuto -> print .)
    PLAY            reduce using rule 44 (estatuto -> print .)
    PRINT           reduce using rule 44 (estatuto -> print .)
    CALL            reduce using rule 44 (estatuto -> print .)
    }               reduce using rule 44 (estatuto -> print .)


state 72

    (31) i -> empty .

    }               reduce using rule 31 (i -> empty .)


state 73

    (127) play -> PLAY . ( NOTA , CTEE ) ;

    (               shift and go to state 96


state 74

    (43) estatuto -> play .

    ID              reduce using rule 43 (estatuto -> play .)
    IF              reduce using rule 43 (estatuto -> play .)
    FOR             reduce using rule 43 (estatuto -> play .)
    RETURN          reduce using rule 43 (estatuto -> play .)
    WHILE           reduce using rule 43 (estatuto -> play .)
    PLAY            reduce using rule 43 (estatuto -> play .)
    PRINT           reduce using rule 43 (estatuto -> play .)
    CALL            reduce using rule 43 (estatuto -> play .)
    }               reduce using rule 43 (estatuto -> play .)


state 75

    (41) estatuto -> return .

    ID              reduce using rule 41 (estatuto -> return .)
    IF              reduce using rule 41 (estatuto -> return .)
    FOR             reduce using rule 41 (estatuto -> return .)
    RETURN          reduce using rule 41 (estatuto -> return .)
    WHILE           reduce using rule 41 (estatuto -> return .)
    PLAY            reduce using rule 41 (estatuto -> return .)
    PRINT           reduce using rule 41 (estatuto -> return .)
    CALL            reduce using rule 41 (estatuto -> return .)
    }               reduce using rule 41 (estatuto -> return .)


state 76

    (56) for -> FOR . ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20

    (               shift and go to state 97


state 77

    (46) asignacion -> ID . asiglista = neur8 expresion ;
    (48) asiglista -> . empty
    (49) asiglista -> . accesoVarDim
    (146) empty -> .
    (121) accesoVarDim -> . [ neur27 nexp ]

    =               reduce using rule 146 (empty -> .)
    [               shift and go to state 100

    accesoVarDim                   shift and go to state 98
    asiglista                      shift and go to state 99
    empty                          shift and go to state 101

state 78

    (50) if -> IF . ( expresion ) neur13 bloque l ; neur15

    (               shift and go to state 102


state 79

    (38) estatuto -> asignacion .

    ID              reduce using rule 38 (estatuto -> asignacion .)
    IF              reduce using rule 38 (estatuto -> asignacion .)
    FOR             reduce using rule 38 (estatuto -> asignacion .)
    RETURN          reduce using rule 38 (estatuto -> asignacion .)
    WHILE           reduce using rule 38 (estatuto -> asignacion .)
    PLAY            reduce using rule 38 (estatuto -> asignacion .)
    PRINT           reduce using rule 38 (estatuto -> asignacion .)
    CALL            reduce using rule 38 (estatuto -> asignacion .)
    }               reduce using rule 38 (estatuto -> asignacion .)


state 80

    (35) bloque -> { i . }

    }               shift and go to state 103


state 81

    (135) callvoidfunc -> CALL . ID neur24 ( s ) neur26 ;

    ID              shift and go to state 104


state 82

    (42) estatuto -> while .

    ID              reduce using rule 42 (estatuto -> while .)
    IF              reduce using rule 42 (estatuto -> while .)
    FOR             reduce using rule 42 (estatuto -> while .)
    RETURN          reduce using rule 42 (estatuto -> while .)
    WHILE           reduce using rule 42 (estatuto -> while .)
    PLAY            reduce using rule 42 (estatuto -> while .)
    PRINT           reduce using rule 42 (estatuto -> while .)
    CALL            reduce using rule 42 (estatuto -> while .)
    }               reduce using rule 42 (estatuto -> while .)


state 83

    (27) params -> tipo ID meterparams h .

    )               reduce using rule 27 (params -> tipo ID meterparams h .)


state 84

    (30) h -> , . params
    (26) params -> . empty
    (27) params -> . tipo ID meterparams h
    (146) empty -> .
    (139) tipo -> . y
    (142) y -> . INT
    (143) y -> . CHAR
    (144) y -> . FLOAT
    (145) y -> . BOOL

    )               reduce using rule 146 (empty -> .)
    INT             shift and go to state 30
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 31
    BOOL            shift and go to state 34

    tipo                           shift and go to state 48
    params                         shift and go to state 105
    y                              shift and go to state 33
    empty                          shift and go to state 50

state 85

    (29) h -> empty .

    )               reduce using rule 29 (h -> empty .)


state 86

    (14) funcion -> FUNC z ID meterfuncion ( params ) f neur23 . bloque
    (35) bloque -> . { i }

    {               shift and go to state 60

    bloque                         shift and go to state 106

state 87

    (138) return -> RETURN ( . expresion ) ;
    (61) expresion -> . m subexpresion
    (62) m -> . empty
    (63) m -> . NOT
    (146) empty -> .

    NOT             shift and go to state 91
    -               reduce using rule 146 (empty -> .)
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    expresion                      shift and go to state 107
    m                              shift and go to state 90
    empty                          shift and go to state 92

state 88

    (124) while -> WHILE ( . neur16 expresion ) neur13 bloque ; neur17
    (125) neur16 -> .

    NOT             reduce using rule 125 (neur16 -> .)
    -               reduce using rule 125 (neur16 -> .)
    (               reduce using rule 125 (neur16 -> .)
    ID              reduce using rule 125 (neur16 -> .)
    CTEE            reduce using rule 125 (neur16 -> .)
    CTEF            reduce using rule 125 (neur16 -> .)
    CTEBOOL         reduce using rule 125 (neur16 -> .)
    CTECHAR         reduce using rule 125 (neur16 -> .)
    CALL            reduce using rule 125 (neur16 -> .)

    neur16                         shift and go to state 108

state 89

    (128) print -> PRINT expresion . ;

    ;               shift and go to state 109


state 90

    (61) expresion -> m . subexpresion
    (64) subexpresion -> . exp neur10 o
    (71) exp -> . nexp p neur12
    (86) nexp -> . termino neur5 q
    (93) termino -> . meteneg factor neur4 n
    (102) meteneg -> . empty
    (103) meteneg -> . -
    (146) empty -> .

    -               shift and go to state 111
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    meteneg                        shift and go to state 110
    nexp                           shift and go to state 112
    subexpresion                   shift and go to state 113
    empty                          shift and go to state 114
    termino                        shift and go to state 115
    exp                            shift and go to state 116

state 91

    (63) m -> NOT .

    -               reduce using rule 63 (m -> NOT .)
    (               reduce using rule 63 (m -> NOT .)
    ID              reduce using rule 63 (m -> NOT .)
    CTEE            reduce using rule 63 (m -> NOT .)
    CTEF            reduce using rule 63 (m -> NOT .)
    CTEBOOL         reduce using rule 63 (m -> NOT .)
    CTECHAR         reduce using rule 63 (m -> NOT .)
    CALL            reduce using rule 63 (m -> NOT .)


state 92

    (62) m -> empty .

    -               reduce using rule 62 (m -> empty .)
    (               reduce using rule 62 (m -> empty .)
    ID              reduce using rule 62 (m -> empty .)
    CTEE            reduce using rule 62 (m -> empty .)
    CTEF            reduce using rule 62 (m -> empty .)
    CTEBOOL         reduce using rule 62 (m -> empty .)
    CTECHAR         reduce using rule 62 (m -> empty .)
    CALL            reduce using rule 62 (m -> empty .)


state 93

    (33) j -> empty .
    (31) i -> empty .

  ! reduce/reduce conflict for } resolved using rule 31 (i -> empty .)
    }               reduce using rule 31 (i -> empty .)

  ! }               [ reduce using rule 33 (j -> empty .) ]


state 94

    (34) j -> i .

    }               reduce using rule 34 (j -> i .)


state 95

    (32) i -> estatuto j .

    }               reduce using rule 32 (i -> estatuto j .)


state 96

    (127) play -> PLAY ( . NOTA , CTEE ) ;

    NOTA            shift and go to state 117


state 97

    (56) for -> FOR ( . asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20
    (46) asignacion -> . ID asiglista = neur8 expresion ;

    ID              shift and go to state 77

    asignacion                     shift and go to state 118

state 98

    (49) asiglista -> accesoVarDim .

    =               reduce using rule 49 (asiglista -> accesoVarDim .)


state 99

    (46) asignacion -> ID asiglista . = neur8 expresion ;

    =               shift and go to state 119


state 100

    (121) accesoVarDim -> [ . neur27 nexp ]
    (122) neur27 -> .

    -               reduce using rule 122 (neur27 -> .)
    (               reduce using rule 122 (neur27 -> .)
    ID              reduce using rule 122 (neur27 -> .)
    CTEE            reduce using rule 122 (neur27 -> .)
    CTEF            reduce using rule 122 (neur27 -> .)
    CTEBOOL         reduce using rule 122 (neur27 -> .)
    CTECHAR         reduce using rule 122 (neur27 -> .)
    CALL            reduce using rule 122 (neur27 -> .)

    neur27                         shift and go to state 120

state 101

    (48) asiglista -> empty .

    =               reduce using rule 48 (asiglista -> empty .)


state 102

    (50) if -> IF ( . expresion ) neur13 bloque l ; neur15
    (61) expresion -> . m subexpresion
    (62) m -> . empty
    (63) m -> . NOT
    (146) empty -> .

    NOT             shift and go to state 91
    -               reduce using rule 146 (empty -> .)
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    expresion                      shift and go to state 121
    m                              shift and go to state 90
    empty                          shift and go to state 92

state 103

    (35) bloque -> { i } .

    ;               reduce using rule 35 (bloque -> { i } .)
    $end            reduce using rule 35 (bloque -> { i } .)
    FUNC            reduce using rule 35 (bloque -> { i } .)
    CANCION         reduce using rule 35 (bloque -> { i } .)
    ELSE            reduce using rule 35 (bloque -> { i } .)


state 104

    (135) callvoidfunc -> CALL ID . neur24 ( s ) neur26 ;
    (136) neur24 -> .

    (               reduce using rule 136 (neur24 -> .)

    neur24                         shift and go to state 122

state 105

    (30) h -> , params .

    )               reduce using rule 30 (h -> , params .)


state 106

    (14) funcion -> FUNC z ID meterfuncion ( params ) f neur23 bloque .

    FUNC            reduce using rule 14 (funcion -> FUNC z ID meterfuncion ( params ) f neur23 bloque .)
    CANCION         reduce using rule 14 (funcion -> FUNC z ID meterfuncion ( params ) f neur23 bloque .)


state 107

    (138) return -> RETURN ( expresion . ) ;

    )               shift and go to state 123


state 108

    (124) while -> WHILE ( neur16 . expresion ) neur13 bloque ; neur17
    (61) expresion -> . m subexpresion
    (62) m -> . empty
    (63) m -> . NOT
    (146) empty -> .

    NOT             shift and go to state 91
    -               reduce using rule 146 (empty -> .)
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    expresion                      shift and go to state 124
    m                              shift and go to state 90
    empty                          shift and go to state 92

state 109

    (128) print -> PRINT expresion ; .

    ID              reduce using rule 128 (print -> PRINT expresion ; .)
    IF              reduce using rule 128 (print -> PRINT expresion ; .)
    FOR             reduce using rule 128 (print -> PRINT expresion ; .)
    RETURN          reduce using rule 128 (print -> PRINT expresion ; .)
    WHILE           reduce using rule 128 (print -> PRINT expresion ; .)
    PLAY            reduce using rule 128 (print -> PRINT expresion ; .)
    PRINT           reduce using rule 128 (print -> PRINT expresion ; .)
    CALL            reduce using rule 128 (print -> PRINT expresion ; .)
    }               reduce using rule 128 (print -> PRINT expresion ; .)


state 110

    (93) termino -> meteneg . factor neur4 n
    (100) factor -> . ( neur6 expresion ) neur7
    (101) factor -> . varcte
    (106) varcte -> . ID r neurVar
    (107) varcte -> . CTEE neurCteE
    (108) varcte -> . CTEF neurCteF
    (109) varcte -> . CTEBOOL neurCteB
    (110) varcte -> . callreturnfunc
    (111) varcte -> . CTECHAR neurCteCh
    (129) callreturnfunc -> . CALL ID neur24 ( s ) neur26 ;

    (               shift and go to state 126
    ID              shift and go to state 131
    CTEE            shift and go to state 134
    CTEF            shift and go to state 133
    CTEBOOL         shift and go to state 132
    CTECHAR         shift and go to state 130
    CALL            shift and go to state 129

    varcte                         shift and go to state 125
    callreturnfunc                 shift and go to state 127
    factor                         shift and go to state 128

state 111

    (103) meteneg -> - .

    (               reduce using rule 103 (meteneg -> - .)
    ID              reduce using rule 103 (meteneg -> - .)
    CTEE            reduce using rule 103 (meteneg -> - .)
    CTEF            reduce using rule 103 (meteneg -> - .)
    CTEBOOL         reduce using rule 103 (meteneg -> - .)
    CTECHAR         reduce using rule 103 (meteneg -> - .)
    CALL            reduce using rule 103 (meteneg -> - .)


state 112

    (71) exp -> nexp . p neur12
    (73) p -> . empty
    (74) p -> . EQ neur11_1 nexp
    (75) p -> . NOTEQ neur11_2 nexp
    (76) p -> . > neur11_3 nexp
    (77) p -> . < neur11_4 nexp
    (78) p -> . MTHANEQ neur11_5 nexp
    (79) p -> . LTHANEQ neur11_6 nexp
    (146) empty -> .

    EQ              shift and go to state 139
    NOTEQ           shift and go to state 138
    >               shift and go to state 142
    <               shift and go to state 140
    MTHANEQ         shift and go to state 135
    LTHANEQ         shift and go to state 137
    AND             reduce using rule 146 (empty -> .)
    OR              reduce using rule 146 (empty -> .)
    ;               reduce using rule 146 (empty -> .)
    )               reduce using rule 146 (empty -> .)
    ,               reduce using rule 146 (empty -> .)

    p                              shift and go to state 136
    empty                          shift and go to state 141

state 113

    (61) expresion -> m subexpresion .

    )               reduce using rule 61 (expresion -> m subexpresion .)
    ,               reduce using rule 61 (expresion -> m subexpresion .)
    ;               reduce using rule 61 (expresion -> m subexpresion .)


state 114

    (102) meteneg -> empty .

    (               reduce using rule 102 (meteneg -> empty .)
    ID              reduce using rule 102 (meteneg -> empty .)
    CTEE            reduce using rule 102 (meteneg -> empty .)
    CTEF            reduce using rule 102 (meteneg -> empty .)
    CTEBOOL         reduce using rule 102 (meteneg -> empty .)
    CTECHAR         reduce using rule 102 (meteneg -> empty .)
    CALL            reduce using rule 102 (meteneg -> empty .)


state 115

    (86) nexp -> termino . neur5 q
    (87) neur5 -> .

    +               reduce using rule 87 (neur5 -> .)
    -               reduce using rule 87 (neur5 -> .)
    EQ              reduce using rule 87 (neur5 -> .)
    NOTEQ           reduce using rule 87 (neur5 -> .)
    >               reduce using rule 87 (neur5 -> .)
    <               reduce using rule 87 (neur5 -> .)
    MTHANEQ         reduce using rule 87 (neur5 -> .)
    LTHANEQ         reduce using rule 87 (neur5 -> .)
    AND             reduce using rule 87 (neur5 -> .)
    OR              reduce using rule 87 (neur5 -> .)
    ;               reduce using rule 87 (neur5 -> .)
    )               reduce using rule 87 (neur5 -> .)
    ,               reduce using rule 87 (neur5 -> .)
    ]               reduce using rule 87 (neur5 -> .)

    neur5                          shift and go to state 143

state 116

    (64) subexpresion -> exp . neur10 o
    (65) neur10 -> .

    AND             reduce using rule 65 (neur10 -> .)
    OR              reduce using rule 65 (neur10 -> .)
    ;               reduce using rule 65 (neur10 -> .)
    )               reduce using rule 65 (neur10 -> .)
    ,               reduce using rule 65 (neur10 -> .)

    neur10                         shift and go to state 144

state 117

    (127) play -> PLAY ( NOTA . , CTEE ) ;

    ,               shift and go to state 145


state 118

    (56) for -> FOR ( asignacion . neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20
    (57) neur18 -> .

    NOT             reduce using rule 57 (neur18 -> .)
    -               reduce using rule 57 (neur18 -> .)
    (               reduce using rule 57 (neur18 -> .)
    ID              reduce using rule 57 (neur18 -> .)
    CTEE            reduce using rule 57 (neur18 -> .)
    CTEF            reduce using rule 57 (neur18 -> .)
    CTEBOOL         reduce using rule 57 (neur18 -> .)
    CTECHAR         reduce using rule 57 (neur18 -> .)
    CALL            reduce using rule 57 (neur18 -> .)

    neur18                         shift and go to state 146

state 119

    (46) asignacion -> ID asiglista = . neur8 expresion ;
    (47) neur8 -> .

    NOT             reduce using rule 47 (neur8 -> .)
    -               reduce using rule 47 (neur8 -> .)
    (               reduce using rule 47 (neur8 -> .)
    ID              reduce using rule 47 (neur8 -> .)
    CTEE            reduce using rule 47 (neur8 -> .)
    CTEF            reduce using rule 47 (neur8 -> .)
    CTEBOOL         reduce using rule 47 (neur8 -> .)
    CTECHAR         reduce using rule 47 (neur8 -> .)
    CALL            reduce using rule 47 (neur8 -> .)

    neur8                          shift and go to state 147

state 120

    (121) accesoVarDim -> [ neur27 . nexp ]
    (86) nexp -> . termino neur5 q
    (93) termino -> . meteneg factor neur4 n
    (102) meteneg -> . empty
    (103) meteneg -> . -
    (146) empty -> .

    -               shift and go to state 111
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    meteneg                        shift and go to state 110
    nexp                           shift and go to state 148
    empty                          shift and go to state 114
    termino                        shift and go to state 115

state 121

    (50) if -> IF ( expresion . ) neur13 bloque l ; neur15

    )               shift and go to state 149


state 122

    (135) callvoidfunc -> CALL ID neur24 . ( s ) neur26 ;

    (               shift and go to state 150


state 123

    (138) return -> RETURN ( expresion ) . ;

    ;               shift and go to state 151


state 124

    (124) while -> WHILE ( neur16 expresion . ) neur13 bloque ; neur17

    )               shift and go to state 152


state 125

    (101) factor -> varcte .

    *               reduce using rule 101 (factor -> varcte .)
    /               reduce using rule 101 (factor -> varcte .)
    +               reduce using rule 101 (factor -> varcte .)
    -               reduce using rule 101 (factor -> varcte .)
    EQ              reduce using rule 101 (factor -> varcte .)
    NOTEQ           reduce using rule 101 (factor -> varcte .)
    >               reduce using rule 101 (factor -> varcte .)
    <               reduce using rule 101 (factor -> varcte .)
    MTHANEQ         reduce using rule 101 (factor -> varcte .)
    LTHANEQ         reduce using rule 101 (factor -> varcte .)
    AND             reduce using rule 101 (factor -> varcte .)
    OR              reduce using rule 101 (factor -> varcte .)
    ;               reduce using rule 101 (factor -> varcte .)
    )               reduce using rule 101 (factor -> varcte .)
    ,               reduce using rule 101 (factor -> varcte .)
    ]               reduce using rule 101 (factor -> varcte .)


state 126

    (100) factor -> ( . neur6 expresion ) neur7
    (104) neur6 -> .

    NOT             reduce using rule 104 (neur6 -> .)
    -               reduce using rule 104 (neur6 -> .)
    (               reduce using rule 104 (neur6 -> .)
    ID              reduce using rule 104 (neur6 -> .)
    CTEE            reduce using rule 104 (neur6 -> .)
    CTEF            reduce using rule 104 (neur6 -> .)
    CTEBOOL         reduce using rule 104 (neur6 -> .)
    CTECHAR         reduce using rule 104 (neur6 -> .)
    CALL            reduce using rule 104 (neur6 -> .)

    neur6                          shift and go to state 153

state 127

    (110) varcte -> callreturnfunc .

    *               reduce using rule 110 (varcte -> callreturnfunc .)
    /               reduce using rule 110 (varcte -> callreturnfunc .)
    +               reduce using rule 110 (varcte -> callreturnfunc .)
    -               reduce using rule 110 (varcte -> callreturnfunc .)
    EQ              reduce using rule 110 (varcte -> callreturnfunc .)
    NOTEQ           reduce using rule 110 (varcte -> callreturnfunc .)
    >               reduce using rule 110 (varcte -> callreturnfunc .)
    <               reduce using rule 110 (varcte -> callreturnfunc .)
    MTHANEQ         reduce using rule 110 (varcte -> callreturnfunc .)
    LTHANEQ         reduce using rule 110 (varcte -> callreturnfunc .)
    AND             reduce using rule 110 (varcte -> callreturnfunc .)
    OR              reduce using rule 110 (varcte -> callreturnfunc .)
    ;               reduce using rule 110 (varcte -> callreturnfunc .)
    )               reduce using rule 110 (varcte -> callreturnfunc .)
    ,               reduce using rule 110 (varcte -> callreturnfunc .)
    ]               reduce using rule 110 (varcte -> callreturnfunc .)


state 128

    (93) termino -> meteneg factor . neur4 n
    (94) neur4 -> .

    *               reduce using rule 94 (neur4 -> .)
    /               reduce using rule 94 (neur4 -> .)
    +               reduce using rule 94 (neur4 -> .)
    -               reduce using rule 94 (neur4 -> .)
    EQ              reduce using rule 94 (neur4 -> .)
    NOTEQ           reduce using rule 94 (neur4 -> .)
    >               reduce using rule 94 (neur4 -> .)
    <               reduce using rule 94 (neur4 -> .)
    MTHANEQ         reduce using rule 94 (neur4 -> .)
    LTHANEQ         reduce using rule 94 (neur4 -> .)
    AND             reduce using rule 94 (neur4 -> .)
    OR              reduce using rule 94 (neur4 -> .)
    ;               reduce using rule 94 (neur4 -> .)
    )               reduce using rule 94 (neur4 -> .)
    ,               reduce using rule 94 (neur4 -> .)
    ]               reduce using rule 94 (neur4 -> .)

    neur4                          shift and go to state 154

state 129

    (129) callreturnfunc -> CALL . ID neur24 ( s ) neur26 ;

    ID              shift and go to state 155


state 130

    (111) varcte -> CTECHAR . neurCteCh
    (116) neurCteCh -> .

    *               reduce using rule 116 (neurCteCh -> .)
    /               reduce using rule 116 (neurCteCh -> .)
    +               reduce using rule 116 (neurCteCh -> .)
    -               reduce using rule 116 (neurCteCh -> .)
    EQ              reduce using rule 116 (neurCteCh -> .)
    NOTEQ           reduce using rule 116 (neurCteCh -> .)
    >               reduce using rule 116 (neurCteCh -> .)
    <               reduce using rule 116 (neurCteCh -> .)
    MTHANEQ         reduce using rule 116 (neurCteCh -> .)
    LTHANEQ         reduce using rule 116 (neurCteCh -> .)
    AND             reduce using rule 116 (neurCteCh -> .)
    OR              reduce using rule 116 (neurCteCh -> .)
    ;               reduce using rule 116 (neurCteCh -> .)
    )               reduce using rule 116 (neurCteCh -> .)
    ,               reduce using rule 116 (neurCteCh -> .)
    ]               reduce using rule 116 (neurCteCh -> .)

    neurCteCh                      shift and go to state 156

state 131

    (106) varcte -> ID . r neurVar
    (117) r -> . empty
    (118) r -> . oplista
    (146) empty -> .
    (119) oplista -> . accesoVarDim
    (120) oplista -> . length
    (121) accesoVarDim -> . [ neur27 nexp ]
    (123) length -> . . LENGTH ( )

    *               reduce using rule 146 (empty -> .)
    /               reduce using rule 146 (empty -> .)
    +               reduce using rule 146 (empty -> .)
    -               reduce using rule 146 (empty -> .)
    EQ              reduce using rule 146 (empty -> .)
    NOTEQ           reduce using rule 146 (empty -> .)
    >               reduce using rule 146 (empty -> .)
    <               reduce using rule 146 (empty -> .)
    MTHANEQ         reduce using rule 146 (empty -> .)
    LTHANEQ         reduce using rule 146 (empty -> .)
    AND             reduce using rule 146 (empty -> .)
    OR              reduce using rule 146 (empty -> .)
    ;               reduce using rule 146 (empty -> .)
    )               reduce using rule 146 (empty -> .)
    ,               reduce using rule 146 (empty -> .)
    ]               reduce using rule 146 (empty -> .)
    [               shift and go to state 100
    .               shift and go to state 159

    oplista                        shift and go to state 157
    accesoVarDim                   shift and go to state 158
    length                         shift and go to state 160
    r                              shift and go to state 161
    empty                          shift and go to state 162

state 132

    (109) varcte -> CTEBOOL . neurCteB
    (115) neurCteB -> .

    *               reduce using rule 115 (neurCteB -> .)
    /               reduce using rule 115 (neurCteB -> .)
    +               reduce using rule 115 (neurCteB -> .)
    -               reduce using rule 115 (neurCteB -> .)
    EQ              reduce using rule 115 (neurCteB -> .)
    NOTEQ           reduce using rule 115 (neurCteB -> .)
    >               reduce using rule 115 (neurCteB -> .)
    <               reduce using rule 115 (neurCteB -> .)
    MTHANEQ         reduce using rule 115 (neurCteB -> .)
    LTHANEQ         reduce using rule 115 (neurCteB -> .)
    AND             reduce using rule 115 (neurCteB -> .)
    OR              reduce using rule 115 (neurCteB -> .)
    ;               reduce using rule 115 (neurCteB -> .)
    )               reduce using rule 115 (neurCteB -> .)
    ,               reduce using rule 115 (neurCteB -> .)
    ]               reduce using rule 115 (neurCteB -> .)

    neurCteB                       shift and go to state 163

state 133

    (108) varcte -> CTEF . neurCteF
    (114) neurCteF -> .

    *               reduce using rule 114 (neurCteF -> .)
    /               reduce using rule 114 (neurCteF -> .)
    +               reduce using rule 114 (neurCteF -> .)
    -               reduce using rule 114 (neurCteF -> .)
    EQ              reduce using rule 114 (neurCteF -> .)
    NOTEQ           reduce using rule 114 (neurCteF -> .)
    >               reduce using rule 114 (neurCteF -> .)
    <               reduce using rule 114 (neurCteF -> .)
    MTHANEQ         reduce using rule 114 (neurCteF -> .)
    LTHANEQ         reduce using rule 114 (neurCteF -> .)
    AND             reduce using rule 114 (neurCteF -> .)
    OR              reduce using rule 114 (neurCteF -> .)
    ;               reduce using rule 114 (neurCteF -> .)
    )               reduce using rule 114 (neurCteF -> .)
    ,               reduce using rule 114 (neurCteF -> .)
    ]               reduce using rule 114 (neurCteF -> .)

    neurCteF                       shift and go to state 164

state 134

    (107) varcte -> CTEE . neurCteE
    (113) neurCteE -> .

    *               reduce using rule 113 (neurCteE -> .)
    /               reduce using rule 113 (neurCteE -> .)
    +               reduce using rule 113 (neurCteE -> .)
    -               reduce using rule 113 (neurCteE -> .)
    EQ              reduce using rule 113 (neurCteE -> .)
    NOTEQ           reduce using rule 113 (neurCteE -> .)
    >               reduce using rule 113 (neurCteE -> .)
    <               reduce using rule 113 (neurCteE -> .)
    MTHANEQ         reduce using rule 113 (neurCteE -> .)
    LTHANEQ         reduce using rule 113 (neurCteE -> .)
    AND             reduce using rule 113 (neurCteE -> .)
    OR              reduce using rule 113 (neurCteE -> .)
    ;               reduce using rule 113 (neurCteE -> .)
    )               reduce using rule 113 (neurCteE -> .)
    ,               reduce using rule 113 (neurCteE -> .)
    ]               reduce using rule 113 (neurCteE -> .)

    neurCteE                       shift and go to state 165

state 135

    (78) p -> MTHANEQ . neur11_5 nexp
    (84) neur11_5 -> .

    -               reduce using rule 84 (neur11_5 -> .)
    (               reduce using rule 84 (neur11_5 -> .)
    ID              reduce using rule 84 (neur11_5 -> .)
    CTEE            reduce using rule 84 (neur11_5 -> .)
    CTEF            reduce using rule 84 (neur11_5 -> .)
    CTEBOOL         reduce using rule 84 (neur11_5 -> .)
    CTECHAR         reduce using rule 84 (neur11_5 -> .)
    CALL            reduce using rule 84 (neur11_5 -> .)

    neur11_5                       shift and go to state 166

state 136

    (71) exp -> nexp p . neur12
    (72) neur12 -> .

    AND             reduce using rule 72 (neur12 -> .)
    OR              reduce using rule 72 (neur12 -> .)
    ;               reduce using rule 72 (neur12 -> .)
    )               reduce using rule 72 (neur12 -> .)
    ,               reduce using rule 72 (neur12 -> .)

    neur12                         shift and go to state 167

state 137

    (79) p -> LTHANEQ . neur11_6 nexp
    (85) neur11_6 -> .

    -               reduce using rule 85 (neur11_6 -> .)
    (               reduce using rule 85 (neur11_6 -> .)
    ID              reduce using rule 85 (neur11_6 -> .)
    CTEE            reduce using rule 85 (neur11_6 -> .)
    CTEF            reduce using rule 85 (neur11_6 -> .)
    CTEBOOL         reduce using rule 85 (neur11_6 -> .)
    CTECHAR         reduce using rule 85 (neur11_6 -> .)
    CALL            reduce using rule 85 (neur11_6 -> .)

    neur11_6                       shift and go to state 168

state 138

    (75) p -> NOTEQ . neur11_2 nexp
    (81) neur11_2 -> .

    -               reduce using rule 81 (neur11_2 -> .)
    (               reduce using rule 81 (neur11_2 -> .)
    ID              reduce using rule 81 (neur11_2 -> .)
    CTEE            reduce using rule 81 (neur11_2 -> .)
    CTEF            reduce using rule 81 (neur11_2 -> .)
    CTEBOOL         reduce using rule 81 (neur11_2 -> .)
    CTECHAR         reduce using rule 81 (neur11_2 -> .)
    CALL            reduce using rule 81 (neur11_2 -> .)

    neur11_2                       shift and go to state 169

state 139

    (74) p -> EQ . neur11_1 nexp
    (80) neur11_1 -> .

    -               reduce using rule 80 (neur11_1 -> .)
    (               reduce using rule 80 (neur11_1 -> .)
    ID              reduce using rule 80 (neur11_1 -> .)
    CTEE            reduce using rule 80 (neur11_1 -> .)
    CTEF            reduce using rule 80 (neur11_1 -> .)
    CTEBOOL         reduce using rule 80 (neur11_1 -> .)
    CTECHAR         reduce using rule 80 (neur11_1 -> .)
    CALL            reduce using rule 80 (neur11_1 -> .)

    neur11_1                       shift and go to state 170

state 140

    (77) p -> < . neur11_4 nexp
    (83) neur11_4 -> .

    -               reduce using rule 83 (neur11_4 -> .)
    (               reduce using rule 83 (neur11_4 -> .)
    ID              reduce using rule 83 (neur11_4 -> .)
    CTEE            reduce using rule 83 (neur11_4 -> .)
    CTEF            reduce using rule 83 (neur11_4 -> .)
    CTEBOOL         reduce using rule 83 (neur11_4 -> .)
    CTECHAR         reduce using rule 83 (neur11_4 -> .)
    CALL            reduce using rule 83 (neur11_4 -> .)

    neur11_4                       shift and go to state 171

state 141

    (73) p -> empty .

    AND             reduce using rule 73 (p -> empty .)
    OR              reduce using rule 73 (p -> empty .)
    ;               reduce using rule 73 (p -> empty .)
    )               reduce using rule 73 (p -> empty .)
    ,               reduce using rule 73 (p -> empty .)


state 142

    (76) p -> > . neur11_3 nexp
    (82) neur11_3 -> .

    -               reduce using rule 82 (neur11_3 -> .)
    (               reduce using rule 82 (neur11_3 -> .)
    ID              reduce using rule 82 (neur11_3 -> .)
    CTEE            reduce using rule 82 (neur11_3 -> .)
    CTEF            reduce using rule 82 (neur11_3 -> .)
    CTEBOOL         reduce using rule 82 (neur11_3 -> .)
    CTECHAR         reduce using rule 82 (neur11_3 -> .)
    CALL            reduce using rule 82 (neur11_3 -> .)

    neur11_3                       shift and go to state 172

state 143

    (86) nexp -> termino neur5 . q
    (88) q -> . empty
    (89) q -> . + neur3_1 nexp
    (90) q -> . - neur3_2 nexp
    (146) empty -> .

    +               shift and go to state 173
    -               shift and go to state 174
    EQ              reduce using rule 146 (empty -> .)
    NOTEQ           reduce using rule 146 (empty -> .)
    >               reduce using rule 146 (empty -> .)
    <               reduce using rule 146 (empty -> .)
    MTHANEQ         reduce using rule 146 (empty -> .)
    LTHANEQ         reduce using rule 146 (empty -> .)
    AND             reduce using rule 146 (empty -> .)
    OR              reduce using rule 146 (empty -> .)
    ;               reduce using rule 146 (empty -> .)
    )               reduce using rule 146 (empty -> .)
    ,               reduce using rule 146 (empty -> .)
    ]               reduce using rule 146 (empty -> .)

    q                              shift and go to state 175
    empty                          shift and go to state 176

state 144

    (64) subexpresion -> exp neur10 . o
    (66) o -> . empty
    (67) o -> . AND neur9_1 subexpresion
    (68) o -> . OR neur9_2 subexpresion
    (146) empty -> .

    AND             shift and go to state 177
    OR              shift and go to state 179
    ;               reduce using rule 146 (empty -> .)
    )               reduce using rule 146 (empty -> .)
    ,               reduce using rule 146 (empty -> .)

    o                              shift and go to state 178
    empty                          shift and go to state 180

state 145

    (127) play -> PLAY ( NOTA , . CTEE ) ;

    CTEE            shift and go to state 181


state 146

    (56) for -> FOR ( asignacion neur18 . expresion ; neur19 asignacion ) neur21 bloque ; neur20
    (61) expresion -> . m subexpresion
    (62) m -> . empty
    (63) m -> . NOT
    (146) empty -> .

    NOT             shift and go to state 91
    -               reduce using rule 146 (empty -> .)
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    expresion                      shift and go to state 182
    m                              shift and go to state 90
    empty                          shift and go to state 92

state 147

    (46) asignacion -> ID asiglista = neur8 . expresion ;
    (61) expresion -> . m subexpresion
    (62) m -> . empty
    (63) m -> . NOT
    (146) empty -> .

    NOT             shift and go to state 91
    -               reduce using rule 146 (empty -> .)
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    expresion                      shift and go to state 183
    m                              shift and go to state 90
    empty                          shift and go to state 92

state 148

    (121) accesoVarDim -> [ neur27 nexp . ]

    ]               shift and go to state 184


state 149

    (50) if -> IF ( expresion ) . neur13 bloque l ; neur15
    (51) neur13 -> .

    {               reduce using rule 51 (neur13 -> .)

    neur13                         shift and go to state 185

state 150

    (135) callvoidfunc -> CALL ID neur24 ( . s ) neur26 ;
    (130) s -> . empty
    (131) s -> . expresion neur25 t
    (146) empty -> .
    (61) expresion -> . m subexpresion
    (62) m -> . empty
    (63) m -> . NOT

    )               reduce using rule 146 (empty -> .)
    -               reduce using rule 146 (empty -> .)
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)
    NOT             shift and go to state 91

    expresion                      shift and go to state 186
    m                              shift and go to state 90
    s                              shift and go to state 187
    empty                          shift and go to state 188

state 151

    (138) return -> RETURN ( expresion ) ; .

    ID              reduce using rule 138 (return -> RETURN ( expresion ) ; .)
    IF              reduce using rule 138 (return -> RETURN ( expresion ) ; .)
    FOR             reduce using rule 138 (return -> RETURN ( expresion ) ; .)
    RETURN          reduce using rule 138 (return -> RETURN ( expresion ) ; .)
    WHILE           reduce using rule 138 (return -> RETURN ( expresion ) ; .)
    PLAY            reduce using rule 138 (return -> RETURN ( expresion ) ; .)
    PRINT           reduce using rule 138 (return -> RETURN ( expresion ) ; .)
    CALL            reduce using rule 138 (return -> RETURN ( expresion ) ; .)
    }               reduce using rule 138 (return -> RETURN ( expresion ) ; .)


state 152

    (124) while -> WHILE ( neur16 expresion ) . neur13 bloque ; neur17
    (51) neur13 -> .

    {               reduce using rule 51 (neur13 -> .)

    neur13                         shift and go to state 189

state 153

    (100) factor -> ( neur6 . expresion ) neur7
    (61) expresion -> . m subexpresion
    (62) m -> . empty
    (63) m -> . NOT
    (146) empty -> .

    NOT             shift and go to state 91
    -               reduce using rule 146 (empty -> .)
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    expresion                      shift and go to state 190
    m                              shift and go to state 90
    empty                          shift and go to state 92

state 154

    (93) termino -> meteneg factor neur4 . n
    (95) n -> . empty
    (96) n -> . * neur2_1 termino
    (97) n -> . / neur2_2 termino
    (146) empty -> .

    *               shift and go to state 191
    /               shift and go to state 192
    +               reduce using rule 146 (empty -> .)
    -               reduce using rule 146 (empty -> .)
    EQ              reduce using rule 146 (empty -> .)
    NOTEQ           reduce using rule 146 (empty -> .)
    >               reduce using rule 146 (empty -> .)
    <               reduce using rule 146 (empty -> .)
    MTHANEQ         reduce using rule 146 (empty -> .)
    LTHANEQ         reduce using rule 146 (empty -> .)
    AND             reduce using rule 146 (empty -> .)
    OR              reduce using rule 146 (empty -> .)
    ;               reduce using rule 146 (empty -> .)
    )               reduce using rule 146 (empty -> .)
    ,               reduce using rule 146 (empty -> .)
    ]               reduce using rule 146 (empty -> .)

    n                              shift and go to state 193
    empty                          shift and go to state 194

state 155

    (129) callreturnfunc -> CALL ID . neur24 ( s ) neur26 ;
    (136) neur24 -> .

    (               reduce using rule 136 (neur24 -> .)

    neur24                         shift and go to state 195

state 156

    (111) varcte -> CTECHAR neurCteCh .

    *               reduce using rule 111 (varcte -> CTECHAR neurCteCh .)
    /               reduce using rule 111 (varcte -> CTECHAR neurCteCh .)
    +               reduce using rule 111 (varcte -> CTECHAR neurCteCh .)
    -               reduce using rule 111 (varcte -> CTECHAR neurCteCh .)
    EQ              reduce using rule 111 (varcte -> CTECHAR neurCteCh .)
    NOTEQ           reduce using rule 111 (varcte -> CTECHAR neurCteCh .)
    >               reduce using rule 111 (varcte -> CTECHAR neurCteCh .)
    <               reduce using rule 111 (varcte -> CTECHAR neurCteCh .)
    MTHANEQ         reduce using rule 111 (varcte -> CTECHAR neurCteCh .)
    LTHANEQ         reduce using rule 111 (varcte -> CTECHAR neurCteCh .)
    AND             reduce using rule 111 (varcte -> CTECHAR neurCteCh .)
    OR              reduce using rule 111 (varcte -> CTECHAR neurCteCh .)
    ;               reduce using rule 111 (varcte -> CTECHAR neurCteCh .)
    )               reduce using rule 111 (varcte -> CTECHAR neurCteCh .)
    ,               reduce using rule 111 (varcte -> CTECHAR neurCteCh .)
    ]               reduce using rule 111 (varcte -> CTECHAR neurCteCh .)


state 157

    (118) r -> oplista .

    *               reduce using rule 118 (r -> oplista .)
    /               reduce using rule 118 (r -> oplista .)
    +               reduce using rule 118 (r -> oplista .)
    -               reduce using rule 118 (r -> oplista .)
    EQ              reduce using rule 118 (r -> oplista .)
    NOTEQ           reduce using rule 118 (r -> oplista .)
    >               reduce using rule 118 (r -> oplista .)
    <               reduce using rule 118 (r -> oplista .)
    MTHANEQ         reduce using rule 118 (r -> oplista .)
    LTHANEQ         reduce using rule 118 (r -> oplista .)
    AND             reduce using rule 118 (r -> oplista .)
    OR              reduce using rule 118 (r -> oplista .)
    ;               reduce using rule 118 (r -> oplista .)
    )               reduce using rule 118 (r -> oplista .)
    ,               reduce using rule 118 (r -> oplista .)
    ]               reduce using rule 118 (r -> oplista .)


state 158

    (119) oplista -> accesoVarDim .

    *               reduce using rule 119 (oplista -> accesoVarDim .)
    /               reduce using rule 119 (oplista -> accesoVarDim .)
    +               reduce using rule 119 (oplista -> accesoVarDim .)
    -               reduce using rule 119 (oplista -> accesoVarDim .)
    EQ              reduce using rule 119 (oplista -> accesoVarDim .)
    NOTEQ           reduce using rule 119 (oplista -> accesoVarDim .)
    >               reduce using rule 119 (oplista -> accesoVarDim .)
    <               reduce using rule 119 (oplista -> accesoVarDim .)
    MTHANEQ         reduce using rule 119 (oplista -> accesoVarDim .)
    LTHANEQ         reduce using rule 119 (oplista -> accesoVarDim .)
    AND             reduce using rule 119 (oplista -> accesoVarDim .)
    OR              reduce using rule 119 (oplista -> accesoVarDim .)
    ;               reduce using rule 119 (oplista -> accesoVarDim .)
    )               reduce using rule 119 (oplista -> accesoVarDim .)
    ,               reduce using rule 119 (oplista -> accesoVarDim .)
    ]               reduce using rule 119 (oplista -> accesoVarDim .)


state 159

    (123) length -> . . LENGTH ( )

    LENGTH          shift and go to state 196


state 160

    (120) oplista -> length .

    *               reduce using rule 120 (oplista -> length .)
    /               reduce using rule 120 (oplista -> length .)
    +               reduce using rule 120 (oplista -> length .)
    -               reduce using rule 120 (oplista -> length .)
    EQ              reduce using rule 120 (oplista -> length .)
    NOTEQ           reduce using rule 120 (oplista -> length .)
    >               reduce using rule 120 (oplista -> length .)
    <               reduce using rule 120 (oplista -> length .)
    MTHANEQ         reduce using rule 120 (oplista -> length .)
    LTHANEQ         reduce using rule 120 (oplista -> length .)
    AND             reduce using rule 120 (oplista -> length .)
    OR              reduce using rule 120 (oplista -> length .)
    ;               reduce using rule 120 (oplista -> length .)
    )               reduce using rule 120 (oplista -> length .)
    ,               reduce using rule 120 (oplista -> length .)
    ]               reduce using rule 120 (oplista -> length .)


state 161

    (106) varcte -> ID r . neurVar
    (112) neurVar -> .

    *               reduce using rule 112 (neurVar -> .)
    /               reduce using rule 112 (neurVar -> .)
    +               reduce using rule 112 (neurVar -> .)
    -               reduce using rule 112 (neurVar -> .)
    EQ              reduce using rule 112 (neurVar -> .)
    NOTEQ           reduce using rule 112 (neurVar -> .)
    >               reduce using rule 112 (neurVar -> .)
    <               reduce using rule 112 (neurVar -> .)
    MTHANEQ         reduce using rule 112 (neurVar -> .)
    LTHANEQ         reduce using rule 112 (neurVar -> .)
    AND             reduce using rule 112 (neurVar -> .)
    OR              reduce using rule 112 (neurVar -> .)
    ;               reduce using rule 112 (neurVar -> .)
    )               reduce using rule 112 (neurVar -> .)
    ,               reduce using rule 112 (neurVar -> .)
    ]               reduce using rule 112 (neurVar -> .)

    neurVar                        shift and go to state 197

state 162

    (117) r -> empty .

    *               reduce using rule 117 (r -> empty .)
    /               reduce using rule 117 (r -> empty .)
    +               reduce using rule 117 (r -> empty .)
    -               reduce using rule 117 (r -> empty .)
    EQ              reduce using rule 117 (r -> empty .)
    NOTEQ           reduce using rule 117 (r -> empty .)
    >               reduce using rule 117 (r -> empty .)
    <               reduce using rule 117 (r -> empty .)
    MTHANEQ         reduce using rule 117 (r -> empty .)
    LTHANEQ         reduce using rule 117 (r -> empty .)
    AND             reduce using rule 117 (r -> empty .)
    OR              reduce using rule 117 (r -> empty .)
    ;               reduce using rule 117 (r -> empty .)
    )               reduce using rule 117 (r -> empty .)
    ,               reduce using rule 117 (r -> empty .)
    ]               reduce using rule 117 (r -> empty .)


state 163

    (109) varcte -> CTEBOOL neurCteB .

    *               reduce using rule 109 (varcte -> CTEBOOL neurCteB .)
    /               reduce using rule 109 (varcte -> CTEBOOL neurCteB .)
    +               reduce using rule 109 (varcte -> CTEBOOL neurCteB .)
    -               reduce using rule 109 (varcte -> CTEBOOL neurCteB .)
    EQ              reduce using rule 109 (varcte -> CTEBOOL neurCteB .)
    NOTEQ           reduce using rule 109 (varcte -> CTEBOOL neurCteB .)
    >               reduce using rule 109 (varcte -> CTEBOOL neurCteB .)
    <               reduce using rule 109 (varcte -> CTEBOOL neurCteB .)
    MTHANEQ         reduce using rule 109 (varcte -> CTEBOOL neurCteB .)
    LTHANEQ         reduce using rule 109 (varcte -> CTEBOOL neurCteB .)
    AND             reduce using rule 109 (varcte -> CTEBOOL neurCteB .)
    OR              reduce using rule 109 (varcte -> CTEBOOL neurCteB .)
    ;               reduce using rule 109 (varcte -> CTEBOOL neurCteB .)
    )               reduce using rule 109 (varcte -> CTEBOOL neurCteB .)
    ,               reduce using rule 109 (varcte -> CTEBOOL neurCteB .)
    ]               reduce using rule 109 (varcte -> CTEBOOL neurCteB .)


state 164

    (108) varcte -> CTEF neurCteF .

    *               reduce using rule 108 (varcte -> CTEF neurCteF .)
    /               reduce using rule 108 (varcte -> CTEF neurCteF .)
    +               reduce using rule 108 (varcte -> CTEF neurCteF .)
    -               reduce using rule 108 (varcte -> CTEF neurCteF .)
    EQ              reduce using rule 108 (varcte -> CTEF neurCteF .)
    NOTEQ           reduce using rule 108 (varcte -> CTEF neurCteF .)
    >               reduce using rule 108 (varcte -> CTEF neurCteF .)
    <               reduce using rule 108 (varcte -> CTEF neurCteF .)
    MTHANEQ         reduce using rule 108 (varcte -> CTEF neurCteF .)
    LTHANEQ         reduce using rule 108 (varcte -> CTEF neurCteF .)
    AND             reduce using rule 108 (varcte -> CTEF neurCteF .)
    OR              reduce using rule 108 (varcte -> CTEF neurCteF .)
    ;               reduce using rule 108 (varcte -> CTEF neurCteF .)
    )               reduce using rule 108 (varcte -> CTEF neurCteF .)
    ,               reduce using rule 108 (varcte -> CTEF neurCteF .)
    ]               reduce using rule 108 (varcte -> CTEF neurCteF .)


state 165

    (107) varcte -> CTEE neurCteE .

    *               reduce using rule 107 (varcte -> CTEE neurCteE .)
    /               reduce using rule 107 (varcte -> CTEE neurCteE .)
    +               reduce using rule 107 (varcte -> CTEE neurCteE .)
    -               reduce using rule 107 (varcte -> CTEE neurCteE .)
    EQ              reduce using rule 107 (varcte -> CTEE neurCteE .)
    NOTEQ           reduce using rule 107 (varcte -> CTEE neurCteE .)
    >               reduce using rule 107 (varcte -> CTEE neurCteE .)
    <               reduce using rule 107 (varcte -> CTEE neurCteE .)
    MTHANEQ         reduce using rule 107 (varcte -> CTEE neurCteE .)
    LTHANEQ         reduce using rule 107 (varcte -> CTEE neurCteE .)
    AND             reduce using rule 107 (varcte -> CTEE neurCteE .)
    OR              reduce using rule 107 (varcte -> CTEE neurCteE .)
    ;               reduce using rule 107 (varcte -> CTEE neurCteE .)
    )               reduce using rule 107 (varcte -> CTEE neurCteE .)
    ,               reduce using rule 107 (varcte -> CTEE neurCteE .)
    ]               reduce using rule 107 (varcte -> CTEE neurCteE .)


state 166

    (78) p -> MTHANEQ neur11_5 . nexp
    (86) nexp -> . termino neur5 q
    (93) termino -> . meteneg factor neur4 n
    (102) meteneg -> . empty
    (103) meteneg -> . -
    (146) empty -> .

    -               shift and go to state 111
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    meteneg                        shift and go to state 110
    nexp                           shift and go to state 198
    empty                          shift and go to state 114
    termino                        shift and go to state 115

state 167

    (71) exp -> nexp p neur12 .

    AND             reduce using rule 71 (exp -> nexp p neur12 .)
    OR              reduce using rule 71 (exp -> nexp p neur12 .)
    ;               reduce using rule 71 (exp -> nexp p neur12 .)
    )               reduce using rule 71 (exp -> nexp p neur12 .)
    ,               reduce using rule 71 (exp -> nexp p neur12 .)


state 168

    (79) p -> LTHANEQ neur11_6 . nexp
    (86) nexp -> . termino neur5 q
    (93) termino -> . meteneg factor neur4 n
    (102) meteneg -> . empty
    (103) meteneg -> . -
    (146) empty -> .

    -               shift and go to state 111
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    meteneg                        shift and go to state 110
    nexp                           shift and go to state 199
    empty                          shift and go to state 114
    termino                        shift and go to state 115

state 169

    (75) p -> NOTEQ neur11_2 . nexp
    (86) nexp -> . termino neur5 q
    (93) termino -> . meteneg factor neur4 n
    (102) meteneg -> . empty
    (103) meteneg -> . -
    (146) empty -> .

    -               shift and go to state 111
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    meteneg                        shift and go to state 110
    nexp                           shift and go to state 200
    empty                          shift and go to state 114
    termino                        shift and go to state 115

state 170

    (74) p -> EQ neur11_1 . nexp
    (86) nexp -> . termino neur5 q
    (93) termino -> . meteneg factor neur4 n
    (102) meteneg -> . empty
    (103) meteneg -> . -
    (146) empty -> .

    -               shift and go to state 111
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    meteneg                        shift and go to state 110
    nexp                           shift and go to state 201
    empty                          shift and go to state 114
    termino                        shift and go to state 115

state 171

    (77) p -> < neur11_4 . nexp
    (86) nexp -> . termino neur5 q
    (93) termino -> . meteneg factor neur4 n
    (102) meteneg -> . empty
    (103) meteneg -> . -
    (146) empty -> .

    -               shift and go to state 111
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    meteneg                        shift and go to state 110
    nexp                           shift and go to state 202
    empty                          shift and go to state 114
    termino                        shift and go to state 115

state 172

    (76) p -> > neur11_3 . nexp
    (86) nexp -> . termino neur5 q
    (93) termino -> . meteneg factor neur4 n
    (102) meteneg -> . empty
    (103) meteneg -> . -
    (146) empty -> .

    -               shift and go to state 111
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    meteneg                        shift and go to state 110
    nexp                           shift and go to state 203
    empty                          shift and go to state 114
    termino                        shift and go to state 115

state 173

    (89) q -> + . neur3_1 nexp
    (91) neur3_1 -> .

    -               reduce using rule 91 (neur3_1 -> .)
    (               reduce using rule 91 (neur3_1 -> .)
    ID              reduce using rule 91 (neur3_1 -> .)
    CTEE            reduce using rule 91 (neur3_1 -> .)
    CTEF            reduce using rule 91 (neur3_1 -> .)
    CTEBOOL         reduce using rule 91 (neur3_1 -> .)
    CTECHAR         reduce using rule 91 (neur3_1 -> .)
    CALL            reduce using rule 91 (neur3_1 -> .)

    neur3_1                        shift and go to state 204

state 174

    (90) q -> - . neur3_2 nexp
    (92) neur3_2 -> .

    -               reduce using rule 92 (neur3_2 -> .)
    (               reduce using rule 92 (neur3_2 -> .)
    ID              reduce using rule 92 (neur3_2 -> .)
    CTEE            reduce using rule 92 (neur3_2 -> .)
    CTEF            reduce using rule 92 (neur3_2 -> .)
    CTEBOOL         reduce using rule 92 (neur3_2 -> .)
    CTECHAR         reduce using rule 92 (neur3_2 -> .)
    CALL            reduce using rule 92 (neur3_2 -> .)

    neur3_2                        shift and go to state 205

state 175

    (86) nexp -> termino neur5 q .

    AND             reduce using rule 86 (nexp -> termino neur5 q .)
    OR              reduce using rule 86 (nexp -> termino neur5 q .)
    ;               reduce using rule 86 (nexp -> termino neur5 q .)
    )               reduce using rule 86 (nexp -> termino neur5 q .)
    ,               reduce using rule 86 (nexp -> termino neur5 q .)
    EQ              reduce using rule 86 (nexp -> termino neur5 q .)
    NOTEQ           reduce using rule 86 (nexp -> termino neur5 q .)
    >               reduce using rule 86 (nexp -> termino neur5 q .)
    <               reduce using rule 86 (nexp -> termino neur5 q .)
    MTHANEQ         reduce using rule 86 (nexp -> termino neur5 q .)
    LTHANEQ         reduce using rule 86 (nexp -> termino neur5 q .)
    ]               reduce using rule 86 (nexp -> termino neur5 q .)


state 176

    (88) q -> empty .

    EQ              reduce using rule 88 (q -> empty .)
    NOTEQ           reduce using rule 88 (q -> empty .)
    >               reduce using rule 88 (q -> empty .)
    <               reduce using rule 88 (q -> empty .)
    MTHANEQ         reduce using rule 88 (q -> empty .)
    LTHANEQ         reduce using rule 88 (q -> empty .)
    AND             reduce using rule 88 (q -> empty .)
    OR              reduce using rule 88 (q -> empty .)
    ;               reduce using rule 88 (q -> empty .)
    )               reduce using rule 88 (q -> empty .)
    ,               reduce using rule 88 (q -> empty .)
    ]               reduce using rule 88 (q -> empty .)


state 177

    (67) o -> AND . neur9_1 subexpresion
    (69) neur9_1 -> .

    -               reduce using rule 69 (neur9_1 -> .)
    (               reduce using rule 69 (neur9_1 -> .)
    ID              reduce using rule 69 (neur9_1 -> .)
    CTEE            reduce using rule 69 (neur9_1 -> .)
    CTEF            reduce using rule 69 (neur9_1 -> .)
    CTEBOOL         reduce using rule 69 (neur9_1 -> .)
    CTECHAR         reduce using rule 69 (neur9_1 -> .)
    CALL            reduce using rule 69 (neur9_1 -> .)

    neur9_1                        shift and go to state 206

state 178

    (64) subexpresion -> exp neur10 o .

    ;               reduce using rule 64 (subexpresion -> exp neur10 o .)
    )               reduce using rule 64 (subexpresion -> exp neur10 o .)
    ,               reduce using rule 64 (subexpresion -> exp neur10 o .)


state 179

    (68) o -> OR . neur9_2 subexpresion
    (70) neur9_2 -> .

    -               reduce using rule 70 (neur9_2 -> .)
    (               reduce using rule 70 (neur9_2 -> .)
    ID              reduce using rule 70 (neur9_2 -> .)
    CTEE            reduce using rule 70 (neur9_2 -> .)
    CTEF            reduce using rule 70 (neur9_2 -> .)
    CTEBOOL         reduce using rule 70 (neur9_2 -> .)
    CTECHAR         reduce using rule 70 (neur9_2 -> .)
    CALL            reduce using rule 70 (neur9_2 -> .)

    neur9_2                        shift and go to state 207

state 180

    (66) o -> empty .

    ;               reduce using rule 66 (o -> empty .)
    )               reduce using rule 66 (o -> empty .)
    ,               reduce using rule 66 (o -> empty .)


state 181

    (127) play -> PLAY ( NOTA , CTEE . ) ;

    )               shift and go to state 208


state 182

    (56) for -> FOR ( asignacion neur18 expresion . ; neur19 asignacion ) neur21 bloque ; neur20

    ;               shift and go to state 209


state 183

    (46) asignacion -> ID asiglista = neur8 expresion . ;

    ;               shift and go to state 210


state 184

    (121) accesoVarDim -> [ neur27 nexp ] .

    *               reduce using rule 121 (accesoVarDim -> [ neur27 nexp ] .)
    /               reduce using rule 121 (accesoVarDim -> [ neur27 nexp ] .)
    +               reduce using rule 121 (accesoVarDim -> [ neur27 nexp ] .)
    -               reduce using rule 121 (accesoVarDim -> [ neur27 nexp ] .)
    EQ              reduce using rule 121 (accesoVarDim -> [ neur27 nexp ] .)
    NOTEQ           reduce using rule 121 (accesoVarDim -> [ neur27 nexp ] .)
    >               reduce using rule 121 (accesoVarDim -> [ neur27 nexp ] .)
    <               reduce using rule 121 (accesoVarDim -> [ neur27 nexp ] .)
    MTHANEQ         reduce using rule 121 (accesoVarDim -> [ neur27 nexp ] .)
    LTHANEQ         reduce using rule 121 (accesoVarDim -> [ neur27 nexp ] .)
    AND             reduce using rule 121 (accesoVarDim -> [ neur27 nexp ] .)
    OR              reduce using rule 121 (accesoVarDim -> [ neur27 nexp ] .)
    ;               reduce using rule 121 (accesoVarDim -> [ neur27 nexp ] .)
    )               reduce using rule 121 (accesoVarDim -> [ neur27 nexp ] .)
    ,               reduce using rule 121 (accesoVarDim -> [ neur27 nexp ] .)
    ]               reduce using rule 121 (accesoVarDim -> [ neur27 nexp ] .)
    =               reduce using rule 121 (accesoVarDim -> [ neur27 nexp ] .)


state 185

    (50) if -> IF ( expresion ) neur13 . bloque l ; neur15
    (35) bloque -> . { i }

    {               shift and go to state 60

    bloque                         shift and go to state 211

state 186

    (131) s -> expresion . neur25 t
    (132) neur25 -> .

    ,               reduce using rule 132 (neur25 -> .)
    )               reduce using rule 132 (neur25 -> .)

    neur25                         shift and go to state 212

state 187

    (135) callvoidfunc -> CALL ID neur24 ( s . ) neur26 ;

    )               shift and go to state 213


state 188

    (130) s -> empty .
    (62) m -> empty .

    )               reduce using rule 130 (s -> empty .)
    -               reduce using rule 62 (m -> empty .)
    (               reduce using rule 62 (m -> empty .)
    ID              reduce using rule 62 (m -> empty .)
    CTEE            reduce using rule 62 (m -> empty .)
    CTEF            reduce using rule 62 (m -> empty .)
    CTEBOOL         reduce using rule 62 (m -> empty .)
    CTECHAR         reduce using rule 62 (m -> empty .)
    CALL            reduce using rule 62 (m -> empty .)


state 189

    (124) while -> WHILE ( neur16 expresion ) neur13 . bloque ; neur17
    (35) bloque -> . { i }

    {               shift and go to state 60

    bloque                         shift and go to state 214

state 190

    (100) factor -> ( neur6 expresion . ) neur7

    )               shift and go to state 215


state 191

    (96) n -> * . neur2_1 termino
    (98) neur2_1 -> .

    -               reduce using rule 98 (neur2_1 -> .)
    (               reduce using rule 98 (neur2_1 -> .)
    ID              reduce using rule 98 (neur2_1 -> .)
    CTEE            reduce using rule 98 (neur2_1 -> .)
    CTEF            reduce using rule 98 (neur2_1 -> .)
    CTEBOOL         reduce using rule 98 (neur2_1 -> .)
    CTECHAR         reduce using rule 98 (neur2_1 -> .)
    CALL            reduce using rule 98 (neur2_1 -> .)

    neur2_1                        shift and go to state 216

state 192

    (97) n -> / . neur2_2 termino
    (99) neur2_2 -> .

    -               reduce using rule 99 (neur2_2 -> .)
    (               reduce using rule 99 (neur2_2 -> .)
    ID              reduce using rule 99 (neur2_2 -> .)
    CTEE            reduce using rule 99 (neur2_2 -> .)
    CTEF            reduce using rule 99 (neur2_2 -> .)
    CTEBOOL         reduce using rule 99 (neur2_2 -> .)
    CTECHAR         reduce using rule 99 (neur2_2 -> .)
    CALL            reduce using rule 99 (neur2_2 -> .)

    neur2_2                        shift and go to state 217

state 193

    (93) termino -> meteneg factor neur4 n .

    +               reduce using rule 93 (termino -> meteneg factor neur4 n .)
    -               reduce using rule 93 (termino -> meteneg factor neur4 n .)
    EQ              reduce using rule 93 (termino -> meteneg factor neur4 n .)
    NOTEQ           reduce using rule 93 (termino -> meteneg factor neur4 n .)
    >               reduce using rule 93 (termino -> meteneg factor neur4 n .)
    <               reduce using rule 93 (termino -> meteneg factor neur4 n .)
    MTHANEQ         reduce using rule 93 (termino -> meteneg factor neur4 n .)
    LTHANEQ         reduce using rule 93 (termino -> meteneg factor neur4 n .)
    AND             reduce using rule 93 (termino -> meteneg factor neur4 n .)
    OR              reduce using rule 93 (termino -> meteneg factor neur4 n .)
    ;               reduce using rule 93 (termino -> meteneg factor neur4 n .)
    )               reduce using rule 93 (termino -> meteneg factor neur4 n .)
    ,               reduce using rule 93 (termino -> meteneg factor neur4 n .)
    ]               reduce using rule 93 (termino -> meteneg factor neur4 n .)


state 194

    (95) n -> empty .

    +               reduce using rule 95 (n -> empty .)
    -               reduce using rule 95 (n -> empty .)
    EQ              reduce using rule 95 (n -> empty .)
    NOTEQ           reduce using rule 95 (n -> empty .)
    >               reduce using rule 95 (n -> empty .)
    <               reduce using rule 95 (n -> empty .)
    MTHANEQ         reduce using rule 95 (n -> empty .)
    LTHANEQ         reduce using rule 95 (n -> empty .)
    AND             reduce using rule 95 (n -> empty .)
    OR              reduce using rule 95 (n -> empty .)
    ;               reduce using rule 95 (n -> empty .)
    )               reduce using rule 95 (n -> empty .)
    ,               reduce using rule 95 (n -> empty .)
    ]               reduce using rule 95 (n -> empty .)


state 195

    (129) callreturnfunc -> CALL ID neur24 . ( s ) neur26 ;

    (               shift and go to state 218


state 196

    (123) length -> . LENGTH . ( )

    (               shift and go to state 219


state 197

    (106) varcte -> ID r neurVar .

    *               reduce using rule 106 (varcte -> ID r neurVar .)
    /               reduce using rule 106 (varcte -> ID r neurVar .)
    +               reduce using rule 106 (varcte -> ID r neurVar .)
    -               reduce using rule 106 (varcte -> ID r neurVar .)
    EQ              reduce using rule 106 (varcte -> ID r neurVar .)
    NOTEQ           reduce using rule 106 (varcte -> ID r neurVar .)
    >               reduce using rule 106 (varcte -> ID r neurVar .)
    <               reduce using rule 106 (varcte -> ID r neurVar .)
    MTHANEQ         reduce using rule 106 (varcte -> ID r neurVar .)
    LTHANEQ         reduce using rule 106 (varcte -> ID r neurVar .)
    AND             reduce using rule 106 (varcte -> ID r neurVar .)
    OR              reduce using rule 106 (varcte -> ID r neurVar .)
    ;               reduce using rule 106 (varcte -> ID r neurVar .)
    )               reduce using rule 106 (varcte -> ID r neurVar .)
    ,               reduce using rule 106 (varcte -> ID r neurVar .)
    ]               reduce using rule 106 (varcte -> ID r neurVar .)


state 198

    (78) p -> MTHANEQ neur11_5 nexp .

    AND             reduce using rule 78 (p -> MTHANEQ neur11_5 nexp .)
    OR              reduce using rule 78 (p -> MTHANEQ neur11_5 nexp .)
    ;               reduce using rule 78 (p -> MTHANEQ neur11_5 nexp .)
    )               reduce using rule 78 (p -> MTHANEQ neur11_5 nexp .)
    ,               reduce using rule 78 (p -> MTHANEQ neur11_5 nexp .)


state 199

    (79) p -> LTHANEQ neur11_6 nexp .

    AND             reduce using rule 79 (p -> LTHANEQ neur11_6 nexp .)
    OR              reduce using rule 79 (p -> LTHANEQ neur11_6 nexp .)
    ;               reduce using rule 79 (p -> LTHANEQ neur11_6 nexp .)
    )               reduce using rule 79 (p -> LTHANEQ neur11_6 nexp .)
    ,               reduce using rule 79 (p -> LTHANEQ neur11_6 nexp .)


state 200

    (75) p -> NOTEQ neur11_2 nexp .

    AND             reduce using rule 75 (p -> NOTEQ neur11_2 nexp .)
    OR              reduce using rule 75 (p -> NOTEQ neur11_2 nexp .)
    ;               reduce using rule 75 (p -> NOTEQ neur11_2 nexp .)
    )               reduce using rule 75 (p -> NOTEQ neur11_2 nexp .)
    ,               reduce using rule 75 (p -> NOTEQ neur11_2 nexp .)


state 201

    (74) p -> EQ neur11_1 nexp .

    AND             reduce using rule 74 (p -> EQ neur11_1 nexp .)
    OR              reduce using rule 74 (p -> EQ neur11_1 nexp .)
    ;               reduce using rule 74 (p -> EQ neur11_1 nexp .)
    )               reduce using rule 74 (p -> EQ neur11_1 nexp .)
    ,               reduce using rule 74 (p -> EQ neur11_1 nexp .)


state 202

    (77) p -> < neur11_4 nexp .

    AND             reduce using rule 77 (p -> < neur11_4 nexp .)
    OR              reduce using rule 77 (p -> < neur11_4 nexp .)
    ;               reduce using rule 77 (p -> < neur11_4 nexp .)
    )               reduce using rule 77 (p -> < neur11_4 nexp .)
    ,               reduce using rule 77 (p -> < neur11_4 nexp .)


state 203

    (76) p -> > neur11_3 nexp .

    AND             reduce using rule 76 (p -> > neur11_3 nexp .)
    OR              reduce using rule 76 (p -> > neur11_3 nexp .)
    ;               reduce using rule 76 (p -> > neur11_3 nexp .)
    )               reduce using rule 76 (p -> > neur11_3 nexp .)
    ,               reduce using rule 76 (p -> > neur11_3 nexp .)


state 204

    (89) q -> + neur3_1 . nexp
    (86) nexp -> . termino neur5 q
    (93) termino -> . meteneg factor neur4 n
    (102) meteneg -> . empty
    (103) meteneg -> . -
    (146) empty -> .

    -               shift and go to state 111
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    meteneg                        shift and go to state 110
    nexp                           shift and go to state 220
    empty                          shift and go to state 114
    termino                        shift and go to state 115

state 205

    (90) q -> - neur3_2 . nexp
    (86) nexp -> . termino neur5 q
    (93) termino -> . meteneg factor neur4 n
    (102) meteneg -> . empty
    (103) meteneg -> . -
    (146) empty -> .

    -               shift and go to state 111
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    meteneg                        shift and go to state 110
    nexp                           shift and go to state 221
    empty                          shift and go to state 114
    termino                        shift and go to state 115

state 206

    (67) o -> AND neur9_1 . subexpresion
    (64) subexpresion -> . exp neur10 o
    (71) exp -> . nexp p neur12
    (86) nexp -> . termino neur5 q
    (93) termino -> . meteneg factor neur4 n
    (102) meteneg -> . empty
    (103) meteneg -> . -
    (146) empty -> .

    -               shift and go to state 111
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    meteneg                        shift and go to state 110
    nexp                           shift and go to state 112
    subexpresion                   shift and go to state 222
    empty                          shift and go to state 114
    termino                        shift and go to state 115
    exp                            shift and go to state 116

state 207

    (68) o -> OR neur9_2 . subexpresion
    (64) subexpresion -> . exp neur10 o
    (71) exp -> . nexp p neur12
    (86) nexp -> . termino neur5 q
    (93) termino -> . meteneg factor neur4 n
    (102) meteneg -> . empty
    (103) meteneg -> . -
    (146) empty -> .

    -               shift and go to state 111
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    meteneg                        shift and go to state 110
    nexp                           shift and go to state 112
    empty                          shift and go to state 114
    subexpresion                   shift and go to state 223
    termino                        shift and go to state 115
    exp                            shift and go to state 116

state 208

    (127) play -> PLAY ( NOTA , CTEE ) . ;

    ;               shift and go to state 224


state 209

    (56) for -> FOR ( asignacion neur18 expresion ; . neur19 asignacion ) neur21 bloque ; neur20
    (58) neur19 -> .

    ID              reduce using rule 58 (neur19 -> .)

    neur19                         shift and go to state 225

state 210

    (46) asignacion -> ID asiglista = neur8 expresion ; .

    ID              reduce using rule 46 (asignacion -> ID asiglista = neur8 expresion ; .)
    IF              reduce using rule 46 (asignacion -> ID asiglista = neur8 expresion ; .)
    FOR             reduce using rule 46 (asignacion -> ID asiglista = neur8 expresion ; .)
    RETURN          reduce using rule 46 (asignacion -> ID asiglista = neur8 expresion ; .)
    WHILE           reduce using rule 46 (asignacion -> ID asiglista = neur8 expresion ; .)
    PLAY            reduce using rule 46 (asignacion -> ID asiglista = neur8 expresion ; .)
    PRINT           reduce using rule 46 (asignacion -> ID asiglista = neur8 expresion ; .)
    CALL            reduce using rule 46 (asignacion -> ID asiglista = neur8 expresion ; .)
    }               reduce using rule 46 (asignacion -> ID asiglista = neur8 expresion ; .)
    )               reduce using rule 46 (asignacion -> ID asiglista = neur8 expresion ; .)
    NOT             reduce using rule 46 (asignacion -> ID asiglista = neur8 expresion ; .)
    -               reduce using rule 46 (asignacion -> ID asiglista = neur8 expresion ; .)
    (               reduce using rule 46 (asignacion -> ID asiglista = neur8 expresion ; .)
    CTEE            reduce using rule 46 (asignacion -> ID asiglista = neur8 expresion ; .)
    CTEF            reduce using rule 46 (asignacion -> ID asiglista = neur8 expresion ; .)
    CTEBOOL         reduce using rule 46 (asignacion -> ID asiglista = neur8 expresion ; .)
    CTECHAR         reduce using rule 46 (asignacion -> ID asiglista = neur8 expresion ; .)


state 211

    (50) if -> IF ( expresion ) neur13 bloque . l ; neur15
    (52) l -> . empty
    (53) l -> . ELSE neur14 bloque
    (146) empty -> .

    ELSE            shift and go to state 227
    ;               reduce using rule 146 (empty -> .)

    l                              shift and go to state 226
    empty                          shift and go to state 228

state 212

    (131) s -> expresion neur25 . t
    (133) t -> . empty
    (134) t -> . , s
    (146) empty -> .

    ,               shift and go to state 229
    )               reduce using rule 146 (empty -> .)

    t                              shift and go to state 230
    empty                          shift and go to state 231

state 213

    (135) callvoidfunc -> CALL ID neur24 ( s ) . neur26 ;
    (137) neur26 -> .

    ;               reduce using rule 137 (neur26 -> .)

    neur26                         shift and go to state 232

state 214

    (124) while -> WHILE ( neur16 expresion ) neur13 bloque . ; neur17

    ;               shift and go to state 233


state 215

    (100) factor -> ( neur6 expresion ) . neur7
    (105) neur7 -> .

    *               reduce using rule 105 (neur7 -> .)
    /               reduce using rule 105 (neur7 -> .)
    +               reduce using rule 105 (neur7 -> .)
    -               reduce using rule 105 (neur7 -> .)
    EQ              reduce using rule 105 (neur7 -> .)
    NOTEQ           reduce using rule 105 (neur7 -> .)
    >               reduce using rule 105 (neur7 -> .)
    <               reduce using rule 105 (neur7 -> .)
    MTHANEQ         reduce using rule 105 (neur7 -> .)
    LTHANEQ         reduce using rule 105 (neur7 -> .)
    AND             reduce using rule 105 (neur7 -> .)
    OR              reduce using rule 105 (neur7 -> .)
    ;               reduce using rule 105 (neur7 -> .)
    )               reduce using rule 105 (neur7 -> .)
    ,               reduce using rule 105 (neur7 -> .)
    ]               reduce using rule 105 (neur7 -> .)

    neur7                          shift and go to state 234

state 216

    (96) n -> * neur2_1 . termino
    (93) termino -> . meteneg factor neur4 n
    (102) meteneg -> . empty
    (103) meteneg -> . -
    (146) empty -> .

    -               shift and go to state 111
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    meteneg                        shift and go to state 110
    termino                        shift and go to state 235
    empty                          shift and go to state 114

state 217

    (97) n -> / neur2_2 . termino
    (93) termino -> . meteneg factor neur4 n
    (102) meteneg -> . empty
    (103) meteneg -> . -
    (146) empty -> .

    -               shift and go to state 111
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)

    meteneg                        shift and go to state 110
    termino                        shift and go to state 236
    empty                          shift and go to state 114

state 218

    (129) callreturnfunc -> CALL ID neur24 ( . s ) neur26 ;
    (130) s -> . empty
    (131) s -> . expresion neur25 t
    (146) empty -> .
    (61) expresion -> . m subexpresion
    (62) m -> . empty
    (63) m -> . NOT

    )               reduce using rule 146 (empty -> .)
    -               reduce using rule 146 (empty -> .)
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)
    NOT             shift and go to state 91

    expresion                      shift and go to state 186
    m                              shift and go to state 90
    s                              shift and go to state 237
    empty                          shift and go to state 188

state 219

    (123) length -> . LENGTH ( . )

    )               shift and go to state 238


state 220

    (89) q -> + neur3_1 nexp .

    EQ              reduce using rule 89 (q -> + neur3_1 nexp .)
    NOTEQ           reduce using rule 89 (q -> + neur3_1 nexp .)
    >               reduce using rule 89 (q -> + neur3_1 nexp .)
    <               reduce using rule 89 (q -> + neur3_1 nexp .)
    MTHANEQ         reduce using rule 89 (q -> + neur3_1 nexp .)
    LTHANEQ         reduce using rule 89 (q -> + neur3_1 nexp .)
    AND             reduce using rule 89 (q -> + neur3_1 nexp .)
    OR              reduce using rule 89 (q -> + neur3_1 nexp .)
    ;               reduce using rule 89 (q -> + neur3_1 nexp .)
    )               reduce using rule 89 (q -> + neur3_1 nexp .)
    ,               reduce using rule 89 (q -> + neur3_1 nexp .)
    ]               reduce using rule 89 (q -> + neur3_1 nexp .)


state 221

    (90) q -> - neur3_2 nexp .

    EQ              reduce using rule 90 (q -> - neur3_2 nexp .)
    NOTEQ           reduce using rule 90 (q -> - neur3_2 nexp .)
    >               reduce using rule 90 (q -> - neur3_2 nexp .)
    <               reduce using rule 90 (q -> - neur3_2 nexp .)
    MTHANEQ         reduce using rule 90 (q -> - neur3_2 nexp .)
    LTHANEQ         reduce using rule 90 (q -> - neur3_2 nexp .)
    AND             reduce using rule 90 (q -> - neur3_2 nexp .)
    OR              reduce using rule 90 (q -> - neur3_2 nexp .)
    ;               reduce using rule 90 (q -> - neur3_2 nexp .)
    )               reduce using rule 90 (q -> - neur3_2 nexp .)
    ,               reduce using rule 90 (q -> - neur3_2 nexp .)
    ]               reduce using rule 90 (q -> - neur3_2 nexp .)


state 222

    (67) o -> AND neur9_1 subexpresion .

    ;               reduce using rule 67 (o -> AND neur9_1 subexpresion .)
    )               reduce using rule 67 (o -> AND neur9_1 subexpresion .)
    ,               reduce using rule 67 (o -> AND neur9_1 subexpresion .)


state 223

    (68) o -> OR neur9_2 subexpresion .

    ;               reduce using rule 68 (o -> OR neur9_2 subexpresion .)
    )               reduce using rule 68 (o -> OR neur9_2 subexpresion .)
    ,               reduce using rule 68 (o -> OR neur9_2 subexpresion .)


state 224

    (127) play -> PLAY ( NOTA , CTEE ) ; .

    ID              reduce using rule 127 (play -> PLAY ( NOTA , CTEE ) ; .)
    IF              reduce using rule 127 (play -> PLAY ( NOTA , CTEE ) ; .)
    FOR             reduce using rule 127 (play -> PLAY ( NOTA , CTEE ) ; .)
    RETURN          reduce using rule 127 (play -> PLAY ( NOTA , CTEE ) ; .)
    WHILE           reduce using rule 127 (play -> PLAY ( NOTA , CTEE ) ; .)
    PLAY            reduce using rule 127 (play -> PLAY ( NOTA , CTEE ) ; .)
    PRINT           reduce using rule 127 (play -> PLAY ( NOTA , CTEE ) ; .)
    CALL            reduce using rule 127 (play -> PLAY ( NOTA , CTEE ) ; .)
    }               reduce using rule 127 (play -> PLAY ( NOTA , CTEE ) ; .)


state 225

    (56) for -> FOR ( asignacion neur18 expresion ; neur19 . asignacion ) neur21 bloque ; neur20
    (46) asignacion -> . ID asiglista = neur8 expresion ;

    ID              shift and go to state 77

    asignacion                     shift and go to state 239

state 226

    (50) if -> IF ( expresion ) neur13 bloque l . ; neur15

    ;               shift and go to state 240


state 227

    (53) l -> ELSE . neur14 bloque
    (54) neur14 -> .

    {               reduce using rule 54 (neur14 -> .)

    neur14                         shift and go to state 241

state 228

    (52) l -> empty .

    ;               reduce using rule 52 (l -> empty .)


state 229

    (134) t -> , . s
    (130) s -> . empty
    (131) s -> . expresion neur25 t
    (146) empty -> .
    (61) expresion -> . m subexpresion
    (62) m -> . empty
    (63) m -> . NOT

    )               reduce using rule 146 (empty -> .)
    -               reduce using rule 146 (empty -> .)
    (               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    CTEE            reduce using rule 146 (empty -> .)
    CTEF            reduce using rule 146 (empty -> .)
    CTEBOOL         reduce using rule 146 (empty -> .)
    CTECHAR         reduce using rule 146 (empty -> .)
    CALL            reduce using rule 146 (empty -> .)
    NOT             shift and go to state 91

    expresion                      shift and go to state 186
    m                              shift and go to state 90
    s                              shift and go to state 242
    empty                          shift and go to state 188

state 230

    (131) s -> expresion neur25 t .

    )               reduce using rule 131 (s -> expresion neur25 t .)


state 231

    (133) t -> empty .

    )               reduce using rule 133 (t -> empty .)


state 232

    (135) callvoidfunc -> CALL ID neur24 ( s ) neur26 . ;

    ;               shift and go to state 243


state 233

    (124) while -> WHILE ( neur16 expresion ) neur13 bloque ; . neur17
    (126) neur17 -> .

    ID              reduce using rule 126 (neur17 -> .)
    IF              reduce using rule 126 (neur17 -> .)
    FOR             reduce using rule 126 (neur17 -> .)
    RETURN          reduce using rule 126 (neur17 -> .)
    WHILE           reduce using rule 126 (neur17 -> .)
    PLAY            reduce using rule 126 (neur17 -> .)
    PRINT           reduce using rule 126 (neur17 -> .)
    CALL            reduce using rule 126 (neur17 -> .)
    }               reduce using rule 126 (neur17 -> .)

    neur17                         shift and go to state 244

state 234

    (100) factor -> ( neur6 expresion ) neur7 .

    *               reduce using rule 100 (factor -> ( neur6 expresion ) neur7 .)
    /               reduce using rule 100 (factor -> ( neur6 expresion ) neur7 .)
    +               reduce using rule 100 (factor -> ( neur6 expresion ) neur7 .)
    -               reduce using rule 100 (factor -> ( neur6 expresion ) neur7 .)
    EQ              reduce using rule 100 (factor -> ( neur6 expresion ) neur7 .)
    NOTEQ           reduce using rule 100 (factor -> ( neur6 expresion ) neur7 .)
    >               reduce using rule 100 (factor -> ( neur6 expresion ) neur7 .)
    <               reduce using rule 100 (factor -> ( neur6 expresion ) neur7 .)
    MTHANEQ         reduce using rule 100 (factor -> ( neur6 expresion ) neur7 .)
    LTHANEQ         reduce using rule 100 (factor -> ( neur6 expresion ) neur7 .)
    AND             reduce using rule 100 (factor -> ( neur6 expresion ) neur7 .)
    OR              reduce using rule 100 (factor -> ( neur6 expresion ) neur7 .)
    ;               reduce using rule 100 (factor -> ( neur6 expresion ) neur7 .)
    )               reduce using rule 100 (factor -> ( neur6 expresion ) neur7 .)
    ,               reduce using rule 100 (factor -> ( neur6 expresion ) neur7 .)
    ]               reduce using rule 100 (factor -> ( neur6 expresion ) neur7 .)


state 235

    (96) n -> * neur2_1 termino .

    +               reduce using rule 96 (n -> * neur2_1 termino .)
    -               reduce using rule 96 (n -> * neur2_1 termino .)
    EQ              reduce using rule 96 (n -> * neur2_1 termino .)
    NOTEQ           reduce using rule 96 (n -> * neur2_1 termino .)
    >               reduce using rule 96 (n -> * neur2_1 termino .)
    <               reduce using rule 96 (n -> * neur2_1 termino .)
    MTHANEQ         reduce using rule 96 (n -> * neur2_1 termino .)
    LTHANEQ         reduce using rule 96 (n -> * neur2_1 termino .)
    AND             reduce using rule 96 (n -> * neur2_1 termino .)
    OR              reduce using rule 96 (n -> * neur2_1 termino .)
    ;               reduce using rule 96 (n -> * neur2_1 termino .)
    )               reduce using rule 96 (n -> * neur2_1 termino .)
    ,               reduce using rule 96 (n -> * neur2_1 termino .)
    ]               reduce using rule 96 (n -> * neur2_1 termino .)


state 236

    (97) n -> / neur2_2 termino .

    +               reduce using rule 97 (n -> / neur2_2 termino .)
    -               reduce using rule 97 (n -> / neur2_2 termino .)
    EQ              reduce using rule 97 (n -> / neur2_2 termino .)
    NOTEQ           reduce using rule 97 (n -> / neur2_2 termino .)
    >               reduce using rule 97 (n -> / neur2_2 termino .)
    <               reduce using rule 97 (n -> / neur2_2 termino .)
    MTHANEQ         reduce using rule 97 (n -> / neur2_2 termino .)
    LTHANEQ         reduce using rule 97 (n -> / neur2_2 termino .)
    AND             reduce using rule 97 (n -> / neur2_2 termino .)
    OR              reduce using rule 97 (n -> / neur2_2 termino .)
    ;               reduce using rule 97 (n -> / neur2_2 termino .)
    )               reduce using rule 97 (n -> / neur2_2 termino .)
    ,               reduce using rule 97 (n -> / neur2_2 termino .)
    ]               reduce using rule 97 (n -> / neur2_2 termino .)


state 237

    (129) callreturnfunc -> CALL ID neur24 ( s . ) neur26 ;

    )               shift and go to state 245


state 238

    (123) length -> . LENGTH ( ) .

    *               reduce using rule 123 (length -> . LENGTH ( ) .)
    /               reduce using rule 123 (length -> . LENGTH ( ) .)
    +               reduce using rule 123 (length -> . LENGTH ( ) .)
    -               reduce using rule 123 (length -> . LENGTH ( ) .)
    EQ              reduce using rule 123 (length -> . LENGTH ( ) .)
    NOTEQ           reduce using rule 123 (length -> . LENGTH ( ) .)
    >               reduce using rule 123 (length -> . LENGTH ( ) .)
    <               reduce using rule 123 (length -> . LENGTH ( ) .)
    MTHANEQ         reduce using rule 123 (length -> . LENGTH ( ) .)
    LTHANEQ         reduce using rule 123 (length -> . LENGTH ( ) .)
    AND             reduce using rule 123 (length -> . LENGTH ( ) .)
    OR              reduce using rule 123 (length -> . LENGTH ( ) .)
    ;               reduce using rule 123 (length -> . LENGTH ( ) .)
    )               reduce using rule 123 (length -> . LENGTH ( ) .)
    ,               reduce using rule 123 (length -> . LENGTH ( ) .)
    ]               reduce using rule 123 (length -> . LENGTH ( ) .)


state 239

    (56) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion . ) neur21 bloque ; neur20

    )               shift and go to state 246


state 240

    (50) if -> IF ( expresion ) neur13 bloque l ; . neur15
    (55) neur15 -> .

    ID              reduce using rule 55 (neur15 -> .)
    IF              reduce using rule 55 (neur15 -> .)
    FOR             reduce using rule 55 (neur15 -> .)
    RETURN          reduce using rule 55 (neur15 -> .)
    WHILE           reduce using rule 55 (neur15 -> .)
    PLAY            reduce using rule 55 (neur15 -> .)
    PRINT           reduce using rule 55 (neur15 -> .)
    CALL            reduce using rule 55 (neur15 -> .)
    }               reduce using rule 55 (neur15 -> .)

    neur15                         shift and go to state 247

state 241

    (53) l -> ELSE neur14 . bloque
    (35) bloque -> . { i }

    {               shift and go to state 60

    bloque                         shift and go to state 248

state 242

    (134) t -> , s .

    )               reduce using rule 134 (t -> , s .)


state 243

    (135) callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .

    ID              reduce using rule 135 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    IF              reduce using rule 135 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    FOR             reduce using rule 135 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    RETURN          reduce using rule 135 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    WHILE           reduce using rule 135 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    PLAY            reduce using rule 135 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    PRINT           reduce using rule 135 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    CALL            reduce using rule 135 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    }               reduce using rule 135 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)


state 244

    (124) while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .

    ID              reduce using rule 124 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    IF              reduce using rule 124 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    FOR             reduce using rule 124 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    RETURN          reduce using rule 124 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    WHILE           reduce using rule 124 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    PLAY            reduce using rule 124 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    PRINT           reduce using rule 124 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    CALL            reduce using rule 124 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    }               reduce using rule 124 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)


state 245

    (129) callreturnfunc -> CALL ID neur24 ( s ) . neur26 ;
    (137) neur26 -> .

    ;               reduce using rule 137 (neur26 -> .)

    neur26                         shift and go to state 249

state 246

    (56) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) . neur21 bloque ; neur20
    (59) neur21 -> .

    {               reduce using rule 59 (neur21 -> .)

    neur21                         shift and go to state 250

state 247

    (50) if -> IF ( expresion ) neur13 bloque l ; neur15 .

    ID              reduce using rule 50 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    IF              reduce using rule 50 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    FOR             reduce using rule 50 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    RETURN          reduce using rule 50 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    WHILE           reduce using rule 50 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    PLAY            reduce using rule 50 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    PRINT           reduce using rule 50 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    CALL            reduce using rule 50 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    }               reduce using rule 50 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)


state 248

    (53) l -> ELSE neur14 bloque .

    ;               reduce using rule 53 (l -> ELSE neur14 bloque .)


state 249

    (129) callreturnfunc -> CALL ID neur24 ( s ) neur26 . ;

    ;               shift and go to state 251


state 250

    (56) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 . bloque ; neur20
    (35) bloque -> . { i }

    {               shift and go to state 60

    bloque                         shift and go to state 252

state 251

    (129) callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .

    *               reduce using rule 129 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    /               reduce using rule 129 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    +               reduce using rule 129 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    -               reduce using rule 129 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    EQ              reduce using rule 129 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    NOTEQ           reduce using rule 129 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    >               reduce using rule 129 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    <               reduce using rule 129 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    MTHANEQ         reduce using rule 129 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    LTHANEQ         reduce using rule 129 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    AND             reduce using rule 129 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    OR              reduce using rule 129 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    ;               reduce using rule 129 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    )               reduce using rule 129 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    ,               reduce using rule 129 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    ]               reduce using rule 129 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)


state 252

    (56) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque . ; neur20

    ;               shift and go to state 253


state 253

    (56) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; . neur20
    (60) neur20 -> .

    ID              reduce using rule 60 (neur20 -> .)
    IF              reduce using rule 60 (neur20 -> .)
    FOR             reduce using rule 60 (neur20 -> .)
    RETURN          reduce using rule 60 (neur20 -> .)
    WHILE           reduce using rule 60 (neur20 -> .)
    PLAY            reduce using rule 60 (neur20 -> .)
    PRINT           reduce using rule 60 (neur20 -> .)
    CALL            reduce using rule 60 (neur20 -> .)
    }               reduce using rule 60 (neur20 -> .)

    neur20                         shift and go to state 254

state 254

    (56) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .

    ID              reduce using rule 56 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    IF              reduce using rule 56 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    FOR             reduce using rule 56 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    RETURN          reduce using rule 56 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    WHILE           reduce using rule 56 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    PLAY            reduce using rule 56 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    PRINT           reduce using rule 56 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    CALL            reduce using rule 56 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    }               reduce using rule 56 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 10 resolved using rule (a -> empty)
WARNING: rejected rule (b -> empty) in state 10
WARNING: reduce/reduce conflict in state 28 resolved using rule (c -> empty)
WARNING: rejected rule (d -> empty) in state 28
WARNING: reduce/reduce conflict in state 59 resolved using rule (f -> empty)
WARNING: rejected rule (g -> empty) in state 59
WARNING: reduce/reduce conflict in state 93 resolved using rule (i -> empty)
WARNING: rejected rule (j -> empty) in state 93
WARNING: Rule (b -> empty) is never reduced
WARNING: Rule (d -> empty) is never reduced
WARNING: Rule (g -> empty) is never reduced
WARNING: Rule (j -> empty) is never reduced
