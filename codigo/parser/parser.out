Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> creadirprocglobal a neur22 c cancion
Rule 2     creadirprocglobal -> <empty>
Rule 3     a -> empty
Rule 4     a -> vars b
Rule 5     b -> empty
Rule 6     b -> a
Rule 7     neur22 -> <empty>
Rule 8     c -> empty
Rule 9     c -> funcion d
Rule 10    d -> empty
Rule 11    d -> c
Rule 12    vars -> VAR ID : tipo u ;
Rule 13    funcion -> FUNC z ID meterfuncion ( params ) f neur23 bloque
Rule 14    z -> INT
Rule 15    z -> CHAR
Rule 16    z -> FLOAT
Rule 17    z -> BOOL
Rule 18    z -> VOID
Rule 19    meterfuncion -> <empty>
Rule 20    neur23 -> <empty>
Rule 21    f -> empty
Rule 22    f -> vars g
Rule 23    g -> empty
Rule 24    g -> f
Rule 25    params -> empty
Rule 26    params -> tipo ID meterparams h
Rule 27    meterparams -> <empty>
Rule 28    h -> empty
Rule 29    h -> , params
Rule 30    i -> empty
Rule 31    i -> estatuto j
Rule 32    j -> empty
Rule 33    j -> i
Rule 34    bloque -> { i }
Rule 35    cancion -> CANCION ( CTEE ) metercancion f bloque
Rule 36    metercancion -> <empty>
Rule 37    estatuto -> asignacion
Rule 38    estatuto -> if
Rule 39    estatuto -> for
Rule 40    estatuto -> return
Rule 41    estatuto -> while
Rule 42    estatuto -> play
Rule 43    estatuto -> print
Rule 44    estatuto -> callvoidfunc
Rule 45    asignacion -> ID asiglista = neur8 expresion ;
Rule 46    neur8 -> <empty>
Rule 47    asiglista -> empty
Rule 48    asiglista -> accesoVarDim
Rule 49    if -> IF ( expresion ) neur13 bloque l ; neur15
Rule 50    neur13 -> <empty>
Rule 51    l -> empty
Rule 52    l -> ELSE neur14 bloque
Rule 53    neur14 -> <empty>
Rule 54    neur15 -> <empty>
Rule 55    for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20
Rule 56    neur18 -> <empty>
Rule 57    neur19 -> <empty>
Rule 58    neur21 -> <empty>
Rule 59    neur20 -> <empty>
Rule 60    expresion -> m subexpresion
Rule 61    m -> empty
Rule 62    m -> NOT
Rule 63    subexpresion -> exp neur10 o
Rule 64    neur10 -> <empty>
Rule 65    o -> empty
Rule 66    o -> AND neur9_1 subexpresion
Rule 67    o -> OR neur9_2 subexpresion
Rule 68    neur9_1 -> <empty>
Rule 69    neur9_2 -> <empty>
Rule 70    exp -> nexp p neur12
Rule 71    neur12 -> <empty>
Rule 72    p -> empty
Rule 73    p -> EQ neur11_1 nexp
Rule 74    p -> NOTEQ neur11_2 nexp
Rule 75    p -> > neur11_3 nexp
Rule 76    p -> < neur11_4 nexp
Rule 77    p -> MTHANEQ neur11_5 nexp
Rule 78    p -> LTHANEQ neur11_6 nexp
Rule 79    neur11_1 -> <empty>
Rule 80    neur11_2 -> <empty>
Rule 81    neur11_3 -> <empty>
Rule 82    neur11_4 -> <empty>
Rule 83    neur11_5 -> <empty>
Rule 84    neur11_6 -> <empty>
Rule 85    nexp -> termino neur5 q
Rule 86    neur5 -> <empty>
Rule 87    q -> empty
Rule 88    q -> + neur3_1 nexp
Rule 89    q -> - neur3_2 nexp
Rule 90    neur3_1 -> <empty>
Rule 91    neur3_2 -> <empty>
Rule 92    termino -> meteneg factor neur4 n
Rule 93    neur4 -> <empty>
Rule 94    n -> empty
Rule 95    n -> * neur2_1 termino
Rule 96    n -> / neur2_2 termino
Rule 97    neur2_1 -> <empty>
Rule 98    neur2_2 -> <empty>
Rule 99    factor -> ( neur6 expresion ) neur7
Rule 100   factor -> varcte
Rule 101   meteneg -> empty
Rule 102   meteneg -> -
Rule 103   neur6 -> <empty>
Rule 104   neur7 -> <empty>
Rule 105   varcte -> ID r neurVar
Rule 106   varcte -> CTEE neurCteE
Rule 107   varcte -> CTEF neurCteF
Rule 108   varcte -> CTEBOOL neurCteB
Rule 109   varcte -> callreturnfunc
Rule 110   varcte -> CTECHAR neurCteCh
Rule 111   neurVar -> <empty>
Rule 112   neurCteE -> <empty>
Rule 113   neurCteF -> <empty>
Rule 114   neurCteB -> <empty>
Rule 115   neurCteCh -> <empty>
Rule 116   r -> empty
Rule 117   r -> oplista
Rule 118   oplista -> accesoVarDim
Rule 119   oplista -> length
Rule 120   accesoVarDim -> [ neur27 nexp ]
Rule 121   neur27 -> <empty>
Rule 122   length -> . LENGTH ( )
Rule 123   while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17
Rule 124   neur16 -> <empty>
Rule 125   neur17 -> <empty>
Rule 126   play -> PLAY ( NOTA , CTEE ) ;
Rule 127   print -> PRINT expresion ;
Rule 128   callreturnfunc -> CALL ID neur24 ( s ) neur26 ;
Rule 129   s -> empty
Rule 130   s -> expresion neur25 t
Rule 131   neur25 -> <empty>
Rule 132   t -> empty
Rule 133   t -> , s
Rule 134   callvoidfunc -> CALL ID neur24 ( s ) neur26 ;
Rule 135   neur24 -> <empty>
Rule 136   neur26 -> <empty>
Rule 137   return -> RETURN ( expresion ) ;
Rule 138   tipo -> y
Rule 139   u -> empty
Rule 140   u -> LIST ( CTEE )
Rule 141   y -> INT
Rule 142   y -> CHAR
Rule 143   y -> FLOAT
Rule 144   y -> BOOL
Rule 145   empty -> <empty>

Terminals, with rules where they appear

(                    : 13 35 49 55 99 122 123 126 128 134 137 140
)                    : 13 35 49 55 99 122 123 126 128 134 137 140
*                    : 95
+                    : 88
,                    : 29 126 133
-                    : 89 102
.                    : 122
/                    : 96
:                    : 12
;                    : 12 45 49 55 55 123 126 127 128 134 137
<                    : 76
=                    : 45
>                    : 75
AND                  : 66
BOOL                 : 17 144
CALL                 : 128 134
CANCION              : 35
CHAR                 : 15 142
CTEBOOL              : 108
CTECHAR              : 110
CTEE                 : 35 106 126 140
CTEF                 : 107
ELSE                 : 52
EQ                   : 73
FLOAT                : 16 143
FOR                  : 55
FUNC                 : 13
ID                   : 12 13 26 45 105 128 134
IF                   : 49
INT                  : 14 141
LENGTH               : 122
LIST                 : 140
LTHANEQ              : 78
MTHANEQ              : 77
NOT                  : 62
NOTA                 : 126
NOTEQ                : 74
OR                   : 67
PLAY                 : 126
PRINT                : 127
RETURN               : 137
VAR                  : 12
VOID                 : 18
WHILE                : 123
[                    : 120
]                    : 120
error                : 
{                    : 34
}                    : 34

Nonterminals, with rules where they appear

a                    : 1 6
accesoVarDim         : 48 118
asiglista            : 45
asignacion           : 37 55 55
b                    : 4
bloque               : 13 35 49 52 55 123
c                    : 1 11
callreturnfunc       : 109
callvoidfunc         : 44
cancion              : 1
creadirprocglobal    : 1
d                    : 9
empty                : 3 5 8 10 21 23 25 28 30 32 47 51 61 65 72 87 94 101 116 129 132 139
estatuto             : 31
exp                  : 63
expresion            : 45 49 55 99 123 127 130 137
f                    : 13 24 35
factor               : 92
for                  : 39
funcion              : 9
g                    : 22
h                    : 26
i                    : 33 34
if                   : 38
j                    : 31
l                    : 49
length               : 119
m                    : 60
meteneg              : 92
metercancion         : 35
meterfuncion         : 13
meterparams          : 26
n                    : 92
neur10               : 63
neur11_1             : 73
neur11_2             : 74
neur11_3             : 75
neur11_4             : 76
neur11_5             : 77
neur11_6             : 78
neur12               : 70
neur13               : 49 123
neur14               : 52
neur15               : 49
neur16               : 123
neur17               : 123
neur18               : 55
neur19               : 55
neur20               : 55
neur21               : 55
neur22               : 1
neur23               : 13
neur24               : 128 134
neur25               : 130
neur26               : 128 134
neur27               : 120
neur2_1              : 95
neur2_2              : 96
neur3_1              : 88
neur3_2              : 89
neur4                : 92
neur5                : 85
neur6                : 99
neur7                : 99
neur8                : 45
neur9_1              : 66
neur9_2              : 67
neurCteB             : 108
neurCteCh            : 110
neurCteE             : 106
neurCteF             : 107
neurVar              : 105
nexp                 : 70 73 74 75 76 77 78 88 89 120
o                    : 63
oplista              : 117
p                    : 70
params               : 13 29
play                 : 42
print                : 43
programa             : 0
q                    : 85
r                    : 105
return               : 40
s                    : 128 133 134
subexpresion         : 60 66 67
t                    : 130
termino              : 85 95 96
tipo                 : 12 26
u                    : 12
varcte               : 100
vars                 : 4 22
while                : 41
y                    : 138
z                    : 13

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . creadirprocglobal a neur22 c cancion
    (2) creadirprocglobal -> .

    VAR             reduce using rule 2 (creadirprocglobal -> .)
    FUNC            reduce using rule 2 (creadirprocglobal -> .)
    CANCION         reduce using rule 2 (creadirprocglobal -> .)

    creadirprocglobal              shift and go to state 1
    programa                       shift and go to state 2

state 1

    (1) programa -> creadirprocglobal . a neur22 c cancion
    (3) a -> . empty
    (4) a -> . vars b
    (145) empty -> .
    (12) vars -> . VAR ID : tipo u ;

    FUNC            reduce using rule 145 (empty -> .)
    CANCION         reduce using rule 145 (empty -> .)
    VAR             shift and go to state 5

    a                              shift and go to state 3
    vars                           shift and go to state 4
    empty                          shift and go to state 6

state 2

    (0) S' -> programa .



state 3

    (1) programa -> creadirprocglobal a . neur22 c cancion
    (7) neur22 -> .

    FUNC            reduce using rule 7 (neur22 -> .)
    CANCION         reduce using rule 7 (neur22 -> .)

    neur22                         shift and go to state 7

state 4

    (4) a -> vars . b
    (5) b -> . empty
    (6) b -> . a
    (145) empty -> .
    (3) a -> . empty
    (4) a -> . vars b
    (12) vars -> . VAR ID : tipo u ;

    FUNC            reduce using rule 145 (empty -> .)
    CANCION         reduce using rule 145 (empty -> .)
    VAR             shift and go to state 5

    a                              shift and go to state 8
    b                              shift and go to state 9
    vars                           shift and go to state 4
    empty                          shift and go to state 10

state 5

    (12) vars -> VAR . ID : tipo u ;

    ID              shift and go to state 11


state 6

    (3) a -> empty .

    FUNC            reduce using rule 3 (a -> empty .)
    CANCION         reduce using rule 3 (a -> empty .)


state 7

    (1) programa -> creadirprocglobal a neur22 . c cancion
    (8) c -> . empty
    (9) c -> . funcion d
    (145) empty -> .
    (13) funcion -> . FUNC z ID meterfuncion ( params ) f neur23 bloque

    CANCION         reduce using rule 145 (empty -> .)
    FUNC            shift and go to state 13

    c                              shift and go to state 12
    empty                          shift and go to state 14
    funcion                        shift and go to state 15

state 8

    (6) b -> a .

    FUNC            reduce using rule 6 (b -> a .)
    CANCION         reduce using rule 6 (b -> a .)


state 9

    (4) a -> vars b .

    FUNC            reduce using rule 4 (a -> vars b .)
    CANCION         reduce using rule 4 (a -> vars b .)


state 10

    (5) b -> empty .
    (3) a -> empty .

  ! reduce/reduce conflict for FUNC resolved using rule 3 (a -> empty .)
  ! reduce/reduce conflict for CANCION resolved using rule 3 (a -> empty .)
    FUNC            reduce using rule 3 (a -> empty .)
    CANCION         reduce using rule 3 (a -> empty .)

  ! FUNC            [ reduce using rule 5 (b -> empty .) ]
  ! CANCION         [ reduce using rule 5 (b -> empty .) ]


state 11

    (12) vars -> VAR ID . : tipo u ;

    :               shift and go to state 16


state 12

    (1) programa -> creadirprocglobal a neur22 c . cancion
    (35) cancion -> . CANCION ( CTEE ) metercancion f bloque

    CANCION         shift and go to state 18

    cancion                        shift and go to state 17

state 13

    (13) funcion -> FUNC . z ID meterfuncion ( params ) f neur23 bloque
    (14) z -> . INT
    (15) z -> . CHAR
    (16) z -> . FLOAT
    (17) z -> . BOOL
    (18) z -> . VOID

    INT             shift and go to state 22
    CHAR            shift and go to state 21
    FLOAT           shift and go to state 20
    BOOL            shift and go to state 23
    VOID            shift and go to state 19

    z                              shift and go to state 24

state 14

    (8) c -> empty .

    CANCION         reduce using rule 8 (c -> empty .)


state 15

    (9) c -> funcion . d
    (10) d -> . empty
    (11) d -> . c
    (145) empty -> .
    (8) c -> . empty
    (9) c -> . funcion d
    (13) funcion -> . FUNC z ID meterfuncion ( params ) f neur23 bloque

    CANCION         reduce using rule 145 (empty -> .)
    FUNC            shift and go to state 13

    c                              shift and go to state 25
    d                              shift and go to state 26
    empty                          shift and go to state 27
    funcion                        shift and go to state 15

state 16

    (12) vars -> VAR ID : . tipo u ;
    (138) tipo -> . y
    (141) y -> . INT
    (142) y -> . CHAR
    (143) y -> . FLOAT
    (144) y -> . BOOL

    INT             shift and go to state 29
    CHAR            shift and go to state 31
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 33

    y                              shift and go to state 32
    tipo                           shift and go to state 28

state 17

    (1) programa -> creadirprocglobal a neur22 c cancion .

    $end            reduce using rule 1 (programa -> creadirprocglobal a neur22 c cancion .)


state 18

    (35) cancion -> CANCION . ( CTEE ) metercancion f bloque

    (               shift and go to state 34


state 19

    (18) z -> VOID .

    ID              reduce using rule 18 (z -> VOID .)


state 20

    (16) z -> FLOAT .

    ID              reduce using rule 16 (z -> FLOAT .)


state 21

    (15) z -> CHAR .

    ID              reduce using rule 15 (z -> CHAR .)


state 22

    (14) z -> INT .

    ID              reduce using rule 14 (z -> INT .)


state 23

    (17) z -> BOOL .

    ID              reduce using rule 17 (z -> BOOL .)


state 24

    (13) funcion -> FUNC z . ID meterfuncion ( params ) f neur23 bloque

    ID              shift and go to state 35


state 25

    (11) d -> c .

    CANCION         reduce using rule 11 (d -> c .)


state 26

    (9) c -> funcion d .

    CANCION         reduce using rule 9 (c -> funcion d .)


state 27

    (10) d -> empty .
    (8) c -> empty .

  ! reduce/reduce conflict for CANCION resolved using rule 8 (c -> empty .)
    CANCION         reduce using rule 8 (c -> empty .)

  ! CANCION         [ reduce using rule 10 (d -> empty .) ]


state 28

    (12) vars -> VAR ID : tipo . u ;
    (139) u -> . empty
    (140) u -> . LIST ( CTEE )
    (145) empty -> .

    LIST            shift and go to state 36
    ;               reduce using rule 145 (empty -> .)

    u                              shift and go to state 37
    empty                          shift and go to state 38

state 29

    (141) y -> INT .

    ID              reduce using rule 141 (y -> INT .)
    LIST            reduce using rule 141 (y -> INT .)
    ;               reduce using rule 141 (y -> INT .)


state 30

    (143) y -> FLOAT .

    ID              reduce using rule 143 (y -> FLOAT .)
    LIST            reduce using rule 143 (y -> FLOAT .)
    ;               reduce using rule 143 (y -> FLOAT .)


state 31

    (142) y -> CHAR .

    ID              reduce using rule 142 (y -> CHAR .)
    LIST            reduce using rule 142 (y -> CHAR .)
    ;               reduce using rule 142 (y -> CHAR .)


state 32

    (138) tipo -> y .

    LIST            reduce using rule 138 (tipo -> y .)
    ;               reduce using rule 138 (tipo -> y .)
    ID              reduce using rule 138 (tipo -> y .)


state 33

    (144) y -> BOOL .

    ID              reduce using rule 144 (y -> BOOL .)
    LIST            reduce using rule 144 (y -> BOOL .)
    ;               reduce using rule 144 (y -> BOOL .)


state 34

    (35) cancion -> CANCION ( . CTEE ) metercancion f bloque

    CTEE            shift and go to state 39


state 35

    (13) funcion -> FUNC z ID . meterfuncion ( params ) f neur23 bloque
    (19) meterfuncion -> .

    (               reduce using rule 19 (meterfuncion -> .)

    meterfuncion                   shift and go to state 40

state 36

    (140) u -> LIST . ( CTEE )

    (               shift and go to state 41


state 37

    (12) vars -> VAR ID : tipo u . ;

    ;               shift and go to state 42


state 38

    (139) u -> empty .

    ;               reduce using rule 139 (u -> empty .)


state 39

    (35) cancion -> CANCION ( CTEE . ) metercancion f bloque

    )               shift and go to state 43


state 40

    (13) funcion -> FUNC z ID meterfuncion . ( params ) f neur23 bloque

    (               shift and go to state 44


state 41

    (140) u -> LIST ( . CTEE )

    CTEE            shift and go to state 45


state 42

    (12) vars -> VAR ID : tipo u ; .

    VAR             reduce using rule 12 (vars -> VAR ID : tipo u ; .)
    FUNC            reduce using rule 12 (vars -> VAR ID : tipo u ; .)
    CANCION         reduce using rule 12 (vars -> VAR ID : tipo u ; .)
    {               reduce using rule 12 (vars -> VAR ID : tipo u ; .)


state 43

    (35) cancion -> CANCION ( CTEE ) . metercancion f bloque
    (36) metercancion -> .

    VAR             reduce using rule 36 (metercancion -> .)
    {               reduce using rule 36 (metercancion -> .)

    metercancion                   shift and go to state 46

state 44

    (13) funcion -> FUNC z ID meterfuncion ( . params ) f neur23 bloque
    (25) params -> . empty
    (26) params -> . tipo ID meterparams h
    (145) empty -> .
    (138) tipo -> . y
    (141) y -> . INT
    (142) y -> . CHAR
    (143) y -> . FLOAT
    (144) y -> . BOOL

    )               reduce using rule 145 (empty -> .)
    INT             shift and go to state 29
    CHAR            shift and go to state 31
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 33

    tipo                           shift and go to state 47
    params                         shift and go to state 48
    y                              shift and go to state 32
    empty                          shift and go to state 49

state 45

    (140) u -> LIST ( CTEE . )

    )               shift and go to state 50


state 46

    (35) cancion -> CANCION ( CTEE ) metercancion . f bloque
    (21) f -> . empty
    (22) f -> . vars g
    (145) empty -> .
    (12) vars -> . VAR ID : tipo u ;

    {               reduce using rule 145 (empty -> .)
    VAR             shift and go to state 5

    vars                           shift and go to state 51
    f                              shift and go to state 52
    empty                          shift and go to state 53

state 47

    (26) params -> tipo . ID meterparams h

    ID              shift and go to state 54


state 48

    (13) funcion -> FUNC z ID meterfuncion ( params . ) f neur23 bloque

    )               shift and go to state 55


state 49

    (25) params -> empty .

    )               reduce using rule 25 (params -> empty .)


state 50

    (140) u -> LIST ( CTEE ) .

    ;               reduce using rule 140 (u -> LIST ( CTEE ) .)


state 51

    (22) f -> vars . g
    (23) g -> . empty
    (24) g -> . f
    (145) empty -> .
    (21) f -> . empty
    (22) f -> . vars g
    (12) vars -> . VAR ID : tipo u ;

    {               reduce using rule 145 (empty -> .)
    VAR             shift and go to state 5

    g                              shift and go to state 56
    f                              shift and go to state 57
    vars                           shift and go to state 51
    empty                          shift and go to state 58

state 52

    (35) cancion -> CANCION ( CTEE ) metercancion f . bloque
    (34) bloque -> . { i }

    {               shift and go to state 59

    bloque                         shift and go to state 60

state 53

    (21) f -> empty .

    {               reduce using rule 21 (f -> empty .)


state 54

    (26) params -> tipo ID . meterparams h
    (27) meterparams -> .

    ,               reduce using rule 27 (meterparams -> .)
    )               reduce using rule 27 (meterparams -> .)

    meterparams                    shift and go to state 61

state 55

    (13) funcion -> FUNC z ID meterfuncion ( params ) . f neur23 bloque
    (21) f -> . empty
    (22) f -> . vars g
    (145) empty -> .
    (12) vars -> . VAR ID : tipo u ;

    {               reduce using rule 145 (empty -> .)
    VAR             shift and go to state 5

    vars                           shift and go to state 51
    f                              shift and go to state 62
    empty                          shift and go to state 53

state 56

    (22) f -> vars g .

    {               reduce using rule 22 (f -> vars g .)


state 57

    (24) g -> f .

    {               reduce using rule 24 (g -> f .)


state 58

    (23) g -> empty .
    (21) f -> empty .

  ! reduce/reduce conflict for { resolved using rule 21 (f -> empty .)
    {               reduce using rule 21 (f -> empty .)

  ! {               [ reduce using rule 23 (g -> empty .) ]


state 59

    (34) bloque -> { . i }
    (30) i -> . empty
    (31) i -> . estatuto j
    (145) empty -> .
    (37) estatuto -> . asignacion
    (38) estatuto -> . if
    (39) estatuto -> . for
    (40) estatuto -> . return
    (41) estatuto -> . while
    (42) estatuto -> . play
    (43) estatuto -> . print
    (44) estatuto -> . callvoidfunc
    (45) asignacion -> . ID asiglista = neur8 expresion ;
    (49) if -> . IF ( expresion ) neur13 bloque l ; neur15
    (55) for -> . FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20
    (137) return -> . RETURN ( expresion ) ;
    (123) while -> . WHILE ( neur16 expresion ) neur13 bloque ; neur17
    (126) play -> . PLAY ( NOTA , CTEE ) ;
    (127) print -> . PRINT expresion ;
    (134) callvoidfunc -> . CALL ID neur24 ( s ) neur26 ;

    }               reduce using rule 145 (empty -> .)
    ID              shift and go to state 76
    IF              shift and go to state 77
    FOR             shift and go to state 75
    RETURN          shift and go to state 63
    WHILE           shift and go to state 64
    PLAY            shift and go to state 72
    PRINT           shift and go to state 65
    CALL            shift and go to state 80

    if                             shift and go to state 66
    for                            shift and go to state 67
    callvoidfunc                   shift and go to state 68
    estatuto                       shift and go to state 69
    print                          shift and go to state 70
    empty                          shift and go to state 71
    play                           shift and go to state 73
    return                         shift and go to state 74
    asignacion                     shift and go to state 78
    i                              shift and go to state 79
    while                          shift and go to state 81

state 60

    (35) cancion -> CANCION ( CTEE ) metercancion f bloque .

    $end            reduce using rule 35 (cancion -> CANCION ( CTEE ) metercancion f bloque .)


state 61

    (26) params -> tipo ID meterparams . h
    (28) h -> . empty
    (29) h -> . , params
    (145) empty -> .

    ,               shift and go to state 83
    )               reduce using rule 145 (empty -> .)

    h                              shift and go to state 82
    empty                          shift and go to state 84

state 62

    (13) funcion -> FUNC z ID meterfuncion ( params ) f . neur23 bloque
    (20) neur23 -> .

    {               reduce using rule 20 (neur23 -> .)

    neur23                         shift and go to state 85

state 63

    (137) return -> RETURN . ( expresion ) ;

    (               shift and go to state 86


state 64

    (123) while -> WHILE . ( neur16 expresion ) neur13 bloque ; neur17

    (               shift and go to state 87


state 65

    (127) print -> PRINT . expresion ;
    (60) expresion -> . m subexpresion
    (61) m -> . empty
    (62) m -> . NOT
    (145) empty -> .

    NOT             shift and go to state 90
    -               reduce using rule 145 (empty -> .)
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    expresion                      shift and go to state 88
    m                              shift and go to state 89
    empty                          shift and go to state 91

state 66

    (38) estatuto -> if .

    ID              reduce using rule 38 (estatuto -> if .)
    IF              reduce using rule 38 (estatuto -> if .)
    FOR             reduce using rule 38 (estatuto -> if .)
    RETURN          reduce using rule 38 (estatuto -> if .)
    WHILE           reduce using rule 38 (estatuto -> if .)
    PLAY            reduce using rule 38 (estatuto -> if .)
    PRINT           reduce using rule 38 (estatuto -> if .)
    CALL            reduce using rule 38 (estatuto -> if .)
    }               reduce using rule 38 (estatuto -> if .)


state 67

    (39) estatuto -> for .

    ID              reduce using rule 39 (estatuto -> for .)
    IF              reduce using rule 39 (estatuto -> for .)
    FOR             reduce using rule 39 (estatuto -> for .)
    RETURN          reduce using rule 39 (estatuto -> for .)
    WHILE           reduce using rule 39 (estatuto -> for .)
    PLAY            reduce using rule 39 (estatuto -> for .)
    PRINT           reduce using rule 39 (estatuto -> for .)
    CALL            reduce using rule 39 (estatuto -> for .)
    }               reduce using rule 39 (estatuto -> for .)


state 68

    (44) estatuto -> callvoidfunc .

    ID              reduce using rule 44 (estatuto -> callvoidfunc .)
    IF              reduce using rule 44 (estatuto -> callvoidfunc .)
    FOR             reduce using rule 44 (estatuto -> callvoidfunc .)
    RETURN          reduce using rule 44 (estatuto -> callvoidfunc .)
    WHILE           reduce using rule 44 (estatuto -> callvoidfunc .)
    PLAY            reduce using rule 44 (estatuto -> callvoidfunc .)
    PRINT           reduce using rule 44 (estatuto -> callvoidfunc .)
    CALL            reduce using rule 44 (estatuto -> callvoidfunc .)
    }               reduce using rule 44 (estatuto -> callvoidfunc .)


state 69

    (31) i -> estatuto . j
    (32) j -> . empty
    (33) j -> . i
    (145) empty -> .
    (30) i -> . empty
    (31) i -> . estatuto j
    (37) estatuto -> . asignacion
    (38) estatuto -> . if
    (39) estatuto -> . for
    (40) estatuto -> . return
    (41) estatuto -> . while
    (42) estatuto -> . play
    (43) estatuto -> . print
    (44) estatuto -> . callvoidfunc
    (45) asignacion -> . ID asiglista = neur8 expresion ;
    (49) if -> . IF ( expresion ) neur13 bloque l ; neur15
    (55) for -> . FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20
    (137) return -> . RETURN ( expresion ) ;
    (123) while -> . WHILE ( neur16 expresion ) neur13 bloque ; neur17
    (126) play -> . PLAY ( NOTA , CTEE ) ;
    (127) print -> . PRINT expresion ;
    (134) callvoidfunc -> . CALL ID neur24 ( s ) neur26 ;

    }               reduce using rule 145 (empty -> .)
    ID              shift and go to state 76
    IF              shift and go to state 77
    FOR             shift and go to state 75
    RETURN          shift and go to state 63
    WHILE           shift and go to state 64
    PLAY            shift and go to state 72
    PRINT           shift and go to state 65
    CALL            shift and go to state 80

    if                             shift and go to state 66
    for                            shift and go to state 67
    callvoidfunc                   shift and go to state 68
    estatuto                       shift and go to state 69
    print                          shift and go to state 70
    empty                          shift and go to state 92
    play                           shift and go to state 73
    return                         shift and go to state 74
    asignacion                     shift and go to state 78
    i                              shift and go to state 93
    j                              shift and go to state 94
    while                          shift and go to state 81

state 70

    (43) estatuto -> print .

    ID              reduce using rule 43 (estatuto -> print .)
    IF              reduce using rule 43 (estatuto -> print .)
    FOR             reduce using rule 43 (estatuto -> print .)
    RETURN          reduce using rule 43 (estatuto -> print .)
    WHILE           reduce using rule 43 (estatuto -> print .)
    PLAY            reduce using rule 43 (estatuto -> print .)
    PRINT           reduce using rule 43 (estatuto -> print .)
    CALL            reduce using rule 43 (estatuto -> print .)
    }               reduce using rule 43 (estatuto -> print .)


state 71

    (30) i -> empty .

    }               reduce using rule 30 (i -> empty .)


state 72

    (126) play -> PLAY . ( NOTA , CTEE ) ;

    (               shift and go to state 95


state 73

    (42) estatuto -> play .

    ID              reduce using rule 42 (estatuto -> play .)
    IF              reduce using rule 42 (estatuto -> play .)
    FOR             reduce using rule 42 (estatuto -> play .)
    RETURN          reduce using rule 42 (estatuto -> play .)
    WHILE           reduce using rule 42 (estatuto -> play .)
    PLAY            reduce using rule 42 (estatuto -> play .)
    PRINT           reduce using rule 42 (estatuto -> play .)
    CALL            reduce using rule 42 (estatuto -> play .)
    }               reduce using rule 42 (estatuto -> play .)


state 74

    (40) estatuto -> return .

    ID              reduce using rule 40 (estatuto -> return .)
    IF              reduce using rule 40 (estatuto -> return .)
    FOR             reduce using rule 40 (estatuto -> return .)
    RETURN          reduce using rule 40 (estatuto -> return .)
    WHILE           reduce using rule 40 (estatuto -> return .)
    PLAY            reduce using rule 40 (estatuto -> return .)
    PRINT           reduce using rule 40 (estatuto -> return .)
    CALL            reduce using rule 40 (estatuto -> return .)
    }               reduce using rule 40 (estatuto -> return .)


state 75

    (55) for -> FOR . ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20

    (               shift and go to state 96


state 76

    (45) asignacion -> ID . asiglista = neur8 expresion ;
    (47) asiglista -> . empty
    (48) asiglista -> . accesoVarDim
    (145) empty -> .
    (120) accesoVarDim -> . [ neur27 nexp ]

    =               reduce using rule 145 (empty -> .)
    [               shift and go to state 99

    accesoVarDim                   shift and go to state 97
    asiglista                      shift and go to state 98
    empty                          shift and go to state 100

state 77

    (49) if -> IF . ( expresion ) neur13 bloque l ; neur15

    (               shift and go to state 101


state 78

    (37) estatuto -> asignacion .

    ID              reduce using rule 37 (estatuto -> asignacion .)
    IF              reduce using rule 37 (estatuto -> asignacion .)
    FOR             reduce using rule 37 (estatuto -> asignacion .)
    RETURN          reduce using rule 37 (estatuto -> asignacion .)
    WHILE           reduce using rule 37 (estatuto -> asignacion .)
    PLAY            reduce using rule 37 (estatuto -> asignacion .)
    PRINT           reduce using rule 37 (estatuto -> asignacion .)
    CALL            reduce using rule 37 (estatuto -> asignacion .)
    }               reduce using rule 37 (estatuto -> asignacion .)


state 79

    (34) bloque -> { i . }

    }               shift and go to state 102


state 80

    (134) callvoidfunc -> CALL . ID neur24 ( s ) neur26 ;

    ID              shift and go to state 103


state 81

    (41) estatuto -> while .

    ID              reduce using rule 41 (estatuto -> while .)
    IF              reduce using rule 41 (estatuto -> while .)
    FOR             reduce using rule 41 (estatuto -> while .)
    RETURN          reduce using rule 41 (estatuto -> while .)
    WHILE           reduce using rule 41 (estatuto -> while .)
    PLAY            reduce using rule 41 (estatuto -> while .)
    PRINT           reduce using rule 41 (estatuto -> while .)
    CALL            reduce using rule 41 (estatuto -> while .)
    }               reduce using rule 41 (estatuto -> while .)


state 82

    (26) params -> tipo ID meterparams h .

    )               reduce using rule 26 (params -> tipo ID meterparams h .)


state 83

    (29) h -> , . params
    (25) params -> . empty
    (26) params -> . tipo ID meterparams h
    (145) empty -> .
    (138) tipo -> . y
    (141) y -> . INT
    (142) y -> . CHAR
    (143) y -> . FLOAT
    (144) y -> . BOOL

    )               reduce using rule 145 (empty -> .)
    INT             shift and go to state 29
    CHAR            shift and go to state 31
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 33

    tipo                           shift and go to state 47
    params                         shift and go to state 104
    y                              shift and go to state 32
    empty                          shift and go to state 49

state 84

    (28) h -> empty .

    )               reduce using rule 28 (h -> empty .)


state 85

    (13) funcion -> FUNC z ID meterfuncion ( params ) f neur23 . bloque
    (34) bloque -> . { i }

    {               shift and go to state 59

    bloque                         shift and go to state 105

state 86

    (137) return -> RETURN ( . expresion ) ;
    (60) expresion -> . m subexpresion
    (61) m -> . empty
    (62) m -> . NOT
    (145) empty -> .

    NOT             shift and go to state 90
    -               reduce using rule 145 (empty -> .)
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    expresion                      shift and go to state 106
    m                              shift and go to state 89
    empty                          shift and go to state 91

state 87

    (123) while -> WHILE ( . neur16 expresion ) neur13 bloque ; neur17
    (124) neur16 -> .

    NOT             reduce using rule 124 (neur16 -> .)
    -               reduce using rule 124 (neur16 -> .)
    (               reduce using rule 124 (neur16 -> .)
    ID              reduce using rule 124 (neur16 -> .)
    CTEE            reduce using rule 124 (neur16 -> .)
    CTEF            reduce using rule 124 (neur16 -> .)
    CTEBOOL         reduce using rule 124 (neur16 -> .)
    CTECHAR         reduce using rule 124 (neur16 -> .)
    CALL            reduce using rule 124 (neur16 -> .)

    neur16                         shift and go to state 107

state 88

    (127) print -> PRINT expresion . ;

    ;               shift and go to state 108


state 89

    (60) expresion -> m . subexpresion
    (63) subexpresion -> . exp neur10 o
    (70) exp -> . nexp p neur12
    (85) nexp -> . termino neur5 q
    (92) termino -> . meteneg factor neur4 n
    (101) meteneg -> . empty
    (102) meteneg -> . -
    (145) empty -> .

    -               shift and go to state 110
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    meteneg                        shift and go to state 109
    nexp                           shift and go to state 111
    subexpresion                   shift and go to state 112
    empty                          shift and go to state 113
    termino                        shift and go to state 114
    exp                            shift and go to state 115

state 90

    (62) m -> NOT .

    -               reduce using rule 62 (m -> NOT .)
    (               reduce using rule 62 (m -> NOT .)
    ID              reduce using rule 62 (m -> NOT .)
    CTEE            reduce using rule 62 (m -> NOT .)
    CTEF            reduce using rule 62 (m -> NOT .)
    CTEBOOL         reduce using rule 62 (m -> NOT .)
    CTECHAR         reduce using rule 62 (m -> NOT .)
    CALL            reduce using rule 62 (m -> NOT .)


state 91

    (61) m -> empty .

    -               reduce using rule 61 (m -> empty .)
    (               reduce using rule 61 (m -> empty .)
    ID              reduce using rule 61 (m -> empty .)
    CTEE            reduce using rule 61 (m -> empty .)
    CTEF            reduce using rule 61 (m -> empty .)
    CTEBOOL         reduce using rule 61 (m -> empty .)
    CTECHAR         reduce using rule 61 (m -> empty .)
    CALL            reduce using rule 61 (m -> empty .)


state 92

    (32) j -> empty .
    (30) i -> empty .

  ! reduce/reduce conflict for } resolved using rule 30 (i -> empty .)
    }               reduce using rule 30 (i -> empty .)

  ! }               [ reduce using rule 32 (j -> empty .) ]


state 93

    (33) j -> i .

    }               reduce using rule 33 (j -> i .)


state 94

    (31) i -> estatuto j .

    }               reduce using rule 31 (i -> estatuto j .)


state 95

    (126) play -> PLAY ( . NOTA , CTEE ) ;

    NOTA            shift and go to state 116


state 96

    (55) for -> FOR ( . asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20
    (45) asignacion -> . ID asiglista = neur8 expresion ;

    ID              shift and go to state 76

    asignacion                     shift and go to state 117

state 97

    (48) asiglista -> accesoVarDim .

    =               reduce using rule 48 (asiglista -> accesoVarDim .)


state 98

    (45) asignacion -> ID asiglista . = neur8 expresion ;

    =               shift and go to state 118


state 99

    (120) accesoVarDim -> [ . neur27 nexp ]
    (121) neur27 -> .

    -               reduce using rule 121 (neur27 -> .)
    (               reduce using rule 121 (neur27 -> .)
    ID              reduce using rule 121 (neur27 -> .)
    CTEE            reduce using rule 121 (neur27 -> .)
    CTEF            reduce using rule 121 (neur27 -> .)
    CTEBOOL         reduce using rule 121 (neur27 -> .)
    CTECHAR         reduce using rule 121 (neur27 -> .)
    CALL            reduce using rule 121 (neur27 -> .)

    neur27                         shift and go to state 119

state 100

    (47) asiglista -> empty .

    =               reduce using rule 47 (asiglista -> empty .)


state 101

    (49) if -> IF ( . expresion ) neur13 bloque l ; neur15
    (60) expresion -> . m subexpresion
    (61) m -> . empty
    (62) m -> . NOT
    (145) empty -> .

    NOT             shift and go to state 90
    -               reduce using rule 145 (empty -> .)
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    expresion                      shift and go to state 120
    m                              shift and go to state 89
    empty                          shift and go to state 91

state 102

    (34) bloque -> { i } .

    ELSE            reduce using rule 34 (bloque -> { i } .)
    ;               reduce using rule 34 (bloque -> { i } .)
    FUNC            reduce using rule 34 (bloque -> { i } .)
    CANCION         reduce using rule 34 (bloque -> { i } .)
    $end            reduce using rule 34 (bloque -> { i } .)


state 103

    (134) callvoidfunc -> CALL ID . neur24 ( s ) neur26 ;
    (135) neur24 -> .

    (               reduce using rule 135 (neur24 -> .)

    neur24                         shift and go to state 121

state 104

    (29) h -> , params .

    )               reduce using rule 29 (h -> , params .)


state 105

    (13) funcion -> FUNC z ID meterfuncion ( params ) f neur23 bloque .

    FUNC            reduce using rule 13 (funcion -> FUNC z ID meterfuncion ( params ) f neur23 bloque .)
    CANCION         reduce using rule 13 (funcion -> FUNC z ID meterfuncion ( params ) f neur23 bloque .)


state 106

    (137) return -> RETURN ( expresion . ) ;

    )               shift and go to state 122


state 107

    (123) while -> WHILE ( neur16 . expresion ) neur13 bloque ; neur17
    (60) expresion -> . m subexpresion
    (61) m -> . empty
    (62) m -> . NOT
    (145) empty -> .

    NOT             shift and go to state 90
    -               reduce using rule 145 (empty -> .)
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    expresion                      shift and go to state 123
    m                              shift and go to state 89
    empty                          shift and go to state 91

state 108

    (127) print -> PRINT expresion ; .

    ID              reduce using rule 127 (print -> PRINT expresion ; .)
    IF              reduce using rule 127 (print -> PRINT expresion ; .)
    FOR             reduce using rule 127 (print -> PRINT expresion ; .)
    RETURN          reduce using rule 127 (print -> PRINT expresion ; .)
    WHILE           reduce using rule 127 (print -> PRINT expresion ; .)
    PLAY            reduce using rule 127 (print -> PRINT expresion ; .)
    PRINT           reduce using rule 127 (print -> PRINT expresion ; .)
    CALL            reduce using rule 127 (print -> PRINT expresion ; .)
    }               reduce using rule 127 (print -> PRINT expresion ; .)


state 109

    (92) termino -> meteneg . factor neur4 n
    (99) factor -> . ( neur6 expresion ) neur7
    (100) factor -> . varcte
    (105) varcte -> . ID r neurVar
    (106) varcte -> . CTEE neurCteE
    (107) varcte -> . CTEF neurCteF
    (108) varcte -> . CTEBOOL neurCteB
    (109) varcte -> . callreturnfunc
    (110) varcte -> . CTECHAR neurCteCh
    (128) callreturnfunc -> . CALL ID neur24 ( s ) neur26 ;

    (               shift and go to state 125
    ID              shift and go to state 130
    CTEE            shift and go to state 133
    CTEF            shift and go to state 132
    CTEBOOL         shift and go to state 131
    CTECHAR         shift and go to state 129
    CALL            shift and go to state 128

    varcte                         shift and go to state 124
    callreturnfunc                 shift and go to state 126
    factor                         shift and go to state 127

state 110

    (102) meteneg -> - .

    (               reduce using rule 102 (meteneg -> - .)
    ID              reduce using rule 102 (meteneg -> - .)
    CTEE            reduce using rule 102 (meteneg -> - .)
    CTEF            reduce using rule 102 (meteneg -> - .)
    CTEBOOL         reduce using rule 102 (meteneg -> - .)
    CTECHAR         reduce using rule 102 (meteneg -> - .)
    CALL            reduce using rule 102 (meteneg -> - .)


state 111

    (70) exp -> nexp . p neur12
    (72) p -> . empty
    (73) p -> . EQ neur11_1 nexp
    (74) p -> . NOTEQ neur11_2 nexp
    (75) p -> . > neur11_3 nexp
    (76) p -> . < neur11_4 nexp
    (77) p -> . MTHANEQ neur11_5 nexp
    (78) p -> . LTHANEQ neur11_6 nexp
    (145) empty -> .

    EQ              shift and go to state 138
    NOTEQ           shift and go to state 137
    >               shift and go to state 141
    <               shift and go to state 139
    MTHANEQ         shift and go to state 134
    LTHANEQ         shift and go to state 136
    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    ;               reduce using rule 145 (empty -> .)
    )               reduce using rule 145 (empty -> .)
    ,               reduce using rule 145 (empty -> .)

    p                              shift and go to state 135
    empty                          shift and go to state 140

state 112

    (60) expresion -> m subexpresion .

    ;               reduce using rule 60 (expresion -> m subexpresion .)
    ,               reduce using rule 60 (expresion -> m subexpresion .)
    )               reduce using rule 60 (expresion -> m subexpresion .)


state 113

    (101) meteneg -> empty .

    (               reduce using rule 101 (meteneg -> empty .)
    ID              reduce using rule 101 (meteneg -> empty .)
    CTEE            reduce using rule 101 (meteneg -> empty .)
    CTEF            reduce using rule 101 (meteneg -> empty .)
    CTEBOOL         reduce using rule 101 (meteneg -> empty .)
    CTECHAR         reduce using rule 101 (meteneg -> empty .)
    CALL            reduce using rule 101 (meteneg -> empty .)


state 114

    (85) nexp -> termino . neur5 q
    (86) neur5 -> .

    +               reduce using rule 86 (neur5 -> .)
    -               reduce using rule 86 (neur5 -> .)
    EQ              reduce using rule 86 (neur5 -> .)
    NOTEQ           reduce using rule 86 (neur5 -> .)
    >               reduce using rule 86 (neur5 -> .)
    <               reduce using rule 86 (neur5 -> .)
    MTHANEQ         reduce using rule 86 (neur5 -> .)
    LTHANEQ         reduce using rule 86 (neur5 -> .)
    AND             reduce using rule 86 (neur5 -> .)
    OR              reduce using rule 86 (neur5 -> .)
    ;               reduce using rule 86 (neur5 -> .)
    )               reduce using rule 86 (neur5 -> .)
    ,               reduce using rule 86 (neur5 -> .)
    ]               reduce using rule 86 (neur5 -> .)

    neur5                          shift and go to state 142

state 115

    (63) subexpresion -> exp . neur10 o
    (64) neur10 -> .

    AND             reduce using rule 64 (neur10 -> .)
    OR              reduce using rule 64 (neur10 -> .)
    ;               reduce using rule 64 (neur10 -> .)
    )               reduce using rule 64 (neur10 -> .)
    ,               reduce using rule 64 (neur10 -> .)

    neur10                         shift and go to state 143

state 116

    (126) play -> PLAY ( NOTA . , CTEE ) ;

    ,               shift and go to state 144


state 117

    (55) for -> FOR ( asignacion . neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20
    (56) neur18 -> .

    NOT             reduce using rule 56 (neur18 -> .)
    -               reduce using rule 56 (neur18 -> .)
    (               reduce using rule 56 (neur18 -> .)
    ID              reduce using rule 56 (neur18 -> .)
    CTEE            reduce using rule 56 (neur18 -> .)
    CTEF            reduce using rule 56 (neur18 -> .)
    CTEBOOL         reduce using rule 56 (neur18 -> .)
    CTECHAR         reduce using rule 56 (neur18 -> .)
    CALL            reduce using rule 56 (neur18 -> .)

    neur18                         shift and go to state 145

state 118

    (45) asignacion -> ID asiglista = . neur8 expresion ;
    (46) neur8 -> .

    NOT             reduce using rule 46 (neur8 -> .)
    -               reduce using rule 46 (neur8 -> .)
    (               reduce using rule 46 (neur8 -> .)
    ID              reduce using rule 46 (neur8 -> .)
    CTEE            reduce using rule 46 (neur8 -> .)
    CTEF            reduce using rule 46 (neur8 -> .)
    CTEBOOL         reduce using rule 46 (neur8 -> .)
    CTECHAR         reduce using rule 46 (neur8 -> .)
    CALL            reduce using rule 46 (neur8 -> .)

    neur8                          shift and go to state 146

state 119

    (120) accesoVarDim -> [ neur27 . nexp ]
    (85) nexp -> . termino neur5 q
    (92) termino -> . meteneg factor neur4 n
    (101) meteneg -> . empty
    (102) meteneg -> . -
    (145) empty -> .

    -               shift and go to state 110
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    meteneg                        shift and go to state 109
    nexp                           shift and go to state 147
    empty                          shift and go to state 113
    termino                        shift and go to state 114

state 120

    (49) if -> IF ( expresion . ) neur13 bloque l ; neur15

    )               shift and go to state 148


state 121

    (134) callvoidfunc -> CALL ID neur24 . ( s ) neur26 ;

    (               shift and go to state 149


state 122

    (137) return -> RETURN ( expresion ) . ;

    ;               shift and go to state 150


state 123

    (123) while -> WHILE ( neur16 expresion . ) neur13 bloque ; neur17

    )               shift and go to state 151


state 124

    (100) factor -> varcte .

    *               reduce using rule 100 (factor -> varcte .)
    /               reduce using rule 100 (factor -> varcte .)
    +               reduce using rule 100 (factor -> varcte .)
    -               reduce using rule 100 (factor -> varcte .)
    EQ              reduce using rule 100 (factor -> varcte .)
    NOTEQ           reduce using rule 100 (factor -> varcte .)
    >               reduce using rule 100 (factor -> varcte .)
    <               reduce using rule 100 (factor -> varcte .)
    MTHANEQ         reduce using rule 100 (factor -> varcte .)
    LTHANEQ         reduce using rule 100 (factor -> varcte .)
    AND             reduce using rule 100 (factor -> varcte .)
    OR              reduce using rule 100 (factor -> varcte .)
    ;               reduce using rule 100 (factor -> varcte .)
    )               reduce using rule 100 (factor -> varcte .)
    ,               reduce using rule 100 (factor -> varcte .)
    ]               reduce using rule 100 (factor -> varcte .)


state 125

    (99) factor -> ( . neur6 expresion ) neur7
    (103) neur6 -> .

    NOT             reduce using rule 103 (neur6 -> .)
    -               reduce using rule 103 (neur6 -> .)
    (               reduce using rule 103 (neur6 -> .)
    ID              reduce using rule 103 (neur6 -> .)
    CTEE            reduce using rule 103 (neur6 -> .)
    CTEF            reduce using rule 103 (neur6 -> .)
    CTEBOOL         reduce using rule 103 (neur6 -> .)
    CTECHAR         reduce using rule 103 (neur6 -> .)
    CALL            reduce using rule 103 (neur6 -> .)

    neur6                          shift and go to state 152

state 126

    (109) varcte -> callreturnfunc .

    *               reduce using rule 109 (varcte -> callreturnfunc .)
    /               reduce using rule 109 (varcte -> callreturnfunc .)
    +               reduce using rule 109 (varcte -> callreturnfunc .)
    -               reduce using rule 109 (varcte -> callreturnfunc .)
    EQ              reduce using rule 109 (varcte -> callreturnfunc .)
    NOTEQ           reduce using rule 109 (varcte -> callreturnfunc .)
    >               reduce using rule 109 (varcte -> callreturnfunc .)
    <               reduce using rule 109 (varcte -> callreturnfunc .)
    MTHANEQ         reduce using rule 109 (varcte -> callreturnfunc .)
    LTHANEQ         reduce using rule 109 (varcte -> callreturnfunc .)
    AND             reduce using rule 109 (varcte -> callreturnfunc .)
    OR              reduce using rule 109 (varcte -> callreturnfunc .)
    ;               reduce using rule 109 (varcte -> callreturnfunc .)
    )               reduce using rule 109 (varcte -> callreturnfunc .)
    ,               reduce using rule 109 (varcte -> callreturnfunc .)
    ]               reduce using rule 109 (varcte -> callreturnfunc .)


state 127

    (92) termino -> meteneg factor . neur4 n
    (93) neur4 -> .

    *               reduce using rule 93 (neur4 -> .)
    /               reduce using rule 93 (neur4 -> .)
    +               reduce using rule 93 (neur4 -> .)
    -               reduce using rule 93 (neur4 -> .)
    EQ              reduce using rule 93 (neur4 -> .)
    NOTEQ           reduce using rule 93 (neur4 -> .)
    >               reduce using rule 93 (neur4 -> .)
    <               reduce using rule 93 (neur4 -> .)
    MTHANEQ         reduce using rule 93 (neur4 -> .)
    LTHANEQ         reduce using rule 93 (neur4 -> .)
    AND             reduce using rule 93 (neur4 -> .)
    OR              reduce using rule 93 (neur4 -> .)
    ;               reduce using rule 93 (neur4 -> .)
    )               reduce using rule 93 (neur4 -> .)
    ,               reduce using rule 93 (neur4 -> .)
    ]               reduce using rule 93 (neur4 -> .)

    neur4                          shift and go to state 153

state 128

    (128) callreturnfunc -> CALL . ID neur24 ( s ) neur26 ;

    ID              shift and go to state 154


state 129

    (110) varcte -> CTECHAR . neurCteCh
    (115) neurCteCh -> .

    *               reduce using rule 115 (neurCteCh -> .)
    /               reduce using rule 115 (neurCteCh -> .)
    +               reduce using rule 115 (neurCteCh -> .)
    -               reduce using rule 115 (neurCteCh -> .)
    EQ              reduce using rule 115 (neurCteCh -> .)
    NOTEQ           reduce using rule 115 (neurCteCh -> .)
    >               reduce using rule 115 (neurCteCh -> .)
    <               reduce using rule 115 (neurCteCh -> .)
    MTHANEQ         reduce using rule 115 (neurCteCh -> .)
    LTHANEQ         reduce using rule 115 (neurCteCh -> .)
    AND             reduce using rule 115 (neurCteCh -> .)
    OR              reduce using rule 115 (neurCteCh -> .)
    ;               reduce using rule 115 (neurCteCh -> .)
    )               reduce using rule 115 (neurCteCh -> .)
    ,               reduce using rule 115 (neurCteCh -> .)
    ]               reduce using rule 115 (neurCteCh -> .)

    neurCteCh                      shift and go to state 155

state 130

    (105) varcte -> ID . r neurVar
    (116) r -> . empty
    (117) r -> . oplista
    (145) empty -> .
    (118) oplista -> . accesoVarDim
    (119) oplista -> . length
    (120) accesoVarDim -> . [ neur27 nexp ]
    (122) length -> . . LENGTH ( )

    *               reduce using rule 145 (empty -> .)
    /               reduce using rule 145 (empty -> .)
    +               reduce using rule 145 (empty -> .)
    -               reduce using rule 145 (empty -> .)
    EQ              reduce using rule 145 (empty -> .)
    NOTEQ           reduce using rule 145 (empty -> .)
    >               reduce using rule 145 (empty -> .)
    <               reduce using rule 145 (empty -> .)
    MTHANEQ         reduce using rule 145 (empty -> .)
    LTHANEQ         reduce using rule 145 (empty -> .)
    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    ;               reduce using rule 145 (empty -> .)
    )               reduce using rule 145 (empty -> .)
    ,               reduce using rule 145 (empty -> .)
    ]               reduce using rule 145 (empty -> .)
    [               shift and go to state 99
    .               shift and go to state 158

    oplista                        shift and go to state 156
    accesoVarDim                   shift and go to state 157
    length                         shift and go to state 159
    r                              shift and go to state 160
    empty                          shift and go to state 161

state 131

    (108) varcte -> CTEBOOL . neurCteB
    (114) neurCteB -> .

    *               reduce using rule 114 (neurCteB -> .)
    /               reduce using rule 114 (neurCteB -> .)
    +               reduce using rule 114 (neurCteB -> .)
    -               reduce using rule 114 (neurCteB -> .)
    EQ              reduce using rule 114 (neurCteB -> .)
    NOTEQ           reduce using rule 114 (neurCteB -> .)
    >               reduce using rule 114 (neurCteB -> .)
    <               reduce using rule 114 (neurCteB -> .)
    MTHANEQ         reduce using rule 114 (neurCteB -> .)
    LTHANEQ         reduce using rule 114 (neurCteB -> .)
    AND             reduce using rule 114 (neurCteB -> .)
    OR              reduce using rule 114 (neurCteB -> .)
    ;               reduce using rule 114 (neurCteB -> .)
    )               reduce using rule 114 (neurCteB -> .)
    ,               reduce using rule 114 (neurCteB -> .)
    ]               reduce using rule 114 (neurCteB -> .)

    neurCteB                       shift and go to state 162

state 132

    (107) varcte -> CTEF . neurCteF
    (113) neurCteF -> .

    *               reduce using rule 113 (neurCteF -> .)
    /               reduce using rule 113 (neurCteF -> .)
    +               reduce using rule 113 (neurCteF -> .)
    -               reduce using rule 113 (neurCteF -> .)
    EQ              reduce using rule 113 (neurCteF -> .)
    NOTEQ           reduce using rule 113 (neurCteF -> .)
    >               reduce using rule 113 (neurCteF -> .)
    <               reduce using rule 113 (neurCteF -> .)
    MTHANEQ         reduce using rule 113 (neurCteF -> .)
    LTHANEQ         reduce using rule 113 (neurCteF -> .)
    AND             reduce using rule 113 (neurCteF -> .)
    OR              reduce using rule 113 (neurCteF -> .)
    ;               reduce using rule 113 (neurCteF -> .)
    )               reduce using rule 113 (neurCteF -> .)
    ,               reduce using rule 113 (neurCteF -> .)
    ]               reduce using rule 113 (neurCteF -> .)

    neurCteF                       shift and go to state 163

state 133

    (106) varcte -> CTEE . neurCteE
    (112) neurCteE -> .

    *               reduce using rule 112 (neurCteE -> .)
    /               reduce using rule 112 (neurCteE -> .)
    +               reduce using rule 112 (neurCteE -> .)
    -               reduce using rule 112 (neurCteE -> .)
    EQ              reduce using rule 112 (neurCteE -> .)
    NOTEQ           reduce using rule 112 (neurCteE -> .)
    >               reduce using rule 112 (neurCteE -> .)
    <               reduce using rule 112 (neurCteE -> .)
    MTHANEQ         reduce using rule 112 (neurCteE -> .)
    LTHANEQ         reduce using rule 112 (neurCteE -> .)
    AND             reduce using rule 112 (neurCteE -> .)
    OR              reduce using rule 112 (neurCteE -> .)
    ;               reduce using rule 112 (neurCteE -> .)
    )               reduce using rule 112 (neurCteE -> .)
    ,               reduce using rule 112 (neurCteE -> .)
    ]               reduce using rule 112 (neurCteE -> .)

    neurCteE                       shift and go to state 164

state 134

    (77) p -> MTHANEQ . neur11_5 nexp
    (83) neur11_5 -> .

    -               reduce using rule 83 (neur11_5 -> .)
    (               reduce using rule 83 (neur11_5 -> .)
    ID              reduce using rule 83 (neur11_5 -> .)
    CTEE            reduce using rule 83 (neur11_5 -> .)
    CTEF            reduce using rule 83 (neur11_5 -> .)
    CTEBOOL         reduce using rule 83 (neur11_5 -> .)
    CTECHAR         reduce using rule 83 (neur11_5 -> .)
    CALL            reduce using rule 83 (neur11_5 -> .)

    neur11_5                       shift and go to state 165

state 135

    (70) exp -> nexp p . neur12
    (71) neur12 -> .

    AND             reduce using rule 71 (neur12 -> .)
    OR              reduce using rule 71 (neur12 -> .)
    ;               reduce using rule 71 (neur12 -> .)
    )               reduce using rule 71 (neur12 -> .)
    ,               reduce using rule 71 (neur12 -> .)

    neur12                         shift and go to state 166

state 136

    (78) p -> LTHANEQ . neur11_6 nexp
    (84) neur11_6 -> .

    -               reduce using rule 84 (neur11_6 -> .)
    (               reduce using rule 84 (neur11_6 -> .)
    ID              reduce using rule 84 (neur11_6 -> .)
    CTEE            reduce using rule 84 (neur11_6 -> .)
    CTEF            reduce using rule 84 (neur11_6 -> .)
    CTEBOOL         reduce using rule 84 (neur11_6 -> .)
    CTECHAR         reduce using rule 84 (neur11_6 -> .)
    CALL            reduce using rule 84 (neur11_6 -> .)

    neur11_6                       shift and go to state 167

state 137

    (74) p -> NOTEQ . neur11_2 nexp
    (80) neur11_2 -> .

    -               reduce using rule 80 (neur11_2 -> .)
    (               reduce using rule 80 (neur11_2 -> .)
    ID              reduce using rule 80 (neur11_2 -> .)
    CTEE            reduce using rule 80 (neur11_2 -> .)
    CTEF            reduce using rule 80 (neur11_2 -> .)
    CTEBOOL         reduce using rule 80 (neur11_2 -> .)
    CTECHAR         reduce using rule 80 (neur11_2 -> .)
    CALL            reduce using rule 80 (neur11_2 -> .)

    neur11_2                       shift and go to state 168

state 138

    (73) p -> EQ . neur11_1 nexp
    (79) neur11_1 -> .

    -               reduce using rule 79 (neur11_1 -> .)
    (               reduce using rule 79 (neur11_1 -> .)
    ID              reduce using rule 79 (neur11_1 -> .)
    CTEE            reduce using rule 79 (neur11_1 -> .)
    CTEF            reduce using rule 79 (neur11_1 -> .)
    CTEBOOL         reduce using rule 79 (neur11_1 -> .)
    CTECHAR         reduce using rule 79 (neur11_1 -> .)
    CALL            reduce using rule 79 (neur11_1 -> .)

    neur11_1                       shift and go to state 169

state 139

    (76) p -> < . neur11_4 nexp
    (82) neur11_4 -> .

    -               reduce using rule 82 (neur11_4 -> .)
    (               reduce using rule 82 (neur11_4 -> .)
    ID              reduce using rule 82 (neur11_4 -> .)
    CTEE            reduce using rule 82 (neur11_4 -> .)
    CTEF            reduce using rule 82 (neur11_4 -> .)
    CTEBOOL         reduce using rule 82 (neur11_4 -> .)
    CTECHAR         reduce using rule 82 (neur11_4 -> .)
    CALL            reduce using rule 82 (neur11_4 -> .)

    neur11_4                       shift and go to state 170

state 140

    (72) p -> empty .

    AND             reduce using rule 72 (p -> empty .)
    OR              reduce using rule 72 (p -> empty .)
    ;               reduce using rule 72 (p -> empty .)
    )               reduce using rule 72 (p -> empty .)
    ,               reduce using rule 72 (p -> empty .)


state 141

    (75) p -> > . neur11_3 nexp
    (81) neur11_3 -> .

    -               reduce using rule 81 (neur11_3 -> .)
    (               reduce using rule 81 (neur11_3 -> .)
    ID              reduce using rule 81 (neur11_3 -> .)
    CTEE            reduce using rule 81 (neur11_3 -> .)
    CTEF            reduce using rule 81 (neur11_3 -> .)
    CTEBOOL         reduce using rule 81 (neur11_3 -> .)
    CTECHAR         reduce using rule 81 (neur11_3 -> .)
    CALL            reduce using rule 81 (neur11_3 -> .)

    neur11_3                       shift and go to state 171

state 142

    (85) nexp -> termino neur5 . q
    (87) q -> . empty
    (88) q -> . + neur3_1 nexp
    (89) q -> . - neur3_2 nexp
    (145) empty -> .

    +               shift and go to state 172
    -               shift and go to state 173
    EQ              reduce using rule 145 (empty -> .)
    NOTEQ           reduce using rule 145 (empty -> .)
    >               reduce using rule 145 (empty -> .)
    <               reduce using rule 145 (empty -> .)
    MTHANEQ         reduce using rule 145 (empty -> .)
    LTHANEQ         reduce using rule 145 (empty -> .)
    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    ;               reduce using rule 145 (empty -> .)
    )               reduce using rule 145 (empty -> .)
    ,               reduce using rule 145 (empty -> .)
    ]               reduce using rule 145 (empty -> .)

    q                              shift and go to state 174
    empty                          shift and go to state 175

state 143

    (63) subexpresion -> exp neur10 . o
    (65) o -> . empty
    (66) o -> . AND neur9_1 subexpresion
    (67) o -> . OR neur9_2 subexpresion
    (145) empty -> .

    AND             shift and go to state 176
    OR              shift and go to state 178
    ;               reduce using rule 145 (empty -> .)
    )               reduce using rule 145 (empty -> .)
    ,               reduce using rule 145 (empty -> .)

    o                              shift and go to state 177
    empty                          shift and go to state 179

state 144

    (126) play -> PLAY ( NOTA , . CTEE ) ;

    CTEE            shift and go to state 180


state 145

    (55) for -> FOR ( asignacion neur18 . expresion ; neur19 asignacion ) neur21 bloque ; neur20
    (60) expresion -> . m subexpresion
    (61) m -> . empty
    (62) m -> . NOT
    (145) empty -> .

    NOT             shift and go to state 90
    -               reduce using rule 145 (empty -> .)
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    expresion                      shift and go to state 181
    m                              shift and go to state 89
    empty                          shift and go to state 91

state 146

    (45) asignacion -> ID asiglista = neur8 . expresion ;
    (60) expresion -> . m subexpresion
    (61) m -> . empty
    (62) m -> . NOT
    (145) empty -> .

    NOT             shift and go to state 90
    -               reduce using rule 145 (empty -> .)
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    expresion                      shift and go to state 182
    m                              shift and go to state 89
    empty                          shift and go to state 91

state 147

    (120) accesoVarDim -> [ neur27 nexp . ]

    ]               shift and go to state 183


state 148

    (49) if -> IF ( expresion ) . neur13 bloque l ; neur15
    (50) neur13 -> .

    {               reduce using rule 50 (neur13 -> .)

    neur13                         shift and go to state 184

state 149

    (134) callvoidfunc -> CALL ID neur24 ( . s ) neur26 ;
    (129) s -> . empty
    (130) s -> . expresion neur25 t
    (145) empty -> .
    (60) expresion -> . m subexpresion
    (61) m -> . empty
    (62) m -> . NOT

    )               reduce using rule 145 (empty -> .)
    -               reduce using rule 145 (empty -> .)
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)
    NOT             shift and go to state 90

    expresion                      shift and go to state 185
    m                              shift and go to state 89
    s                              shift and go to state 186
    empty                          shift and go to state 187

state 150

    (137) return -> RETURN ( expresion ) ; .

    ID              reduce using rule 137 (return -> RETURN ( expresion ) ; .)
    IF              reduce using rule 137 (return -> RETURN ( expresion ) ; .)
    FOR             reduce using rule 137 (return -> RETURN ( expresion ) ; .)
    RETURN          reduce using rule 137 (return -> RETURN ( expresion ) ; .)
    WHILE           reduce using rule 137 (return -> RETURN ( expresion ) ; .)
    PLAY            reduce using rule 137 (return -> RETURN ( expresion ) ; .)
    PRINT           reduce using rule 137 (return -> RETURN ( expresion ) ; .)
    CALL            reduce using rule 137 (return -> RETURN ( expresion ) ; .)
    }               reduce using rule 137 (return -> RETURN ( expresion ) ; .)


state 151

    (123) while -> WHILE ( neur16 expresion ) . neur13 bloque ; neur17
    (50) neur13 -> .

    {               reduce using rule 50 (neur13 -> .)

    neur13                         shift and go to state 188

state 152

    (99) factor -> ( neur6 . expresion ) neur7
    (60) expresion -> . m subexpresion
    (61) m -> . empty
    (62) m -> . NOT
    (145) empty -> .

    NOT             shift and go to state 90
    -               reduce using rule 145 (empty -> .)
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    expresion                      shift and go to state 189
    m                              shift and go to state 89
    empty                          shift and go to state 91

state 153

    (92) termino -> meteneg factor neur4 . n
    (94) n -> . empty
    (95) n -> . * neur2_1 termino
    (96) n -> . / neur2_2 termino
    (145) empty -> .

    *               shift and go to state 190
    /               shift and go to state 191
    +               reduce using rule 145 (empty -> .)
    -               reduce using rule 145 (empty -> .)
    EQ              reduce using rule 145 (empty -> .)
    NOTEQ           reduce using rule 145 (empty -> .)
    >               reduce using rule 145 (empty -> .)
    <               reduce using rule 145 (empty -> .)
    MTHANEQ         reduce using rule 145 (empty -> .)
    LTHANEQ         reduce using rule 145 (empty -> .)
    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    ;               reduce using rule 145 (empty -> .)
    )               reduce using rule 145 (empty -> .)
    ,               reduce using rule 145 (empty -> .)
    ]               reduce using rule 145 (empty -> .)

    n                              shift and go to state 192
    empty                          shift and go to state 193

state 154

    (128) callreturnfunc -> CALL ID . neur24 ( s ) neur26 ;
    (135) neur24 -> .

    (               reduce using rule 135 (neur24 -> .)

    neur24                         shift and go to state 194

state 155

    (110) varcte -> CTECHAR neurCteCh .

    *               reduce using rule 110 (varcte -> CTECHAR neurCteCh .)
    /               reduce using rule 110 (varcte -> CTECHAR neurCteCh .)
    +               reduce using rule 110 (varcte -> CTECHAR neurCteCh .)
    -               reduce using rule 110 (varcte -> CTECHAR neurCteCh .)
    EQ              reduce using rule 110 (varcte -> CTECHAR neurCteCh .)
    NOTEQ           reduce using rule 110 (varcte -> CTECHAR neurCteCh .)
    >               reduce using rule 110 (varcte -> CTECHAR neurCteCh .)
    <               reduce using rule 110 (varcte -> CTECHAR neurCteCh .)
    MTHANEQ         reduce using rule 110 (varcte -> CTECHAR neurCteCh .)
    LTHANEQ         reduce using rule 110 (varcte -> CTECHAR neurCteCh .)
    AND             reduce using rule 110 (varcte -> CTECHAR neurCteCh .)
    OR              reduce using rule 110 (varcte -> CTECHAR neurCteCh .)
    ;               reduce using rule 110 (varcte -> CTECHAR neurCteCh .)
    )               reduce using rule 110 (varcte -> CTECHAR neurCteCh .)
    ,               reduce using rule 110 (varcte -> CTECHAR neurCteCh .)
    ]               reduce using rule 110 (varcte -> CTECHAR neurCteCh .)


state 156

    (117) r -> oplista .

    *               reduce using rule 117 (r -> oplista .)
    /               reduce using rule 117 (r -> oplista .)
    +               reduce using rule 117 (r -> oplista .)
    -               reduce using rule 117 (r -> oplista .)
    EQ              reduce using rule 117 (r -> oplista .)
    NOTEQ           reduce using rule 117 (r -> oplista .)
    >               reduce using rule 117 (r -> oplista .)
    <               reduce using rule 117 (r -> oplista .)
    MTHANEQ         reduce using rule 117 (r -> oplista .)
    LTHANEQ         reduce using rule 117 (r -> oplista .)
    AND             reduce using rule 117 (r -> oplista .)
    OR              reduce using rule 117 (r -> oplista .)
    ;               reduce using rule 117 (r -> oplista .)
    )               reduce using rule 117 (r -> oplista .)
    ,               reduce using rule 117 (r -> oplista .)
    ]               reduce using rule 117 (r -> oplista .)


state 157

    (118) oplista -> accesoVarDim .

    *               reduce using rule 118 (oplista -> accesoVarDim .)
    /               reduce using rule 118 (oplista -> accesoVarDim .)
    +               reduce using rule 118 (oplista -> accesoVarDim .)
    -               reduce using rule 118 (oplista -> accesoVarDim .)
    EQ              reduce using rule 118 (oplista -> accesoVarDim .)
    NOTEQ           reduce using rule 118 (oplista -> accesoVarDim .)
    >               reduce using rule 118 (oplista -> accesoVarDim .)
    <               reduce using rule 118 (oplista -> accesoVarDim .)
    MTHANEQ         reduce using rule 118 (oplista -> accesoVarDim .)
    LTHANEQ         reduce using rule 118 (oplista -> accesoVarDim .)
    AND             reduce using rule 118 (oplista -> accesoVarDim .)
    OR              reduce using rule 118 (oplista -> accesoVarDim .)
    ;               reduce using rule 118 (oplista -> accesoVarDim .)
    )               reduce using rule 118 (oplista -> accesoVarDim .)
    ,               reduce using rule 118 (oplista -> accesoVarDim .)
    ]               reduce using rule 118 (oplista -> accesoVarDim .)


state 158

    (122) length -> . . LENGTH ( )

    LENGTH          shift and go to state 195


state 159

    (119) oplista -> length .

    *               reduce using rule 119 (oplista -> length .)
    /               reduce using rule 119 (oplista -> length .)
    +               reduce using rule 119 (oplista -> length .)
    -               reduce using rule 119 (oplista -> length .)
    EQ              reduce using rule 119 (oplista -> length .)
    NOTEQ           reduce using rule 119 (oplista -> length .)
    >               reduce using rule 119 (oplista -> length .)
    <               reduce using rule 119 (oplista -> length .)
    MTHANEQ         reduce using rule 119 (oplista -> length .)
    LTHANEQ         reduce using rule 119 (oplista -> length .)
    AND             reduce using rule 119 (oplista -> length .)
    OR              reduce using rule 119 (oplista -> length .)
    ;               reduce using rule 119 (oplista -> length .)
    )               reduce using rule 119 (oplista -> length .)
    ,               reduce using rule 119 (oplista -> length .)
    ]               reduce using rule 119 (oplista -> length .)


state 160

    (105) varcte -> ID r . neurVar
    (111) neurVar -> .

    *               reduce using rule 111 (neurVar -> .)
    /               reduce using rule 111 (neurVar -> .)
    +               reduce using rule 111 (neurVar -> .)
    -               reduce using rule 111 (neurVar -> .)
    EQ              reduce using rule 111 (neurVar -> .)
    NOTEQ           reduce using rule 111 (neurVar -> .)
    >               reduce using rule 111 (neurVar -> .)
    <               reduce using rule 111 (neurVar -> .)
    MTHANEQ         reduce using rule 111 (neurVar -> .)
    LTHANEQ         reduce using rule 111 (neurVar -> .)
    AND             reduce using rule 111 (neurVar -> .)
    OR              reduce using rule 111 (neurVar -> .)
    ;               reduce using rule 111 (neurVar -> .)
    )               reduce using rule 111 (neurVar -> .)
    ,               reduce using rule 111 (neurVar -> .)
    ]               reduce using rule 111 (neurVar -> .)

    neurVar                        shift and go to state 196

state 161

    (116) r -> empty .

    *               reduce using rule 116 (r -> empty .)
    /               reduce using rule 116 (r -> empty .)
    +               reduce using rule 116 (r -> empty .)
    -               reduce using rule 116 (r -> empty .)
    EQ              reduce using rule 116 (r -> empty .)
    NOTEQ           reduce using rule 116 (r -> empty .)
    >               reduce using rule 116 (r -> empty .)
    <               reduce using rule 116 (r -> empty .)
    MTHANEQ         reduce using rule 116 (r -> empty .)
    LTHANEQ         reduce using rule 116 (r -> empty .)
    AND             reduce using rule 116 (r -> empty .)
    OR              reduce using rule 116 (r -> empty .)
    ;               reduce using rule 116 (r -> empty .)
    )               reduce using rule 116 (r -> empty .)
    ,               reduce using rule 116 (r -> empty .)
    ]               reduce using rule 116 (r -> empty .)


state 162

    (108) varcte -> CTEBOOL neurCteB .

    *               reduce using rule 108 (varcte -> CTEBOOL neurCteB .)
    /               reduce using rule 108 (varcte -> CTEBOOL neurCteB .)
    +               reduce using rule 108 (varcte -> CTEBOOL neurCteB .)
    -               reduce using rule 108 (varcte -> CTEBOOL neurCteB .)
    EQ              reduce using rule 108 (varcte -> CTEBOOL neurCteB .)
    NOTEQ           reduce using rule 108 (varcte -> CTEBOOL neurCteB .)
    >               reduce using rule 108 (varcte -> CTEBOOL neurCteB .)
    <               reduce using rule 108 (varcte -> CTEBOOL neurCteB .)
    MTHANEQ         reduce using rule 108 (varcte -> CTEBOOL neurCteB .)
    LTHANEQ         reduce using rule 108 (varcte -> CTEBOOL neurCteB .)
    AND             reduce using rule 108 (varcte -> CTEBOOL neurCteB .)
    OR              reduce using rule 108 (varcte -> CTEBOOL neurCteB .)
    ;               reduce using rule 108 (varcte -> CTEBOOL neurCteB .)
    )               reduce using rule 108 (varcte -> CTEBOOL neurCteB .)
    ,               reduce using rule 108 (varcte -> CTEBOOL neurCteB .)
    ]               reduce using rule 108 (varcte -> CTEBOOL neurCteB .)


state 163

    (107) varcte -> CTEF neurCteF .

    *               reduce using rule 107 (varcte -> CTEF neurCteF .)
    /               reduce using rule 107 (varcte -> CTEF neurCteF .)
    +               reduce using rule 107 (varcte -> CTEF neurCteF .)
    -               reduce using rule 107 (varcte -> CTEF neurCteF .)
    EQ              reduce using rule 107 (varcte -> CTEF neurCteF .)
    NOTEQ           reduce using rule 107 (varcte -> CTEF neurCteF .)
    >               reduce using rule 107 (varcte -> CTEF neurCteF .)
    <               reduce using rule 107 (varcte -> CTEF neurCteF .)
    MTHANEQ         reduce using rule 107 (varcte -> CTEF neurCteF .)
    LTHANEQ         reduce using rule 107 (varcte -> CTEF neurCteF .)
    AND             reduce using rule 107 (varcte -> CTEF neurCteF .)
    OR              reduce using rule 107 (varcte -> CTEF neurCteF .)
    ;               reduce using rule 107 (varcte -> CTEF neurCteF .)
    )               reduce using rule 107 (varcte -> CTEF neurCteF .)
    ,               reduce using rule 107 (varcte -> CTEF neurCteF .)
    ]               reduce using rule 107 (varcte -> CTEF neurCteF .)


state 164

    (106) varcte -> CTEE neurCteE .

    *               reduce using rule 106 (varcte -> CTEE neurCteE .)
    /               reduce using rule 106 (varcte -> CTEE neurCteE .)
    +               reduce using rule 106 (varcte -> CTEE neurCteE .)
    -               reduce using rule 106 (varcte -> CTEE neurCteE .)
    EQ              reduce using rule 106 (varcte -> CTEE neurCteE .)
    NOTEQ           reduce using rule 106 (varcte -> CTEE neurCteE .)
    >               reduce using rule 106 (varcte -> CTEE neurCteE .)
    <               reduce using rule 106 (varcte -> CTEE neurCteE .)
    MTHANEQ         reduce using rule 106 (varcte -> CTEE neurCteE .)
    LTHANEQ         reduce using rule 106 (varcte -> CTEE neurCteE .)
    AND             reduce using rule 106 (varcte -> CTEE neurCteE .)
    OR              reduce using rule 106 (varcte -> CTEE neurCteE .)
    ;               reduce using rule 106 (varcte -> CTEE neurCteE .)
    )               reduce using rule 106 (varcte -> CTEE neurCteE .)
    ,               reduce using rule 106 (varcte -> CTEE neurCteE .)
    ]               reduce using rule 106 (varcte -> CTEE neurCteE .)


state 165

    (77) p -> MTHANEQ neur11_5 . nexp
    (85) nexp -> . termino neur5 q
    (92) termino -> . meteneg factor neur4 n
    (101) meteneg -> . empty
    (102) meteneg -> . -
    (145) empty -> .

    -               shift and go to state 110
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    meteneg                        shift and go to state 109
    nexp                           shift and go to state 197
    empty                          shift and go to state 113
    termino                        shift and go to state 114

state 166

    (70) exp -> nexp p neur12 .

    AND             reduce using rule 70 (exp -> nexp p neur12 .)
    OR              reduce using rule 70 (exp -> nexp p neur12 .)
    ;               reduce using rule 70 (exp -> nexp p neur12 .)
    )               reduce using rule 70 (exp -> nexp p neur12 .)
    ,               reduce using rule 70 (exp -> nexp p neur12 .)


state 167

    (78) p -> LTHANEQ neur11_6 . nexp
    (85) nexp -> . termino neur5 q
    (92) termino -> . meteneg factor neur4 n
    (101) meteneg -> . empty
    (102) meteneg -> . -
    (145) empty -> .

    -               shift and go to state 110
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    meteneg                        shift and go to state 109
    nexp                           shift and go to state 198
    empty                          shift and go to state 113
    termino                        shift and go to state 114

state 168

    (74) p -> NOTEQ neur11_2 . nexp
    (85) nexp -> . termino neur5 q
    (92) termino -> . meteneg factor neur4 n
    (101) meteneg -> . empty
    (102) meteneg -> . -
    (145) empty -> .

    -               shift and go to state 110
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    meteneg                        shift and go to state 109
    nexp                           shift and go to state 199
    empty                          shift and go to state 113
    termino                        shift and go to state 114

state 169

    (73) p -> EQ neur11_1 . nexp
    (85) nexp -> . termino neur5 q
    (92) termino -> . meteneg factor neur4 n
    (101) meteneg -> . empty
    (102) meteneg -> . -
    (145) empty -> .

    -               shift and go to state 110
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    meteneg                        shift and go to state 109
    nexp                           shift and go to state 200
    empty                          shift and go to state 113
    termino                        shift and go to state 114

state 170

    (76) p -> < neur11_4 . nexp
    (85) nexp -> . termino neur5 q
    (92) termino -> . meteneg factor neur4 n
    (101) meteneg -> . empty
    (102) meteneg -> . -
    (145) empty -> .

    -               shift and go to state 110
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    meteneg                        shift and go to state 109
    nexp                           shift and go to state 201
    empty                          shift and go to state 113
    termino                        shift and go to state 114

state 171

    (75) p -> > neur11_3 . nexp
    (85) nexp -> . termino neur5 q
    (92) termino -> . meteneg factor neur4 n
    (101) meteneg -> . empty
    (102) meteneg -> . -
    (145) empty -> .

    -               shift and go to state 110
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    meteneg                        shift and go to state 109
    nexp                           shift and go to state 202
    empty                          shift and go to state 113
    termino                        shift and go to state 114

state 172

    (88) q -> + . neur3_1 nexp
    (90) neur3_1 -> .

    -               reduce using rule 90 (neur3_1 -> .)
    (               reduce using rule 90 (neur3_1 -> .)
    ID              reduce using rule 90 (neur3_1 -> .)
    CTEE            reduce using rule 90 (neur3_1 -> .)
    CTEF            reduce using rule 90 (neur3_1 -> .)
    CTEBOOL         reduce using rule 90 (neur3_1 -> .)
    CTECHAR         reduce using rule 90 (neur3_1 -> .)
    CALL            reduce using rule 90 (neur3_1 -> .)

    neur3_1                        shift and go to state 203

state 173

    (89) q -> - . neur3_2 nexp
    (91) neur3_2 -> .

    -               reduce using rule 91 (neur3_2 -> .)
    (               reduce using rule 91 (neur3_2 -> .)
    ID              reduce using rule 91 (neur3_2 -> .)
    CTEE            reduce using rule 91 (neur3_2 -> .)
    CTEF            reduce using rule 91 (neur3_2 -> .)
    CTEBOOL         reduce using rule 91 (neur3_2 -> .)
    CTECHAR         reduce using rule 91 (neur3_2 -> .)
    CALL            reduce using rule 91 (neur3_2 -> .)

    neur3_2                        shift and go to state 204

state 174

    (85) nexp -> termino neur5 q .

    AND             reduce using rule 85 (nexp -> termino neur5 q .)
    OR              reduce using rule 85 (nexp -> termino neur5 q .)
    ;               reduce using rule 85 (nexp -> termino neur5 q .)
    )               reduce using rule 85 (nexp -> termino neur5 q .)
    ,               reduce using rule 85 (nexp -> termino neur5 q .)
    EQ              reduce using rule 85 (nexp -> termino neur5 q .)
    NOTEQ           reduce using rule 85 (nexp -> termino neur5 q .)
    >               reduce using rule 85 (nexp -> termino neur5 q .)
    <               reduce using rule 85 (nexp -> termino neur5 q .)
    MTHANEQ         reduce using rule 85 (nexp -> termino neur5 q .)
    LTHANEQ         reduce using rule 85 (nexp -> termino neur5 q .)
    ]               reduce using rule 85 (nexp -> termino neur5 q .)


state 175

    (87) q -> empty .

    EQ              reduce using rule 87 (q -> empty .)
    NOTEQ           reduce using rule 87 (q -> empty .)
    >               reduce using rule 87 (q -> empty .)
    <               reduce using rule 87 (q -> empty .)
    MTHANEQ         reduce using rule 87 (q -> empty .)
    LTHANEQ         reduce using rule 87 (q -> empty .)
    AND             reduce using rule 87 (q -> empty .)
    OR              reduce using rule 87 (q -> empty .)
    ;               reduce using rule 87 (q -> empty .)
    )               reduce using rule 87 (q -> empty .)
    ,               reduce using rule 87 (q -> empty .)
    ]               reduce using rule 87 (q -> empty .)


state 176

    (66) o -> AND . neur9_1 subexpresion
    (68) neur9_1 -> .

    -               reduce using rule 68 (neur9_1 -> .)
    (               reduce using rule 68 (neur9_1 -> .)
    ID              reduce using rule 68 (neur9_1 -> .)
    CTEE            reduce using rule 68 (neur9_1 -> .)
    CTEF            reduce using rule 68 (neur9_1 -> .)
    CTEBOOL         reduce using rule 68 (neur9_1 -> .)
    CTECHAR         reduce using rule 68 (neur9_1 -> .)
    CALL            reduce using rule 68 (neur9_1 -> .)

    neur9_1                        shift and go to state 205

state 177

    (63) subexpresion -> exp neur10 o .

    ;               reduce using rule 63 (subexpresion -> exp neur10 o .)
    )               reduce using rule 63 (subexpresion -> exp neur10 o .)
    ,               reduce using rule 63 (subexpresion -> exp neur10 o .)


state 178

    (67) o -> OR . neur9_2 subexpresion
    (69) neur9_2 -> .

    -               reduce using rule 69 (neur9_2 -> .)
    (               reduce using rule 69 (neur9_2 -> .)
    ID              reduce using rule 69 (neur9_2 -> .)
    CTEE            reduce using rule 69 (neur9_2 -> .)
    CTEF            reduce using rule 69 (neur9_2 -> .)
    CTEBOOL         reduce using rule 69 (neur9_2 -> .)
    CTECHAR         reduce using rule 69 (neur9_2 -> .)
    CALL            reduce using rule 69 (neur9_2 -> .)

    neur9_2                        shift and go to state 206

state 179

    (65) o -> empty .

    ;               reduce using rule 65 (o -> empty .)
    )               reduce using rule 65 (o -> empty .)
    ,               reduce using rule 65 (o -> empty .)


state 180

    (126) play -> PLAY ( NOTA , CTEE . ) ;

    )               shift and go to state 207


state 181

    (55) for -> FOR ( asignacion neur18 expresion . ; neur19 asignacion ) neur21 bloque ; neur20

    ;               shift and go to state 208


state 182

    (45) asignacion -> ID asiglista = neur8 expresion . ;

    ;               shift and go to state 209


state 183

    (120) accesoVarDim -> [ neur27 nexp ] .

    =               reduce using rule 120 (accesoVarDim -> [ neur27 nexp ] .)
    *               reduce using rule 120 (accesoVarDim -> [ neur27 nexp ] .)
    /               reduce using rule 120 (accesoVarDim -> [ neur27 nexp ] .)
    +               reduce using rule 120 (accesoVarDim -> [ neur27 nexp ] .)
    -               reduce using rule 120 (accesoVarDim -> [ neur27 nexp ] .)
    EQ              reduce using rule 120 (accesoVarDim -> [ neur27 nexp ] .)
    NOTEQ           reduce using rule 120 (accesoVarDim -> [ neur27 nexp ] .)
    >               reduce using rule 120 (accesoVarDim -> [ neur27 nexp ] .)
    <               reduce using rule 120 (accesoVarDim -> [ neur27 nexp ] .)
    MTHANEQ         reduce using rule 120 (accesoVarDim -> [ neur27 nexp ] .)
    LTHANEQ         reduce using rule 120 (accesoVarDim -> [ neur27 nexp ] .)
    AND             reduce using rule 120 (accesoVarDim -> [ neur27 nexp ] .)
    OR              reduce using rule 120 (accesoVarDim -> [ neur27 nexp ] .)
    ;               reduce using rule 120 (accesoVarDim -> [ neur27 nexp ] .)
    )               reduce using rule 120 (accesoVarDim -> [ neur27 nexp ] .)
    ,               reduce using rule 120 (accesoVarDim -> [ neur27 nexp ] .)
    ]               reduce using rule 120 (accesoVarDim -> [ neur27 nexp ] .)


state 184

    (49) if -> IF ( expresion ) neur13 . bloque l ; neur15
    (34) bloque -> . { i }

    {               shift and go to state 59

    bloque                         shift and go to state 210

state 185

    (130) s -> expresion . neur25 t
    (131) neur25 -> .

    ,               reduce using rule 131 (neur25 -> .)
    )               reduce using rule 131 (neur25 -> .)

    neur25                         shift and go to state 211

state 186

    (134) callvoidfunc -> CALL ID neur24 ( s . ) neur26 ;

    )               shift and go to state 212


state 187

    (129) s -> empty .
    (61) m -> empty .

    )               reduce using rule 129 (s -> empty .)
    -               reduce using rule 61 (m -> empty .)
    (               reduce using rule 61 (m -> empty .)
    ID              reduce using rule 61 (m -> empty .)
    CTEE            reduce using rule 61 (m -> empty .)
    CTEF            reduce using rule 61 (m -> empty .)
    CTEBOOL         reduce using rule 61 (m -> empty .)
    CTECHAR         reduce using rule 61 (m -> empty .)
    CALL            reduce using rule 61 (m -> empty .)


state 188

    (123) while -> WHILE ( neur16 expresion ) neur13 . bloque ; neur17
    (34) bloque -> . { i }

    {               shift and go to state 59

    bloque                         shift and go to state 213

state 189

    (99) factor -> ( neur6 expresion . ) neur7

    )               shift and go to state 214


state 190

    (95) n -> * . neur2_1 termino
    (97) neur2_1 -> .

    -               reduce using rule 97 (neur2_1 -> .)
    (               reduce using rule 97 (neur2_1 -> .)
    ID              reduce using rule 97 (neur2_1 -> .)
    CTEE            reduce using rule 97 (neur2_1 -> .)
    CTEF            reduce using rule 97 (neur2_1 -> .)
    CTEBOOL         reduce using rule 97 (neur2_1 -> .)
    CTECHAR         reduce using rule 97 (neur2_1 -> .)
    CALL            reduce using rule 97 (neur2_1 -> .)

    neur2_1                        shift and go to state 215

state 191

    (96) n -> / . neur2_2 termino
    (98) neur2_2 -> .

    -               reduce using rule 98 (neur2_2 -> .)
    (               reduce using rule 98 (neur2_2 -> .)
    ID              reduce using rule 98 (neur2_2 -> .)
    CTEE            reduce using rule 98 (neur2_2 -> .)
    CTEF            reduce using rule 98 (neur2_2 -> .)
    CTEBOOL         reduce using rule 98 (neur2_2 -> .)
    CTECHAR         reduce using rule 98 (neur2_2 -> .)
    CALL            reduce using rule 98 (neur2_2 -> .)

    neur2_2                        shift and go to state 216

state 192

    (92) termino -> meteneg factor neur4 n .

    +               reduce using rule 92 (termino -> meteneg factor neur4 n .)
    -               reduce using rule 92 (termino -> meteneg factor neur4 n .)
    EQ              reduce using rule 92 (termino -> meteneg factor neur4 n .)
    NOTEQ           reduce using rule 92 (termino -> meteneg factor neur4 n .)
    >               reduce using rule 92 (termino -> meteneg factor neur4 n .)
    <               reduce using rule 92 (termino -> meteneg factor neur4 n .)
    MTHANEQ         reduce using rule 92 (termino -> meteneg factor neur4 n .)
    LTHANEQ         reduce using rule 92 (termino -> meteneg factor neur4 n .)
    AND             reduce using rule 92 (termino -> meteneg factor neur4 n .)
    OR              reduce using rule 92 (termino -> meteneg factor neur4 n .)
    ;               reduce using rule 92 (termino -> meteneg factor neur4 n .)
    )               reduce using rule 92 (termino -> meteneg factor neur4 n .)
    ,               reduce using rule 92 (termino -> meteneg factor neur4 n .)
    ]               reduce using rule 92 (termino -> meteneg factor neur4 n .)


state 193

    (94) n -> empty .

    +               reduce using rule 94 (n -> empty .)
    -               reduce using rule 94 (n -> empty .)
    EQ              reduce using rule 94 (n -> empty .)
    NOTEQ           reduce using rule 94 (n -> empty .)
    >               reduce using rule 94 (n -> empty .)
    <               reduce using rule 94 (n -> empty .)
    MTHANEQ         reduce using rule 94 (n -> empty .)
    LTHANEQ         reduce using rule 94 (n -> empty .)
    AND             reduce using rule 94 (n -> empty .)
    OR              reduce using rule 94 (n -> empty .)
    ;               reduce using rule 94 (n -> empty .)
    )               reduce using rule 94 (n -> empty .)
    ,               reduce using rule 94 (n -> empty .)
    ]               reduce using rule 94 (n -> empty .)


state 194

    (128) callreturnfunc -> CALL ID neur24 . ( s ) neur26 ;

    (               shift and go to state 217


state 195

    (122) length -> . LENGTH . ( )

    (               shift and go to state 218


state 196

    (105) varcte -> ID r neurVar .

    *               reduce using rule 105 (varcte -> ID r neurVar .)
    /               reduce using rule 105 (varcte -> ID r neurVar .)
    +               reduce using rule 105 (varcte -> ID r neurVar .)
    -               reduce using rule 105 (varcte -> ID r neurVar .)
    EQ              reduce using rule 105 (varcte -> ID r neurVar .)
    NOTEQ           reduce using rule 105 (varcte -> ID r neurVar .)
    >               reduce using rule 105 (varcte -> ID r neurVar .)
    <               reduce using rule 105 (varcte -> ID r neurVar .)
    MTHANEQ         reduce using rule 105 (varcte -> ID r neurVar .)
    LTHANEQ         reduce using rule 105 (varcte -> ID r neurVar .)
    AND             reduce using rule 105 (varcte -> ID r neurVar .)
    OR              reduce using rule 105 (varcte -> ID r neurVar .)
    ;               reduce using rule 105 (varcte -> ID r neurVar .)
    )               reduce using rule 105 (varcte -> ID r neurVar .)
    ,               reduce using rule 105 (varcte -> ID r neurVar .)
    ]               reduce using rule 105 (varcte -> ID r neurVar .)


state 197

    (77) p -> MTHANEQ neur11_5 nexp .

    AND             reduce using rule 77 (p -> MTHANEQ neur11_5 nexp .)
    OR              reduce using rule 77 (p -> MTHANEQ neur11_5 nexp .)
    ;               reduce using rule 77 (p -> MTHANEQ neur11_5 nexp .)
    )               reduce using rule 77 (p -> MTHANEQ neur11_5 nexp .)
    ,               reduce using rule 77 (p -> MTHANEQ neur11_5 nexp .)


state 198

    (78) p -> LTHANEQ neur11_6 nexp .

    AND             reduce using rule 78 (p -> LTHANEQ neur11_6 nexp .)
    OR              reduce using rule 78 (p -> LTHANEQ neur11_6 nexp .)
    ;               reduce using rule 78 (p -> LTHANEQ neur11_6 nexp .)
    )               reduce using rule 78 (p -> LTHANEQ neur11_6 nexp .)
    ,               reduce using rule 78 (p -> LTHANEQ neur11_6 nexp .)


state 199

    (74) p -> NOTEQ neur11_2 nexp .

    AND             reduce using rule 74 (p -> NOTEQ neur11_2 nexp .)
    OR              reduce using rule 74 (p -> NOTEQ neur11_2 nexp .)
    ;               reduce using rule 74 (p -> NOTEQ neur11_2 nexp .)
    )               reduce using rule 74 (p -> NOTEQ neur11_2 nexp .)
    ,               reduce using rule 74 (p -> NOTEQ neur11_2 nexp .)


state 200

    (73) p -> EQ neur11_1 nexp .

    AND             reduce using rule 73 (p -> EQ neur11_1 nexp .)
    OR              reduce using rule 73 (p -> EQ neur11_1 nexp .)
    ;               reduce using rule 73 (p -> EQ neur11_1 nexp .)
    )               reduce using rule 73 (p -> EQ neur11_1 nexp .)
    ,               reduce using rule 73 (p -> EQ neur11_1 nexp .)


state 201

    (76) p -> < neur11_4 nexp .

    AND             reduce using rule 76 (p -> < neur11_4 nexp .)
    OR              reduce using rule 76 (p -> < neur11_4 nexp .)
    ;               reduce using rule 76 (p -> < neur11_4 nexp .)
    )               reduce using rule 76 (p -> < neur11_4 nexp .)
    ,               reduce using rule 76 (p -> < neur11_4 nexp .)


state 202

    (75) p -> > neur11_3 nexp .

    AND             reduce using rule 75 (p -> > neur11_3 nexp .)
    OR              reduce using rule 75 (p -> > neur11_3 nexp .)
    ;               reduce using rule 75 (p -> > neur11_3 nexp .)
    )               reduce using rule 75 (p -> > neur11_3 nexp .)
    ,               reduce using rule 75 (p -> > neur11_3 nexp .)


state 203

    (88) q -> + neur3_1 . nexp
    (85) nexp -> . termino neur5 q
    (92) termino -> . meteneg factor neur4 n
    (101) meteneg -> . empty
    (102) meteneg -> . -
    (145) empty -> .

    -               shift and go to state 110
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    meteneg                        shift and go to state 109
    nexp                           shift and go to state 219
    empty                          shift and go to state 113
    termino                        shift and go to state 114

state 204

    (89) q -> - neur3_2 . nexp
    (85) nexp -> . termino neur5 q
    (92) termino -> . meteneg factor neur4 n
    (101) meteneg -> . empty
    (102) meteneg -> . -
    (145) empty -> .

    -               shift and go to state 110
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    meteneg                        shift and go to state 109
    nexp                           shift and go to state 220
    empty                          shift and go to state 113
    termino                        shift and go to state 114

state 205

    (66) o -> AND neur9_1 . subexpresion
    (63) subexpresion -> . exp neur10 o
    (70) exp -> . nexp p neur12
    (85) nexp -> . termino neur5 q
    (92) termino -> . meteneg factor neur4 n
    (101) meteneg -> . empty
    (102) meteneg -> . -
    (145) empty -> .

    -               shift and go to state 110
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    meteneg                        shift and go to state 109
    nexp                           shift and go to state 111
    subexpresion                   shift and go to state 221
    empty                          shift and go to state 113
    termino                        shift and go to state 114
    exp                            shift and go to state 115

state 206

    (67) o -> OR neur9_2 . subexpresion
    (63) subexpresion -> . exp neur10 o
    (70) exp -> . nexp p neur12
    (85) nexp -> . termino neur5 q
    (92) termino -> . meteneg factor neur4 n
    (101) meteneg -> . empty
    (102) meteneg -> . -
    (145) empty -> .

    -               shift and go to state 110
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    meteneg                        shift and go to state 109
    nexp                           shift and go to state 111
    empty                          shift and go to state 113
    subexpresion                   shift and go to state 222
    termino                        shift and go to state 114
    exp                            shift and go to state 115

state 207

    (126) play -> PLAY ( NOTA , CTEE ) . ;

    ;               shift and go to state 223


state 208

    (55) for -> FOR ( asignacion neur18 expresion ; . neur19 asignacion ) neur21 bloque ; neur20
    (57) neur19 -> .

    ID              reduce using rule 57 (neur19 -> .)

    neur19                         shift and go to state 224

state 209

    (45) asignacion -> ID asiglista = neur8 expresion ; .

    )               reduce using rule 45 (asignacion -> ID asiglista = neur8 expresion ; .)
    NOT             reduce using rule 45 (asignacion -> ID asiglista = neur8 expresion ; .)
    -               reduce using rule 45 (asignacion -> ID asiglista = neur8 expresion ; .)
    (               reduce using rule 45 (asignacion -> ID asiglista = neur8 expresion ; .)
    ID              reduce using rule 45 (asignacion -> ID asiglista = neur8 expresion ; .)
    CTEE            reduce using rule 45 (asignacion -> ID asiglista = neur8 expresion ; .)
    CTEF            reduce using rule 45 (asignacion -> ID asiglista = neur8 expresion ; .)
    CTEBOOL         reduce using rule 45 (asignacion -> ID asiglista = neur8 expresion ; .)
    CTECHAR         reduce using rule 45 (asignacion -> ID asiglista = neur8 expresion ; .)
    CALL            reduce using rule 45 (asignacion -> ID asiglista = neur8 expresion ; .)
    IF              reduce using rule 45 (asignacion -> ID asiglista = neur8 expresion ; .)
    FOR             reduce using rule 45 (asignacion -> ID asiglista = neur8 expresion ; .)
    RETURN          reduce using rule 45 (asignacion -> ID asiglista = neur8 expresion ; .)
    WHILE           reduce using rule 45 (asignacion -> ID asiglista = neur8 expresion ; .)
    PLAY            reduce using rule 45 (asignacion -> ID asiglista = neur8 expresion ; .)
    PRINT           reduce using rule 45 (asignacion -> ID asiglista = neur8 expresion ; .)
    }               reduce using rule 45 (asignacion -> ID asiglista = neur8 expresion ; .)


state 210

    (49) if -> IF ( expresion ) neur13 bloque . l ; neur15
    (51) l -> . empty
    (52) l -> . ELSE neur14 bloque
    (145) empty -> .

    ELSE            shift and go to state 226
    ;               reduce using rule 145 (empty -> .)

    l                              shift and go to state 225
    empty                          shift and go to state 227

state 211

    (130) s -> expresion neur25 . t
    (132) t -> . empty
    (133) t -> . , s
    (145) empty -> .

    ,               shift and go to state 228
    )               reduce using rule 145 (empty -> .)

    t                              shift and go to state 229
    empty                          shift and go to state 230

state 212

    (134) callvoidfunc -> CALL ID neur24 ( s ) . neur26 ;
    (136) neur26 -> .

    ;               reduce using rule 136 (neur26 -> .)

    neur26                         shift and go to state 231

state 213

    (123) while -> WHILE ( neur16 expresion ) neur13 bloque . ; neur17

    ;               shift and go to state 232


state 214

    (99) factor -> ( neur6 expresion ) . neur7
    (104) neur7 -> .

    *               reduce using rule 104 (neur7 -> .)
    /               reduce using rule 104 (neur7 -> .)
    +               reduce using rule 104 (neur7 -> .)
    -               reduce using rule 104 (neur7 -> .)
    EQ              reduce using rule 104 (neur7 -> .)
    NOTEQ           reduce using rule 104 (neur7 -> .)
    >               reduce using rule 104 (neur7 -> .)
    <               reduce using rule 104 (neur7 -> .)
    MTHANEQ         reduce using rule 104 (neur7 -> .)
    LTHANEQ         reduce using rule 104 (neur7 -> .)
    AND             reduce using rule 104 (neur7 -> .)
    OR              reduce using rule 104 (neur7 -> .)
    ;               reduce using rule 104 (neur7 -> .)
    )               reduce using rule 104 (neur7 -> .)
    ,               reduce using rule 104 (neur7 -> .)
    ]               reduce using rule 104 (neur7 -> .)

    neur7                          shift and go to state 233

state 215

    (95) n -> * neur2_1 . termino
    (92) termino -> . meteneg factor neur4 n
    (101) meteneg -> . empty
    (102) meteneg -> . -
    (145) empty -> .

    -               shift and go to state 110
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    meteneg                        shift and go to state 109
    termino                        shift and go to state 234
    empty                          shift and go to state 113

state 216

    (96) n -> / neur2_2 . termino
    (92) termino -> . meteneg factor neur4 n
    (101) meteneg -> . empty
    (102) meteneg -> . -
    (145) empty -> .

    -               shift and go to state 110
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)

    meteneg                        shift and go to state 109
    termino                        shift and go to state 235
    empty                          shift and go to state 113

state 217

    (128) callreturnfunc -> CALL ID neur24 ( . s ) neur26 ;
    (129) s -> . empty
    (130) s -> . expresion neur25 t
    (145) empty -> .
    (60) expresion -> . m subexpresion
    (61) m -> . empty
    (62) m -> . NOT

    )               reduce using rule 145 (empty -> .)
    -               reduce using rule 145 (empty -> .)
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)
    NOT             shift and go to state 90

    expresion                      shift and go to state 185
    m                              shift and go to state 89
    s                              shift and go to state 236
    empty                          shift and go to state 187

state 218

    (122) length -> . LENGTH ( . )

    )               shift and go to state 237


state 219

    (88) q -> + neur3_1 nexp .

    EQ              reduce using rule 88 (q -> + neur3_1 nexp .)
    NOTEQ           reduce using rule 88 (q -> + neur3_1 nexp .)
    >               reduce using rule 88 (q -> + neur3_1 nexp .)
    <               reduce using rule 88 (q -> + neur3_1 nexp .)
    MTHANEQ         reduce using rule 88 (q -> + neur3_1 nexp .)
    LTHANEQ         reduce using rule 88 (q -> + neur3_1 nexp .)
    AND             reduce using rule 88 (q -> + neur3_1 nexp .)
    OR              reduce using rule 88 (q -> + neur3_1 nexp .)
    ;               reduce using rule 88 (q -> + neur3_1 nexp .)
    )               reduce using rule 88 (q -> + neur3_1 nexp .)
    ,               reduce using rule 88 (q -> + neur3_1 nexp .)
    ]               reduce using rule 88 (q -> + neur3_1 nexp .)


state 220

    (89) q -> - neur3_2 nexp .

    EQ              reduce using rule 89 (q -> - neur3_2 nexp .)
    NOTEQ           reduce using rule 89 (q -> - neur3_2 nexp .)
    >               reduce using rule 89 (q -> - neur3_2 nexp .)
    <               reduce using rule 89 (q -> - neur3_2 nexp .)
    MTHANEQ         reduce using rule 89 (q -> - neur3_2 nexp .)
    LTHANEQ         reduce using rule 89 (q -> - neur3_2 nexp .)
    AND             reduce using rule 89 (q -> - neur3_2 nexp .)
    OR              reduce using rule 89 (q -> - neur3_2 nexp .)
    ;               reduce using rule 89 (q -> - neur3_2 nexp .)
    )               reduce using rule 89 (q -> - neur3_2 nexp .)
    ,               reduce using rule 89 (q -> - neur3_2 nexp .)
    ]               reduce using rule 89 (q -> - neur3_2 nexp .)


state 221

    (66) o -> AND neur9_1 subexpresion .

    ;               reduce using rule 66 (o -> AND neur9_1 subexpresion .)
    )               reduce using rule 66 (o -> AND neur9_1 subexpresion .)
    ,               reduce using rule 66 (o -> AND neur9_1 subexpresion .)


state 222

    (67) o -> OR neur9_2 subexpresion .

    ;               reduce using rule 67 (o -> OR neur9_2 subexpresion .)
    )               reduce using rule 67 (o -> OR neur9_2 subexpresion .)
    ,               reduce using rule 67 (o -> OR neur9_2 subexpresion .)


state 223

    (126) play -> PLAY ( NOTA , CTEE ) ; .

    ID              reduce using rule 126 (play -> PLAY ( NOTA , CTEE ) ; .)
    IF              reduce using rule 126 (play -> PLAY ( NOTA , CTEE ) ; .)
    FOR             reduce using rule 126 (play -> PLAY ( NOTA , CTEE ) ; .)
    RETURN          reduce using rule 126 (play -> PLAY ( NOTA , CTEE ) ; .)
    WHILE           reduce using rule 126 (play -> PLAY ( NOTA , CTEE ) ; .)
    PLAY            reduce using rule 126 (play -> PLAY ( NOTA , CTEE ) ; .)
    PRINT           reduce using rule 126 (play -> PLAY ( NOTA , CTEE ) ; .)
    CALL            reduce using rule 126 (play -> PLAY ( NOTA , CTEE ) ; .)
    }               reduce using rule 126 (play -> PLAY ( NOTA , CTEE ) ; .)


state 224

    (55) for -> FOR ( asignacion neur18 expresion ; neur19 . asignacion ) neur21 bloque ; neur20
    (45) asignacion -> . ID asiglista = neur8 expresion ;

    ID              shift and go to state 76

    asignacion                     shift and go to state 238

state 225

    (49) if -> IF ( expresion ) neur13 bloque l . ; neur15

    ;               shift and go to state 239


state 226

    (52) l -> ELSE . neur14 bloque
    (53) neur14 -> .

    {               reduce using rule 53 (neur14 -> .)

    neur14                         shift and go to state 240

state 227

    (51) l -> empty .

    ;               reduce using rule 51 (l -> empty .)


state 228

    (133) t -> , . s
    (129) s -> . empty
    (130) s -> . expresion neur25 t
    (145) empty -> .
    (60) expresion -> . m subexpresion
    (61) m -> . empty
    (62) m -> . NOT

    )               reduce using rule 145 (empty -> .)
    -               reduce using rule 145 (empty -> .)
    (               reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTEE            reduce using rule 145 (empty -> .)
    CTEF            reduce using rule 145 (empty -> .)
    CTEBOOL         reduce using rule 145 (empty -> .)
    CTECHAR         reduce using rule 145 (empty -> .)
    CALL            reduce using rule 145 (empty -> .)
    NOT             shift and go to state 90

    expresion                      shift and go to state 185
    m                              shift and go to state 89
    s                              shift and go to state 241
    empty                          shift and go to state 187

state 229

    (130) s -> expresion neur25 t .

    )               reduce using rule 130 (s -> expresion neur25 t .)


state 230

    (132) t -> empty .

    )               reduce using rule 132 (t -> empty .)


state 231

    (134) callvoidfunc -> CALL ID neur24 ( s ) neur26 . ;

    ;               shift and go to state 242


state 232

    (123) while -> WHILE ( neur16 expresion ) neur13 bloque ; . neur17
    (125) neur17 -> .

    ID              reduce using rule 125 (neur17 -> .)
    IF              reduce using rule 125 (neur17 -> .)
    FOR             reduce using rule 125 (neur17 -> .)
    RETURN          reduce using rule 125 (neur17 -> .)
    WHILE           reduce using rule 125 (neur17 -> .)
    PLAY            reduce using rule 125 (neur17 -> .)
    PRINT           reduce using rule 125 (neur17 -> .)
    CALL            reduce using rule 125 (neur17 -> .)
    }               reduce using rule 125 (neur17 -> .)

    neur17                         shift and go to state 243

state 233

    (99) factor -> ( neur6 expresion ) neur7 .

    *               reduce using rule 99 (factor -> ( neur6 expresion ) neur7 .)
    /               reduce using rule 99 (factor -> ( neur6 expresion ) neur7 .)
    +               reduce using rule 99 (factor -> ( neur6 expresion ) neur7 .)
    -               reduce using rule 99 (factor -> ( neur6 expresion ) neur7 .)
    EQ              reduce using rule 99 (factor -> ( neur6 expresion ) neur7 .)
    NOTEQ           reduce using rule 99 (factor -> ( neur6 expresion ) neur7 .)
    >               reduce using rule 99 (factor -> ( neur6 expresion ) neur7 .)
    <               reduce using rule 99 (factor -> ( neur6 expresion ) neur7 .)
    MTHANEQ         reduce using rule 99 (factor -> ( neur6 expresion ) neur7 .)
    LTHANEQ         reduce using rule 99 (factor -> ( neur6 expresion ) neur7 .)
    AND             reduce using rule 99 (factor -> ( neur6 expresion ) neur7 .)
    OR              reduce using rule 99 (factor -> ( neur6 expresion ) neur7 .)
    ;               reduce using rule 99 (factor -> ( neur6 expresion ) neur7 .)
    )               reduce using rule 99 (factor -> ( neur6 expresion ) neur7 .)
    ,               reduce using rule 99 (factor -> ( neur6 expresion ) neur7 .)
    ]               reduce using rule 99 (factor -> ( neur6 expresion ) neur7 .)


state 234

    (95) n -> * neur2_1 termino .

    +               reduce using rule 95 (n -> * neur2_1 termino .)
    -               reduce using rule 95 (n -> * neur2_1 termino .)
    EQ              reduce using rule 95 (n -> * neur2_1 termino .)
    NOTEQ           reduce using rule 95 (n -> * neur2_1 termino .)
    >               reduce using rule 95 (n -> * neur2_1 termino .)
    <               reduce using rule 95 (n -> * neur2_1 termino .)
    MTHANEQ         reduce using rule 95 (n -> * neur2_1 termino .)
    LTHANEQ         reduce using rule 95 (n -> * neur2_1 termino .)
    AND             reduce using rule 95 (n -> * neur2_1 termino .)
    OR              reduce using rule 95 (n -> * neur2_1 termino .)
    ;               reduce using rule 95 (n -> * neur2_1 termino .)
    )               reduce using rule 95 (n -> * neur2_1 termino .)
    ,               reduce using rule 95 (n -> * neur2_1 termino .)
    ]               reduce using rule 95 (n -> * neur2_1 termino .)


state 235

    (96) n -> / neur2_2 termino .

    +               reduce using rule 96 (n -> / neur2_2 termino .)
    -               reduce using rule 96 (n -> / neur2_2 termino .)
    EQ              reduce using rule 96 (n -> / neur2_2 termino .)
    NOTEQ           reduce using rule 96 (n -> / neur2_2 termino .)
    >               reduce using rule 96 (n -> / neur2_2 termino .)
    <               reduce using rule 96 (n -> / neur2_2 termino .)
    MTHANEQ         reduce using rule 96 (n -> / neur2_2 termino .)
    LTHANEQ         reduce using rule 96 (n -> / neur2_2 termino .)
    AND             reduce using rule 96 (n -> / neur2_2 termino .)
    OR              reduce using rule 96 (n -> / neur2_2 termino .)
    ;               reduce using rule 96 (n -> / neur2_2 termino .)
    )               reduce using rule 96 (n -> / neur2_2 termino .)
    ,               reduce using rule 96 (n -> / neur2_2 termino .)
    ]               reduce using rule 96 (n -> / neur2_2 termino .)


state 236

    (128) callreturnfunc -> CALL ID neur24 ( s . ) neur26 ;

    )               shift and go to state 244


state 237

    (122) length -> . LENGTH ( ) .

    *               reduce using rule 122 (length -> . LENGTH ( ) .)
    /               reduce using rule 122 (length -> . LENGTH ( ) .)
    +               reduce using rule 122 (length -> . LENGTH ( ) .)
    -               reduce using rule 122 (length -> . LENGTH ( ) .)
    EQ              reduce using rule 122 (length -> . LENGTH ( ) .)
    NOTEQ           reduce using rule 122 (length -> . LENGTH ( ) .)
    >               reduce using rule 122 (length -> . LENGTH ( ) .)
    <               reduce using rule 122 (length -> . LENGTH ( ) .)
    MTHANEQ         reduce using rule 122 (length -> . LENGTH ( ) .)
    LTHANEQ         reduce using rule 122 (length -> . LENGTH ( ) .)
    AND             reduce using rule 122 (length -> . LENGTH ( ) .)
    OR              reduce using rule 122 (length -> . LENGTH ( ) .)
    ;               reduce using rule 122 (length -> . LENGTH ( ) .)
    )               reduce using rule 122 (length -> . LENGTH ( ) .)
    ,               reduce using rule 122 (length -> . LENGTH ( ) .)
    ]               reduce using rule 122 (length -> . LENGTH ( ) .)


state 238

    (55) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion . ) neur21 bloque ; neur20

    )               shift and go to state 245


state 239

    (49) if -> IF ( expresion ) neur13 bloque l ; . neur15
    (54) neur15 -> .

    ID              reduce using rule 54 (neur15 -> .)
    IF              reduce using rule 54 (neur15 -> .)
    FOR             reduce using rule 54 (neur15 -> .)
    RETURN          reduce using rule 54 (neur15 -> .)
    WHILE           reduce using rule 54 (neur15 -> .)
    PLAY            reduce using rule 54 (neur15 -> .)
    PRINT           reduce using rule 54 (neur15 -> .)
    CALL            reduce using rule 54 (neur15 -> .)
    }               reduce using rule 54 (neur15 -> .)

    neur15                         shift and go to state 246

state 240

    (52) l -> ELSE neur14 . bloque
    (34) bloque -> . { i }

    {               shift and go to state 59

    bloque                         shift and go to state 247

state 241

    (133) t -> , s .

    )               reduce using rule 133 (t -> , s .)


state 242

    (134) callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .

    ID              reduce using rule 134 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    IF              reduce using rule 134 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    FOR             reduce using rule 134 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    RETURN          reduce using rule 134 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    WHILE           reduce using rule 134 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    PLAY            reduce using rule 134 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    PRINT           reduce using rule 134 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    CALL            reduce using rule 134 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)
    }               reduce using rule 134 (callvoidfunc -> CALL ID neur24 ( s ) neur26 ; .)


state 243

    (123) while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .

    ID              reduce using rule 123 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    IF              reduce using rule 123 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    FOR             reduce using rule 123 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    RETURN          reduce using rule 123 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    WHILE           reduce using rule 123 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    PLAY            reduce using rule 123 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    PRINT           reduce using rule 123 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    CALL            reduce using rule 123 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)
    }               reduce using rule 123 (while -> WHILE ( neur16 expresion ) neur13 bloque ; neur17 .)


state 244

    (128) callreturnfunc -> CALL ID neur24 ( s ) . neur26 ;
    (136) neur26 -> .

    ;               reduce using rule 136 (neur26 -> .)

    neur26                         shift and go to state 248

state 245

    (55) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) . neur21 bloque ; neur20
    (58) neur21 -> .

    {               reduce using rule 58 (neur21 -> .)

    neur21                         shift and go to state 249

state 246

    (49) if -> IF ( expresion ) neur13 bloque l ; neur15 .

    ID              reduce using rule 49 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    IF              reduce using rule 49 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    FOR             reduce using rule 49 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    RETURN          reduce using rule 49 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    WHILE           reduce using rule 49 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    PLAY            reduce using rule 49 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    PRINT           reduce using rule 49 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    CALL            reduce using rule 49 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)
    }               reduce using rule 49 (if -> IF ( expresion ) neur13 bloque l ; neur15 .)


state 247

    (52) l -> ELSE neur14 bloque .

    ;               reduce using rule 52 (l -> ELSE neur14 bloque .)


state 248

    (128) callreturnfunc -> CALL ID neur24 ( s ) neur26 . ;

    ;               shift and go to state 250


state 249

    (55) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 . bloque ; neur20
    (34) bloque -> . { i }

    {               shift and go to state 59

    bloque                         shift and go to state 251

state 250

    (128) callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .

    *               reduce using rule 128 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    /               reduce using rule 128 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    +               reduce using rule 128 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    -               reduce using rule 128 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    EQ              reduce using rule 128 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    NOTEQ           reduce using rule 128 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    >               reduce using rule 128 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    <               reduce using rule 128 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    MTHANEQ         reduce using rule 128 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    LTHANEQ         reduce using rule 128 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    AND             reduce using rule 128 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    OR              reduce using rule 128 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    ;               reduce using rule 128 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    )               reduce using rule 128 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    ,               reduce using rule 128 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)
    ]               reduce using rule 128 (callreturnfunc -> CALL ID neur24 ( s ) neur26 ; .)


state 251

    (55) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque . ; neur20

    ;               shift and go to state 252


state 252

    (55) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; . neur20
    (59) neur20 -> .

    ID              reduce using rule 59 (neur20 -> .)
    IF              reduce using rule 59 (neur20 -> .)
    FOR             reduce using rule 59 (neur20 -> .)
    RETURN          reduce using rule 59 (neur20 -> .)
    WHILE           reduce using rule 59 (neur20 -> .)
    PLAY            reduce using rule 59 (neur20 -> .)
    PRINT           reduce using rule 59 (neur20 -> .)
    CALL            reduce using rule 59 (neur20 -> .)
    }               reduce using rule 59 (neur20 -> .)

    neur20                         shift and go to state 253

state 253

    (55) for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .

    ID              reduce using rule 55 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    IF              reduce using rule 55 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    FOR             reduce using rule 55 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    RETURN          reduce using rule 55 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    WHILE           reduce using rule 55 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    PLAY            reduce using rule 55 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    PRINT           reduce using rule 55 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    CALL            reduce using rule 55 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)
    }               reduce using rule 55 (for -> FOR ( asignacion neur18 expresion ; neur19 asignacion ) neur21 bloque ; neur20 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 10 resolved using rule (a -> empty)
WARNING: rejected rule (b -> empty) in state 10
WARNING: reduce/reduce conflict in state 27 resolved using rule (c -> empty)
WARNING: rejected rule (d -> empty) in state 27
WARNING: reduce/reduce conflict in state 58 resolved using rule (f -> empty)
WARNING: rejected rule (g -> empty) in state 58
WARNING: reduce/reduce conflict in state 92 resolved using rule (i -> empty)
WARNING: rejected rule (j -> empty) in state 92
WARNING: Rule (b -> empty) is never reduced
WARNING: Rule (d -> empty) is never reduced
WARNING: Rule (g -> empty) is never reduced
WARNING: Rule (j -> empty) is never reduced
